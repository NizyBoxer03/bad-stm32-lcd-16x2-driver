
lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a88  08003a88  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003a88  08003a88  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a88  08003a88  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a88  08003a88  00013a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a8c  08003a8c  00013a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  08003b00  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003b00  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c539  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f9c  00000000  00000000  0002c5d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00006468  00000000  00000000  0002e56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc0  00000000  00000000  000349d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000aa0  00000000  00000000  00035598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001864f  00000000  00000000  00036038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d8c1  00000000  00000000  0004e687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d6f9  00000000  00000000  0005bf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e9641  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033cc  00000000  00000000  000e9694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080039e8 	.word	0x080039e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080039e8 	.word	0x080039e8

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <DWT_Delay_Init+0x58>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	4a13      	ldr	r2, [pc, #76]	; (80006ac <DWT_Delay_Init+0x58>)
 800065e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000662:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <DWT_Delay_Init+0x58>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	4a10      	ldr	r2, [pc, #64]	; (80006ac <DWT_Delay_Init+0x58>)
 800066a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800066e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <DWT_Delay_Init+0x5c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <DWT_Delay_Init+0x5c>)
 8000676:	f023 0301 	bic.w	r3, r3, #1
 800067a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <DWT_Delay_Init+0x5c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a0b      	ldr	r2, [pc, #44]	; (80006b0 <DWT_Delay_Init+0x5c>)
 8000682:	f043 0301 	orr.w	r3, r3, #1
 8000686:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <DWT_Delay_Init+0x5c>)
 800068a:	2200      	movs	r2, #0
 800068c:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800068e:	bf00      	nop
    __ASM volatile ("NOP");
 8000690:	bf00      	nop
    __ASM volatile ("NOP");
 8000692:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <DWT_Delay_Init+0x5c>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 800069c:	2300      	movs	r3, #0
 800069e:	e000      	b.n	80006a2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80006a0:	2301      	movs	r3, #1
    }
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000edf0 	.word	0xe000edf0
 80006b0:	e0001000 	.word	0xe0001000

080006b4 <DWT_Delay_us>:
uint32_t DWT_Delay_Init(void);


// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <DWT_Delay_us+0x48>)
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80006c2:	f002 f801 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4a0d      	ldr	r2, [pc, #52]	; (8000700 <DWT_Delay_us+0x4c>)
 80006ca:	fba2 2303 	umull	r2, r3, r2, r3
 80006ce:	0c9b      	lsrs	r3, r3, #18
 80006d0:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	68ba      	ldr	r2, [r7, #8]
 80006d6:	fb02 f303 	mul.w	r3, r2, r3
 80006da:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80006dc:	bf00      	nop
 80006de:	4b07      	ldr	r3, [pc, #28]	; (80006fc <DWT_Delay_us+0x48>)
 80006e0:	685a      	ldr	r2, [r3, #4]
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	1ad2      	subs	r2, r2, r3
 80006e6:	6879      	ldr	r1, [r7, #4]
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	1acb      	subs	r3, r1, r3
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d3f6      	bcc.n	80006de <DWT_Delay_us+0x2a>
}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	e0001000 	.word	0xe0001000
 8000700:	431bde83 	.word	0x431bde83

08000704 <DWT_Delay_ms>:

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <DWT_Delay_ms+0x44>)
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8000712:	f001 ffd9 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 8000716:	4603      	mov	r3, r0
 8000718:	4a0c      	ldr	r2, [pc, #48]	; (800074c <DWT_Delay_ms+0x48>)
 800071a:	fba2 2303 	umull	r2, r3, r2, r3
 800071e:	099b      	lsrs	r3, r3, #6
 8000720:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	68ba      	ldr	r2, [r7, #8]
 8000726:	fb02 f303 	mul.w	r3, r2, r3
 800072a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 800072c:	bf00      	nop
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <DWT_Delay_ms+0x44>)
 8000730:	685a      	ldr	r2, [r3, #4]
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	1ad2      	subs	r2, r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	429a      	cmp	r2, r3
 800073a:	d3f8      	bcc.n	800072e <DWT_Delay_ms+0x2a>
}
 800073c:	bf00      	nop
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	e0001000 	.word	0xe0001000
 800074c:	10624dd3 	.word	0x10624dd3

08000750 <LCD_DATA>:
#include "DWT_Delay.h"

/* Escribe 1 o 0 en los pines configurados en LCD16x2_CfgParam */

void LCD_DATA(unsigned char Data)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
	(LCD16x2_CfgParam.LCD_GPIO)->ODR &= ~(0xF<<4);
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <LCD_DATA+0x3c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	68da      	ldr	r2, [r3, #12]
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <LCD_DATA+0x3c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000768:	60da      	str	r2, [r3, #12]
	(LCD16x2_CfgParam.LCD_GPIO)->ODR |= (0xF0 & (Data<<4)); //Aplico un mask para que no sobrescriba nada de lo que haya en el puerto
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <LCD_DATA+0x3c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	68d9      	ldr	r1, [r3, #12]
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	011b      	lsls	r3, r3, #4
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <LCD_DATA+0x3c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	430a      	orrs	r2, r1
 800077c:	60da      	str	r2, [r3, #12]
	LCD_EN_PULSE();
 800077e:	f000 f991 	bl	8000aa4 <LCD_EN_PULSE>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	08003a1c 	.word	0x08003a1c

08000790 <LCD_CMD>:

void LCD_CMD(unsigned char a_CMD)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	unsigned char Low4, High4;
	Low4  = a_CMD & 0x0F;
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	f003 030f 	and.w	r3, r3, #15
 80007a0:	73fb      	strb	r3, [r7, #15]
	High4 = a_CMD & 0xF0;
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	f023 030f 	bic.w	r3, r3, #15
 80007a8:	73bb      	strb	r3, [r7, #14]

	// Seleccionar Registro de Comando
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 0);
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <LCD_CMD+0x48>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <LCD_CMD+0x48>)
 80007b0:	89d1      	ldrh	r1, [r2, #14]
 80007b2:	2200      	movs	r2, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 fb95 	bl	8001ee4 <HAL_GPIO_WritePin>

    // Enviar comando a LCD
	// Enviar flanco a la señal ENable. No olvidar delays.
    LCD_DATA((High4>>4));
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	091b      	lsrs	r3, r3, #4
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ffc5 	bl	8000750 <LCD_DATA>
    LCD_DATA(Low4);
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ffc1 	bl	8000750 <LCD_DATA>

}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	08003a1c 	.word	0x08003a1c

080007dc <LCD_Clear>:

void LCD_Clear()
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
    LCD_CMD(0x1);
 80007e0:	2001      	movs	r0, #1
 80007e2:	f7ff ffd5 	bl	8000790 <LCD_CMD>
	LCD_CMD(0x2); //Return home
 80007e6:	2002      	movs	r0, #2
 80007e8:	f7ff ffd2 	bl	8000790 <LCD_CMD>
	DWT_Delay_ms(2);
 80007ec:	2002      	movs	r0, #2
 80007ee:	f7ff ff89 	bl	8000704 <DWT_Delay_ms>
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <LCD_SetCursor>:

/* Setea posicion de cursor */
void LCD_SetCursor(unsigned char fila, unsigned char columna)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	4603      	mov	r3, r0
 80007fe:	460a      	mov	r2, r1
 8000800:	71fb      	strb	r3, [r7, #7]
 8000802:	4613      	mov	r3, r2
 8000804:	71bb      	strb	r3, [r7, #6]
    if(fila == 1)
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d108      	bne.n	800081e <LCD_SetCursor+0x28>
    {
        LCD_CMD(0x80 + (columna - 1));
 800080c:	79bb      	ldrb	r3, [r7, #6]
 800080e:	337f      	adds	r3, #127	; 0x7f
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ffbc 	bl	8000790 <LCD_CMD>
        DWT_Delay_us(40);
 8000818:	2028      	movs	r0, #40	; 0x28
 800081a:	f7ff ff4b 	bl	80006b4 <DWT_Delay_us>

    }

    if(fila == 2)
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b02      	cmp	r3, #2
 8000822:	d108      	bne.n	8000836 <LCD_SetCursor+0x40>
    {
    	LCD_CMD(0xC0 + (columna - 1));
 8000824:	79bb      	ldrb	r3, [r7, #6]
 8000826:	3b41      	subs	r3, #65	; 0x41
 8000828:	b2db      	uxtb	r3, r3
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ffb0 	bl	8000790 <LCD_CMD>
    	DWT_Delay_us(40);
 8000830:	2028      	movs	r0, #40	; 0x28
 8000832:	f7ff ff3f 	bl	80006b4 <DWT_Delay_us>
    }

    DWT_Delay_ms(2);
 8000836:	2002      	movs	r0, #2
 8000838:	f7ff ff64 	bl	8000704 <DWT_Delay_ms>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <LCD_Init>:

void LCD_Init()
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 0310 	add.w	r3, r7, #16
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
	
	// Inicializa la funcion de delay DWT 
	DWT_Delay_Init();
 8000858:	f7ff fefc 	bl	8000654 <DWT_Delay_Init>
	
    // habilitacion de clock en GPIOs
	if(LCD16x2_CfgParam.LCD_GPIO == GPIOA)
 800085c:	4b68      	ldr	r3, [pc, #416]	; (8000a00 <LCD_Init+0x1bc>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a68      	ldr	r2, [pc, #416]	; (8000a04 <LCD_Init+0x1c0>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d10c      	bne.n	8000880 <LCD_Init+0x3c>
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b68      	ldr	r3, [pc, #416]	; (8000a08 <LCD_Init+0x1c4>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	4a67      	ldr	r2, [pc, #412]	; (8000a08 <LCD_Init+0x1c4>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6193      	str	r3, [r2, #24]
 8000872:	4b65      	ldr	r3, [pc, #404]	; (8000a08 <LCD_Init+0x1c4>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	e034      	b.n	80008ea <LCD_Init+0xa6>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOB)
 8000880:	4b5f      	ldr	r3, [pc, #380]	; (8000a00 <LCD_Init+0x1bc>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a61      	ldr	r2, [pc, #388]	; (8000a0c <LCD_Init+0x1c8>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d10c      	bne.n	80008a4 <LCD_Init+0x60>
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4b5f      	ldr	r3, [pc, #380]	; (8000a08 <LCD_Init+0x1c4>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	4a5e      	ldr	r2, [pc, #376]	; (8000a08 <LCD_Init+0x1c4>)
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	6193      	str	r3, [r2, #24]
 8000896:	4b5c      	ldr	r3, [pc, #368]	; (8000a08 <LCD_Init+0x1c4>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f003 0308 	and.w	r3, r3, #8
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	e022      	b.n	80008ea <LCD_Init+0xa6>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOC)
 80008a4:	4b56      	ldr	r3, [pc, #344]	; (8000a00 <LCD_Init+0x1bc>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a59      	ldr	r2, [pc, #356]	; (8000a10 <LCD_Init+0x1cc>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d10c      	bne.n	80008c8 <LCD_Init+0x84>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	4b56      	ldr	r3, [pc, #344]	; (8000a08 <LCD_Init+0x1c4>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	4a55      	ldr	r2, [pc, #340]	; (8000a08 <LCD_Init+0x1c4>)
 80008b4:	f043 0310 	orr.w	r3, r3, #16
 80008b8:	6193      	str	r3, [r2, #24]
 80008ba:	4b53      	ldr	r3, [pc, #332]	; (8000a08 <LCD_Init+0x1c4>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	f003 0310 	and.w	r3, r3, #16
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	e010      	b.n	80008ea <LCD_Init+0xa6>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOD)
 80008c8:	4b4d      	ldr	r3, [pc, #308]	; (8000a00 <LCD_Init+0x1bc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a51      	ldr	r2, [pc, #324]	; (8000a14 <LCD_Init+0x1d0>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d10b      	bne.n	80008ea <LCD_Init+0xa6>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80008d2:	4b4d      	ldr	r3, [pc, #308]	; (8000a08 <LCD_Init+0x1c4>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	4a4c      	ldr	r2, [pc, #304]	; (8000a08 <LCD_Init+0x1c4>)
 80008d8:	f043 0320 	orr.w	r3, r3, #32
 80008dc:	6193      	str	r3, [r2, #24]
 80008de:	4b4a      	ldr	r3, [pc, #296]	; (8000a08 <LCD_Init+0x1c4>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f003 0320 	and.w	r3, r3, #32
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]
	
	
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, GPIO_PIN_RESET);
 80008ea:	4b45      	ldr	r3, [pc, #276]	; (8000a00 <LCD_Init+0x1bc>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a44      	ldr	r2, [pc, #272]	; (8000a00 <LCD_Init+0x1bc>)
 80008f0:	8891      	ldrh	r1, [r2, #4]
 80008f2:	2200      	movs	r2, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 faf5 	bl	8001ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, GPIO_PIN_RESET);
 80008fa:	4b41      	ldr	r3, [pc, #260]	; (8000a00 <LCD_Init+0x1bc>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a40      	ldr	r2, [pc, #256]	; (8000a00 <LCD_Init+0x1bc>)
 8000900:	88d1      	ldrh	r1, [r2, #6]
 8000902:	2200      	movs	r2, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f001 faed 	bl	8001ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, GPIO_PIN_RESET);
 800090a:	4b3d      	ldr	r3, [pc, #244]	; (8000a00 <LCD_Init+0x1bc>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a3c      	ldr	r2, [pc, #240]	; (8000a00 <LCD_Init+0x1bc>)
 8000910:	8911      	ldrh	r1, [r2, #8]
 8000912:	2200      	movs	r2, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f001 fae5 	bl	8001ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, GPIO_PIN_RESET);
 800091a:	4b39      	ldr	r3, [pc, #228]	; (8000a00 <LCD_Init+0x1bc>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a38      	ldr	r2, [pc, #224]	; (8000a00 <LCD_Init+0x1bc>)
 8000920:	8951      	ldrh	r1, [r2, #10]
 8000922:	2200      	movs	r2, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f001 fadd 	bl	8001ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 800092a:	4b35      	ldr	r3, [pc, #212]	; (8000a00 <LCD_Init+0x1bc>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a34      	ldr	r2, [pc, #208]	; (8000a00 <LCD_Init+0x1bc>)
 8000930:	89d1      	ldrh	r1, [r2, #14]
 8000932:	2200      	movs	r2, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f001 fad5 	bl	8001ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 800093a:	4b31      	ldr	r3, [pc, #196]	; (8000a00 <LCD_Init+0x1bc>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a30      	ldr	r2, [pc, #192]	; (8000a00 <LCD_Init+0x1bc>)
 8000940:	8991      	ldrh	r1, [r2, #12]
 8000942:	2200      	movs	r2, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f001 facd 	bl	8001ee4 <HAL_GPIO_WritePin>
	
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 800094a:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <LCD_Init+0x1bc>)
 800094c:	889a      	ldrh	r2, [r3, #4]
 800094e:	4b2c      	ldr	r3, [pc, #176]	; (8000a00 <LCD_Init+0x1bc>)
 8000950:	88db      	ldrh	r3, [r3, #6]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 8000952:	4313      	orrs	r3, r2
 8000954:	b29a      	uxth	r2, r3
 8000956:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <LCD_Init+0x1bc>)
 8000958:	891b      	ldrh	r3, [r3, #8]
 800095a:	4313      	orrs	r3, r2
 800095c:	b29a      	uxth	r2, r3
 800095e:	4b28      	ldr	r3, [pc, #160]	; (8000a00 <LCD_Init+0x1bc>)
 8000960:	895b      	ldrh	r3, [r3, #10]
 8000962:	4313      	orrs	r3, r2
 8000964:	b29a      	uxth	r2, r3
 8000966:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <LCD_Init+0x1bc>)
 8000968:	89db      	ldrh	r3, [r3, #14]
 800096a:	4313      	orrs	r3, r2
 800096c:	b29a      	uxth	r2, r3
			LCD16x2_CfgParam.EN_PIN;
 800096e:	4b24      	ldr	r3, [pc, #144]	; (8000a00 <LCD_Init+0x1bc>)
 8000970:	899b      	ldrh	r3, [r3, #12]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 8000972:	4313      	orrs	r3, r2
 8000974:	b29b      	uxth	r3, r3
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 8000976:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2302      	movs	r3, #2
 8000982:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LCD16x2_CfgParam.LCD_GPIO, &GPIO_InitStruct);
 8000984:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <LCD_Init+0x1bc>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f107 0210 	add.w	r2, r7, #16
 800098c:	4611      	mov	r1, r2
 800098e:	4618      	mov	r0, r3
 8000990:	f001 f924 	bl	8001bdc <HAL_GPIO_Init>

	// Inicializar display de acuerdo a la especificiación provista en DataSheet

	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 0);
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <LCD_Init+0x1bc>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <LCD_Init+0x1bc>)
 800099a:	89d1      	ldrh	r1, [r2, #14]
 800099c:	2200      	movs	r2, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f001 faa0 	bl	8001ee4 <HAL_GPIO_WritePin>
	DWT_Delay_ms(16); //Delay +15 ms
 80009a4:	2010      	movs	r0, #16
 80009a6:	f7ff fead 	bl	8000704 <DWT_Delay_ms>
	LCD_DATA(0x3); //Comando de config
 80009aa:	2003      	movs	r0, #3
 80009ac:	f7ff fed0 	bl	8000750 <LCD_DATA>
	DWT_Delay_ms(5); //Delay +4.1ms
 80009b0:	2005      	movs	r0, #5
 80009b2:	f7ff fea7 	bl	8000704 <DWT_Delay_ms>
	LCD_DATA(0x3); //Comando de config
 80009b6:	2003      	movs	r0, #3
 80009b8:	f7ff feca 	bl	8000750 <LCD_DATA>
	DWT_Delay_us(110); //Delay +100ms
 80009bc:	206e      	movs	r0, #110	; 0x6e
 80009be:	f7ff fe79 	bl	80006b4 <DWT_Delay_us>
	LCD_DATA(0x3); //Comando de config
 80009c2:	2003      	movs	r0, #3
 80009c4:	f7ff fec4 	bl	8000750 <LCD_DATA>
	LCD_DATA(0x2); //Comando de config
 80009c8:	2002      	movs	r0, #2
 80009ca:	f7ff fec1 	bl	8000750 <LCD_DATA>

	LCD_CMD(0x2C);
 80009ce:	202c      	movs	r0, #44	; 0x2c
 80009d0:	f7ff fede 	bl	8000790 <LCD_CMD>
	LCD_CMD(0x8);
 80009d4:	2008      	movs	r0, #8
 80009d6:	f7ff fedb 	bl	8000790 <LCD_CMD>
	LCD_CMD(0x1);
 80009da:	2001      	movs	r0, #1
 80009dc:	f7ff fed8 	bl	8000790 <LCD_CMD>
	LCD_CMD(0xE);
 80009e0:	200e      	movs	r0, #14
 80009e2:	f7ff fed5 	bl	8000790 <LCD_CMD>
	LCD_CMD(0x6); //Entry Mode Set
 80009e6:	2006      	movs	r0, #6
 80009e8:	f7ff fed2 	bl	8000790 <LCD_CMD>
	LCD_CMD(0x2); //Return home
 80009ec:	2002      	movs	r0, #2
 80009ee:	f7ff fecf 	bl	8000790 <LCD_CMD>
	DWT_Delay_ms(2);
 80009f2:	2002      	movs	r0, #2
 80009f4:	f7ff fe86 	bl	8000704 <DWT_Delay_ms>

	//Init Done
}
 80009f8:	bf00      	nop
 80009fa:	3720      	adds	r7, #32
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	08003a1c 	.word	0x08003a1c
 8000a04:	40010800 	.word	0x40010800
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40010c00 	.word	0x40010c00
 8000a10:	40011000 	.word	0x40011000
 8000a14:	40011400 	.word	0x40011400

08000a18 <LCD_WriteChar>:
void LCD_WriteChar(char Data) //El LCD opera en ASCII (con algunos cambios, no requiere conversión)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
   // Puede usar HAL_GPIO_WritePin()

	char Low4, High4;
    Low4  = Data & 0x0F;
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	f003 030f 	and.w	r3, r3, #15
 8000a28:	73fb      	strb	r3, [r7, #15]
    High4 = Data & 0xF0;
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	f023 030f 	bic.w	r3, r3, #15
 8000a30:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 1);
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <LCD_WriteChar+0x48>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <LCD_WriteChar+0x48>)
 8000a38:	89d1      	ldrh	r1, [r2, #14]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f001 fa51 	bl	8001ee4 <HAL_GPIO_WritePin>

   	// Enviar nibble alto
    LCD_DATA((High4>>4));
 8000a42:	7bbb      	ldrb	r3, [r7, #14]
 8000a44:	091b      	lsrs	r3, r3, #4
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fe81 	bl	8000750 <LCD_DATA>

   	// Enviar nibble bajo
    LCD_DATA(Low4);
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fe7d 	bl	8000750 <LCD_DATA>
}
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	08003a1c 	.word	0x08003a1c

08000a64 <LCD_WriteString>:

void LCD_WriteString(char *str)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
    while(str[i] != '\0')
 8000a70:	e00c      	b.n	8000a8c <LCD_WriteString+0x28>
    {
 	   LCD_WriteChar(str[i]);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	4413      	add	r3, r2
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff ffcc 	bl	8000a18 <LCD_WriteChar>
	   DWT_Delay_us(40);
 8000a80:	2028      	movs	r0, #40	; 0x28
 8000a82:	f7ff fe17 	bl	80006b4 <DWT_Delay_us>
	   i++;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
    while(str[i] != '\0')
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d1ec      	bne.n	8000a72 <LCD_WriteString+0xe>
    }
}
 8000a98:	bf00      	nop
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <LCD_EN_PULSE>:
	LCD_CMD(0x6); //Entry Mode Set - S = 0
	DWT_Delay_us(40);
}

void LCD_EN_PULSE()
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <LCD_EN_PULSE+0x30>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a09      	ldr	r2, [pc, #36]	; (8000ad4 <LCD_EN_PULSE+0x30>)
 8000aae:	8991      	ldrh	r1, [r2, #12]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 fa16 	bl	8001ee4 <HAL_GPIO_WritePin>
	DWT_Delay_ms(5);
 8000ab8:	2005      	movs	r0, #5
 8000aba:	f7ff fe23 	bl	8000704 <DWT_Delay_ms>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <LCD_EN_PULSE+0x30>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <LCD_EN_PULSE+0x30>)
 8000ac4:	8991      	ldrh	r1, [r2, #12]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f001 fa0b 	bl	8001ee4 <HAL_GPIO_WritePin>
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	08003a1c 	.word	0x08003a1c

08000ad8 <DWT_Delay_ms>:
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <DWT_Delay_ms+0x44>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8000ae6:	f001 fdef 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 8000aea:	4603      	mov	r3, r0
 8000aec:	4a0c      	ldr	r2, [pc, #48]	; (8000b20 <DWT_Delay_ms+0x48>)
 8000aee:	fba2 2303 	umull	r2, r3, r2, r3
 8000af2:	099b      	lsrs	r3, r3, #6
 8000af4:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	68ba      	ldr	r2, [r7, #8]
 8000afa:	fb02 f303 	mul.w	r3, r2, r3
 8000afe:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8000b00:	bf00      	nop
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <DWT_Delay_ms+0x44>)
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	1ad2      	subs	r2, r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d3f8      	bcc.n	8000b02 <DWT_Delay_ms+0x2a>
}
 8000b10:	bf00      	nop
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	e0001000 	.word	0xe0001000
 8000b20:	10624dd3 	.word	0x10624dd3

08000b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2a:	f000 fadf 	bl	80010ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2e:	f000 f85f 	bl	8000bf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b32:	f000 f939 	bl	8000da8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b36:	f000 f8e9 	bl	8000d0c <MX_TIM2_Init>
  MX_ADC1_Init();
 8000b3a:	f000 f8a9 	bl	8000c90 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2); //Start timer
 8000b3e:	4826      	ldr	r0, [pc, #152]	; (8000bd8 <main+0xb4>)
 8000b40:	f001 fef0 	bl	8002924 <HAL_TIM_Base_Start_IT>
  LCD_Init();
 8000b44:	f7ff fe7e 	bl	8000844 <LCD_Init>

  LCD_Clear();
 8000b48:	f7ff fe48 	bl	80007dc <LCD_Clear>
  LCD_SetCursor(1, 1);
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f7ff fe51 	bl	80007f6 <LCD_SetCursor>
  LCD_WriteString("CONVERSION ADC");
 8000b54:	4821      	ldr	r0, [pc, #132]	; (8000bdc <main+0xb8>)
 8000b56:	f7ff ff85 	bl	8000a64 <LCD_WriteString>
  DWT_Delay_ms(100);
 8000b5a:	2064      	movs	r0, #100	; 0x64
 8000b5c:	f7ff ffbc 	bl	8000ad8 <DWT_Delay_ms>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  int value = (ADCReading * 330 / 4096);
 8000b60:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <main+0xbc>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	491f      	ldr	r1, [pc, #124]	; (8000be4 <main+0xc0>)
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fbfe 	bl	8000368 <__aeabi_fmul>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fcac 	bl	80004d0 <__aeabi_fdiv>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fd44 	bl	8000608 <__aeabi_f2iz>
 8000b80:	4603      	mov	r3, r0
 8000b82:	617b      	str	r3, [r7, #20]
	  int value_dec = value % 100;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	4a18      	ldr	r2, [pc, #96]	; (8000be8 <main+0xc4>)
 8000b88:	fb82 1203 	smull	r1, r2, r2, r3
 8000b8c:	1151      	asrs	r1, r2, #5
 8000b8e:	17da      	asrs	r2, r3, #31
 8000b90:	1a8a      	subs	r2, r1, r2
 8000b92:	2164      	movs	r1, #100	; 0x64
 8000b94:	fb01 f202 	mul.w	r2, r1, r2
 8000b98:	1a9b      	subs	r3, r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
	  int value_int = (value - value_dec)/ 100;
 8000b9c:	697a      	ldr	r2, [r7, #20]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	4a11      	ldr	r2, [pc, #68]	; (8000be8 <main+0xc4>)
 8000ba4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba8:	1152      	asrs	r2, r2, #5
 8000baa:	17db      	asrs	r3, r3, #31
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	60fb      	str	r3, [r7, #12]

	  char volts[10];

	  sprintf(volts, "%d,%02d V", value_int, value_dec);
 8000bb0:	4638      	mov	r0, r7
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	490d      	ldr	r1, [pc, #52]	; (8000bec <main+0xc8>)
 8000bb8:	f002 fa9c 	bl	80030f4 <siprintf>

	  LCD_SetCursor(2, 1);
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	f7ff fe19 	bl	80007f6 <LCD_SetCursor>
	  LCD_WriteString(volts);
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ff4c 	bl	8000a64 <LCD_WriteString>
	  DWT_Delay_ms(500);
 8000bcc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bd0:	f7ff ff82 	bl	8000ad8 <DWT_Delay_ms>
  {
 8000bd4:	e7c4      	b.n	8000b60 <main+0x3c>
 8000bd6:	bf00      	nop
 8000bd8:	200000bc 	.word	0x200000bc
 8000bdc:	08003a00 	.word	0x08003a00
 8000be0:	20000104 	.word	0x20000104
 8000be4:	43a50000 	.word	0x43a50000
 8000be8:	51eb851f 	.word	0x51eb851f
 8000bec:	08003a10 	.word	0x08003a10

08000bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b094      	sub	sp, #80	; 0x50
 8000bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bfa:	2228      	movs	r2, #40	; 0x28
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f002 fa70 	bl	80030e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c20:	2301      	movs	r3, #1
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 f988 	bl	8001f48 <HAL_RCC_OscConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0x52>
  {
    Error_Handler();
 8000c3e:	f000 f8ff 	bl	8000e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c42:	230f      	movs	r3, #15
 8000c44:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f001 fbf5 	bl	800244c <HAL_RCC_ClockConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000c68:	f000 f8ea 	bl	8000e40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 fd4e 	bl	8002718 <HAL_RCCEx_PeriphCLKConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c82:	f000 f8dd 	bl	8000e40 <Error_Handler>
  }
}
 8000c86:	bf00      	nop
 8000c88:	3750      	adds	r7, #80	; 0x50
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ca0:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_ADC1_Init+0x74>)
 8000ca2:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <MX_ADC1_Init+0x78>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <MX_ADC1_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_ADC1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_ADC1_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_ADC1_Init+0x74>)
 8000cba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000cbe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cc0:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <MX_ADC1_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_ADC1_Init+0x74>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <MX_ADC1_Init+0x74>)
 8000cce:	f000 fa6f 	bl	80011b0 <HAL_ADC_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000cd8:	f000 f8b2 	bl	8000e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_ADC1_Init+0x74>)
 8000cee:	f000 fccb 	bl	8001688 <HAL_ADC_ConfigChannel>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000cf8:	f000 f8a2 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	2000008c 	.word	0x2000008c
 8000d08:	40012400 	.word	0x40012400

08000d0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d12:	f107 0308 	add.w	r3, r7, #8
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d20:	463b      	mov	r3, r7
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d28:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d38:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d40:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000d44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d4e:	2280      	movs	r2, #128	; 0x80
 8000d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d52:	4814      	ldr	r0, [pc, #80]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d54:	f001 fd96 	bl	8002884 <HAL_TIM_Base_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d5e:	f000 f86f 	bl	8000e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480d      	ldr	r0, [pc, #52]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d70:	f001 ff32 	bl	8002bd8 <HAL_TIM_ConfigClockSource>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d7a:	f000 f861 	bl	8000e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d86:	463b      	mov	r3, r7
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4806      	ldr	r0, [pc, #24]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d8c:	f002 f910 	bl	8002fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d96:	f000 f853 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200000bc 	.word	0x200000bc

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbc:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a1d      	ldr	r2, [pc, #116]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000dc2:	f043 0310 	orr.w	r3, r3, #16
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0310 	and.w	r3, r3, #16
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000dda:	f043 0320 	orr.w	r3, r3, #32
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0320 	and.w	r3, r3, #32
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	4a11      	ldr	r2, [pc, #68]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000df2:	f043 0304 	orr.w	r3, r3, #4
 8000df6:	6193      	str	r3, [r2, #24]
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_GPIO_Init+0x90>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	f003 0304 	and.w	r3, r3, #4
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e0a:	480c      	ldr	r0, [pc, #48]	; (8000e3c <MX_GPIO_Init+0x94>)
 8000e0c:	f001 f86a 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4619      	mov	r1, r3
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <MX_GPIO_Init+0x94>)
 8000e2a:	f000 fed7 	bl	8001bdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e2e:	bf00      	nop
 8000e30:	3720      	adds	r7, #32
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40011000 	.word	0x40011000

08000e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e44:	b672      	cpsid	i
}
 8000e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <Error_Handler+0x8>
	...

08000e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	4a14      	ldr	r2, [pc, #80]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6193      	str	r3, [r2, #24]
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e74:	61d3      	str	r3, [r2, #28]
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_MspInit+0x60>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	4a04      	ldr	r2, [pc, #16]	; (8000eac <HAL_MspInit+0x60>)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010000 	.word	0x40010000

08000eb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a18      	ldr	r2, [pc, #96]	; (8000f2c <HAL_ADC_MspInit+0x7c>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d129      	bne.n	8000f24 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_ADC_MspInit+0x80>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a16      	ldr	r2, [pc, #88]	; (8000f30 <HAL_ADC_MspInit+0x80>)
 8000ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <HAL_ADC_MspInit+0x80>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_ADC_MspInit+0x80>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a10      	ldr	r2, [pc, #64]	; (8000f30 <HAL_ADC_MspInit+0x80>)
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_ADC_MspInit+0x80>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f00:	2301      	movs	r3, #1
 8000f02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f04:	2303      	movs	r3, #3
 8000f06:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4809      	ldr	r0, [pc, #36]	; (8000f34 <HAL_ADC_MspInit+0x84>)
 8000f10:	f000 fe64 	bl	8001bdc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2100      	movs	r1, #0
 8000f18:	2012      	movs	r0, #18
 8000f1a:	f000 fe28 	bl	8001b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f1e:	2012      	movs	r0, #18
 8000f20:	f000 fe41 	bl	8001ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f24:	bf00      	nop
 8000f26:	3720      	adds	r7, #32
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40012400 	.word	0x40012400
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40010800 	.word	0x40010800

08000f38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f48:	d113      	bne.n	8000f72 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <HAL_TIM_Base_MspInit+0x44>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <HAL_TIM_Base_MspInit+0x44>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	61d3      	str	r3, [r2, #28]
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_TIM_Base_MspInit+0x44>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	201c      	movs	r0, #28
 8000f68:	f000 fe01 	bl	8001b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f6c:	201c      	movs	r0, #28
 8000f6e:	f000 fe1a 	bl	8001ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000

08000f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <NMI_Handler+0x4>

08000f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <HardFault_Handler+0x4>

08000f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <MemManage_Handler+0x4>

08000f92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <BusFault_Handler+0x4>

08000f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <UsageFault_Handler+0x4>

08000f9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr

08000faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr

08000fc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc6:	f000 f8d7 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fd4:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <ADC1_2_IRQHandler+0x24>)
 8000fd6:	f000 fa85 	bl	80014e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
  ADCReading = HAL_ADC_GetValue(&hadc1);
 8000fda:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <ADC1_2_IRQHandler+0x24>)
 8000fdc:	f000 fa76 	bl	80014cc <HAL_ADC_GetValue>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff f968 	bl	80002b8 <__aeabi_ui2f>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4a03      	ldr	r2, [pc, #12]	; (8000ff8 <ADC1_2_IRQHandler+0x28>)
 8000fec:	6013      	str	r3, [r2, #0]
  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000008c 	.word	0x2000008c
 8000ff8:	20000104 	.word	0x20000104

08000ffc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001000:	4806      	ldr	r0, [pc, #24]	; (800101c <TIM2_IRQHandler+0x20>)
 8001002:	f001 fce1 	bl	80029c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001006:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <TIM2_IRQHandler+0x24>)
 800100c:	f000 ff82 	bl	8001f14 <HAL_GPIO_TogglePin>
  HAL_ADC_Start_IT(&hadc1);
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <TIM2_IRQHandler+0x28>)
 8001012:	f000 f9a5 	bl	8001360 <HAL_ADC_Start_IT>
  /* USER CODE END TIM2_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200000bc 	.word	0x200000bc
 8001020:	40011000 	.word	0x40011000
 8001024:	2000008c 	.word	0x2000008c

08001028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001030:	4a14      	ldr	r2, [pc, #80]	; (8001084 <_sbrk+0x5c>)
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <_sbrk+0x60>)
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <_sbrk+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <_sbrk+0x64>)
 8001046:	4a12      	ldr	r2, [pc, #72]	; (8001090 <_sbrk+0x68>)
 8001048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	429a      	cmp	r2, r3
 8001056:	d207      	bcs.n	8001068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001058:	f002 f81a 	bl	8003090 <__errno>
 800105c:	4603      	mov	r3, r0
 800105e:	220c      	movs	r2, #12
 8001060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	e009      	b.n	800107c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	4a05      	ldr	r2, [pc, #20]	; (800108c <_sbrk+0x64>)
 8001078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107a:	68fb      	ldr	r3, [r7, #12]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20005000 	.word	0x20005000
 8001088:	00000400 	.word	0x00000400
 800108c:	20000108 	.word	0x20000108
 8001090:	20000120 	.word	0x20000120

08001094 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010a2:	490d      	ldr	r1, [pc, #52]	; (80010d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b8:	4c0a      	ldr	r4, [pc, #40]	; (80010e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010c6:	f7ff ffe5 	bl	8001094 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ca:	f001 ffe7 	bl	800309c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ce:	f7ff fd29 	bl	8000b24 <main>
  bx lr
 80010d2:	4770      	bx	lr
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010dc:	08003a90 	.word	0x08003a90
  ldr r2, =_sbss
 80010e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010e4:	20000120 	.word	0x20000120

080010e8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <CAN1_RX1_IRQHandler>
	...

080010ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_Init+0x28>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_Init+0x28>)
 80010f6:	f043 0310 	orr.w	r3, r3, #16
 80010fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 fd2b 	bl	8001b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001102:	2000      	movs	r0, #0
 8001104:	f000 f808 	bl	8001118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001108:	f7ff fea0 	bl	8000e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40022000 	.word	0x40022000

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x54>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x58>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fd43 	bl	8001bc2 <HAL_SYSTICK_Config>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00e      	b.n	8001164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b0f      	cmp	r3, #15
 800114a:	d80a      	bhi.n	8001162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114c:	2200      	movs	r2, #0
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f000 fd0b 	bl	8001b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <HAL_InitTick+0x5c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000000 	.word	0x20000000
 8001170:	20000008 	.word	0x20000008
 8001174:	20000004 	.word	0x20000004

08001178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <HAL_IncTick+0x1c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_IncTick+0x20>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a03      	ldr	r2, [pc, #12]	; (8001198 <HAL_IncTick+0x20>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	20000008 	.word	0x20000008
 8001198:	2000010c 	.word	0x2000010c

0800119c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b02      	ldr	r3, [pc, #8]	; (80011ac <HAL_GetTick+0x10>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	2000010c 	.word	0x2000010c

080011b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e0be      	b.n	8001350 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d109      	bne.n	80011f4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fe5e 	bl	8000eb0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 fb99 	bl	800192c <ADC_ConversionStop_Disable>
 80011fa:	4603      	mov	r3, r0
 80011fc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	2b00      	cmp	r3, #0
 8001208:	f040 8099 	bne.w	800133e <HAL_ADC_Init+0x18e>
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	2b00      	cmp	r3, #0
 8001210:	f040 8095 	bne.w	800133e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001218:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800121c:	f023 0302 	bic.w	r3, r3, #2
 8001220:	f043 0202 	orr.w	r2, r3, #2
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001230:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7b1b      	ldrb	r3, [r3, #12]
 8001236:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001238:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	4313      	orrs	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001248:	d003      	beq.n	8001252 <HAL_ADC_Init+0xa2>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d102      	bne.n	8001258 <HAL_ADC_Init+0xa8>
 8001252:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001256:	e000      	b.n	800125a <HAL_ADC_Init+0xaa>
 8001258:	2300      	movs	r3, #0
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7d1b      	ldrb	r3, [r3, #20]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d119      	bne.n	800129c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	7b1b      	ldrb	r3, [r3, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d109      	bne.n	8001284 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	3b01      	subs	r3, #1
 8001276:	035a      	lsls	r2, r3, #13
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	e00b      	b.n	800129c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001288:	f043 0220 	orr.w	r2, r3, #32
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001294:	f043 0201 	orr.w	r2, r3, #1
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	4b28      	ldr	r3, [pc, #160]	; (8001358 <HAL_ADC_Init+0x1a8>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	430b      	orrs	r3, r1
 80012c2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012cc:	d003      	beq.n	80012d6 <HAL_ADC_Init+0x126>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d104      	bne.n	80012e0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	3b01      	subs	r3, #1
 80012dc:	051b      	lsls	r3, r3, #20
 80012de:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <HAL_ADC_Init+0x1ac>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	429a      	cmp	r2, r3
 8001302:	d10b      	bne.n	800131c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130e:	f023 0303 	bic.w	r3, r3, #3
 8001312:	f043 0201 	orr.w	r2, r3, #1
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800131a:	e018      	b.n	800134e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001320:	f023 0312 	bic.w	r3, r3, #18
 8001324:	f043 0210 	orr.w	r2, r3, #16
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001330:	f043 0201 	orr.w	r2, r3, #1
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800133c:	e007      	b.n	800134e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001342:	f043 0210 	orr.w	r2, r3, #16
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800134e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	ffe1f7fd 	.word	0xffe1f7fd
 800135c:	ff1f0efe 	.word	0xff1f0efe

08001360 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001372:	2b01      	cmp	r3, #1
 8001374:	d101      	bne.n	800137a <HAL_ADC_Start_IT+0x1a>
 8001376:	2302      	movs	r3, #2
 8001378:	e0a0      	b.n	80014bc <HAL_ADC_Start_IT+0x15c>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 fa78 	bl	8001878 <ADC_Enable>
 8001388:	4603      	mov	r3, r0
 800138a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	2b00      	cmp	r3, #0
 8001390:	f040 808f 	bne.w	80014b2 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001398:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800139c:	f023 0301 	bic.w	r3, r3, #1
 80013a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a45      	ldr	r2, [pc, #276]	; (80014c4 <HAL_ADC_Start_IT+0x164>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d105      	bne.n	80013be <HAL_ADC_Start_IT+0x5e>
 80013b2:	4b45      	ldr	r3, [pc, #276]	; (80014c8 <HAL_ADC_Start_IT+0x168>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d115      	bne.n	80013ea <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d026      	beq.n	8001426 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013e8:	e01d      	b.n	8001426 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a33      	ldr	r2, [pc, #204]	; (80014c8 <HAL_ADC_Start_IT+0x168>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d004      	beq.n	800140a <HAL_ADC_Start_IT+0xaa>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a2f      	ldr	r2, [pc, #188]	; (80014c4 <HAL_ADC_Start_IT+0x164>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d10d      	bne.n	8001426 <HAL_ADC_Start_IT+0xc6>
 800140a:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <HAL_ADC_Start_IT+0x168>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001412:	2b00      	cmp	r3, #0
 8001414:	d007      	beq.n	8001426 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800141e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d006      	beq.n	8001440 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001436:	f023 0206 	bic.w	r2, r3, #6
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	62da      	str	r2, [r3, #44]	; 0x2c
 800143e:	e002      	b.n	8001446 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f06f 0202 	mvn.w	r2, #2
 8001456:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0220 	orr.w	r2, r2, #32
 8001466:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001472:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001476:	d113      	bne.n	80014a0 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800147c:	4a11      	ldr	r2, [pc, #68]	; (80014c4 <HAL_ADC_Start_IT+0x164>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d105      	bne.n	800148e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_ADC_Start_IT+0x168>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800148a:	2b00      	cmp	r3, #0
 800148c:	d108      	bne.n	80014a0 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	e00c      	b.n	80014ba <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	e003      	b.n	80014ba <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40012800 	.word	0x40012800
 80014c8:	40012400 	.word	0x40012400

080014cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	f003 0320 	and.w	r3, r3, #32
 8001502:	2b00      	cmp	r3, #0
 8001504:	d03e      	beq.n	8001584 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d039      	beq.n	8001584 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001514:	f003 0310 	and.w	r3, r3, #16
 8001518:	2b00      	cmp	r3, #0
 800151a:	d105      	bne.n	8001528 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001520:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001532:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001536:	d11d      	bne.n	8001574 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800153c:	2b00      	cmp	r3, #0
 800153e:	d119      	bne.n	8001574 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0220 	bic.w	r2, r2, #32
 800154e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001554:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d105      	bne.n	8001574 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156c:	f043 0201 	orr.w	r2, r3, #1
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 f874 	bl	8001662 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f06f 0212 	mvn.w	r2, #18
 8001582:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158a:	2b00      	cmp	r3, #0
 800158c:	d04d      	beq.n	800162a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	d048      	beq.n	800162a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159c:	f003 0310 	and.w	r3, r3, #16
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d105      	bne.n	80015b0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80015ba:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80015be:	d012      	beq.n	80015e6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d125      	bne.n	800161a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80015d8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015dc:	d11d      	bne.n	800161a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d119      	bne.n	800161a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015f4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160a:	2b00      	cmp	r3, #0
 800160c:	d105      	bne.n	800161a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001612:	f043 0201 	orr.w	r2, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f9c7 	bl	80019ae <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f06f 020c 	mvn.w	r2, #12
 8001628:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001630:	2b00      	cmp	r3, #0
 8001632:	d012      	beq.n	800165a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00d      	beq.n	800165a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001642:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f812 	bl	8001674 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f06f 0201 	mvn.w	r2, #1
 8001658:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr
	...

08001688 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x20>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e0dc      	b.n	8001862 <HAL_ADC_ConfigChannel+0x1da>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b06      	cmp	r3, #6
 80016b6:	d81c      	bhi.n	80016f2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	3b05      	subs	r3, #5
 80016ca:	221f      	movs	r2, #31
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	4019      	ands	r1, r3
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	6818      	ldr	r0, [r3, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	3b05      	subs	r3, #5
 80016e4:	fa00 f203 	lsl.w	r2, r0, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	635a      	str	r2, [r3, #52]	; 0x34
 80016f0:	e03c      	b.n	800176c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b0c      	cmp	r3, #12
 80016f8:	d81c      	bhi.n	8001734 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	3b23      	subs	r3, #35	; 0x23
 800170c:	221f      	movs	r2, #31
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	4019      	ands	r1, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	3b23      	subs	r3, #35	; 0x23
 8001726:	fa00 f203 	lsl.w	r2, r0, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	631a      	str	r2, [r3, #48]	; 0x30
 8001732:	e01b      	b.n	800176c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	3b41      	subs	r3, #65	; 0x41
 8001746:	221f      	movs	r2, #31
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	4019      	ands	r1, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	3b41      	subs	r3, #65	; 0x41
 8001760:	fa00 f203 	lsl.w	r2, r0, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b09      	cmp	r3, #9
 8001772:	d91c      	bls.n	80017ae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68d9      	ldr	r1, [r3, #12]
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	4613      	mov	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4413      	add	r3, r2
 8001784:	3b1e      	subs	r3, #30
 8001786:	2207      	movs	r2, #7
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	4019      	ands	r1, r3
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	6898      	ldr	r0, [r3, #8]
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	3b1e      	subs	r3, #30
 80017a0:	fa00 f203 	lsl.w	r2, r0, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	e019      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6919      	ldr	r1, [r3, #16]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	2207      	movs	r2, #7
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	4019      	ands	r1, r3
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	6898      	ldr	r0, [r3, #8]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4613      	mov	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	fa00 f203 	lsl.w	r2, r0, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b10      	cmp	r3, #16
 80017e8:	d003      	beq.n	80017f2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017ee:	2b11      	cmp	r3, #17
 80017f0:	d132      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1d      	ldr	r2, [pc, #116]	; (800186c <HAL_ADC_ConfigChannel+0x1e4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d125      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d126      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001818:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b10      	cmp	r3, #16
 8001820:	d11a      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <HAL_ADC_ConfigChannel+0x1e8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a13      	ldr	r2, [pc, #76]	; (8001874 <HAL_ADC_ConfigChannel+0x1ec>)
 8001828:	fba2 2303 	umull	r2, r3, r2, r3
 800182c:	0c9a      	lsrs	r2, r3, #18
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001838:	e002      	b.n	8001840 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	3b01      	subs	r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f9      	bne.n	800183a <HAL_ADC_ConfigChannel+0x1b2>
 8001846:	e007      	b.n	8001858 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	f043 0220 	orr.w	r2, r3, #32
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001860:	7bfb      	ldrb	r3, [r7, #15]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	40012400 	.word	0x40012400
 8001870:	20000000 	.word	0x20000000
 8001874:	431bde83 	.word	0x431bde83

08001878 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b01      	cmp	r3, #1
 8001894:	d040      	beq.n	8001918 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f042 0201 	orr.w	r2, r2, #1
 80018a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018a6:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <ADC_Enable+0xac>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a1f      	ldr	r2, [pc, #124]	; (8001928 <ADC_Enable+0xb0>)
 80018ac:	fba2 2303 	umull	r2, r3, r2, r3
 80018b0:	0c9b      	lsrs	r3, r3, #18
 80018b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018b4:	e002      	b.n	80018bc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f9      	bne.n	80018b6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018c2:	f7ff fc6b 	bl	800119c <HAL_GetTick>
 80018c6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018c8:	e01f      	b.n	800190a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018ca:	f7ff fc67 	bl	800119c <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d918      	bls.n	800190a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d011      	beq.n	800190a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	f043 0210 	orr.w	r2, r3, #16
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	f043 0201 	orr.w	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e007      	b.n	800191a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b01      	cmp	r3, #1
 8001916:	d1d8      	bne.n	80018ca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000000 	.word	0x20000000
 8001928:	431bde83 	.word	0x431bde83

0800192c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b01      	cmp	r3, #1
 8001944:	d12e      	bne.n	80019a4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0201 	bic.w	r2, r2, #1
 8001954:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001956:	f7ff fc21 	bl	800119c <HAL_GetTick>
 800195a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800195c:	e01b      	b.n	8001996 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800195e:	f7ff fc1d 	bl	800119c <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d914      	bls.n	8001996 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b01      	cmp	r3, #1
 8001978:	d10d      	bne.n	8001996 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197e:	f043 0210 	orr.w	r2, r3, #16
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	f043 0201 	orr.w	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e007      	b.n	80019a6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d0dc      	beq.n	800195e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f2:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60d3      	str	r3, [r2, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <__NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db0b      	blt.n	8001a4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	4906      	ldr	r1, [pc, #24]	; (8001a58 <__NVIC_EnableIRQ+0x34>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	2001      	movs	r0, #1
 8001a46:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr
 8001a58:	e000e100 	.word	0xe000e100

08001a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	6039      	str	r1, [r7, #0]
 8001a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	db0a      	blt.n	8001a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	490c      	ldr	r1, [pc, #48]	; (8001aa8 <__NVIC_SetPriority+0x4c>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	0112      	lsls	r2, r2, #4
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	440b      	add	r3, r1
 8001a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a84:	e00a      	b.n	8001a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4908      	ldr	r1, [pc, #32]	; (8001aac <__NVIC_SetPriority+0x50>)
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	3b04      	subs	r3, #4
 8001a94:	0112      	lsls	r2, r2, #4
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	440b      	add	r3, r1
 8001a9a:	761a      	strb	r2, [r3, #24]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000e100 	.word	0xe000e100
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f1c3 0307 	rsb	r3, r3, #7
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	bf28      	it	cs
 8001ace:	2304      	movcs	r3, #4
 8001ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d902      	bls.n	8001ae0 <NVIC_EncodePriority+0x30>
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3b03      	subs	r3, #3
 8001ade:	e000      	b.n	8001ae2 <NVIC_EncodePriority+0x32>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	401a      	ands	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	43d9      	mvns	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	4313      	orrs	r3, r2
         );
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3724      	adds	r7, #36	; 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b24:	d301      	bcc.n	8001b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00f      	b.n	8001b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <SysTick_Config+0x40>)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b32:	210f      	movs	r1, #15
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295
 8001b38:	f7ff ff90 	bl	8001a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <SysTick_Config+0x40>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b42:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <SysTick_Config+0x40>)
 8001b44:	2207      	movs	r2, #7
 8001b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	e000e010 	.word	0xe000e010

08001b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff2d 	bl	80019c0 <__NVIC_SetPriorityGrouping>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b80:	f7ff ff42 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	6978      	ldr	r0, [r7, #20]
 8001b8c:	f7ff ff90 	bl	8001ab0 <NVIC_EncodePriority>
 8001b90:	4602      	mov	r2, r0
 8001b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff5f 	bl	8001a5c <__NVIC_SetPriority>
}
 8001b9e:	bf00      	nop
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff35 	bl	8001a24 <__NVIC_EnableIRQ>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ffa2 	bl	8001b14 <SysTick_Config>
 8001bd0:	4603      	mov	r3, r0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b08b      	sub	sp, #44	; 0x2c
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bee:	e169      	b.n	8001ec4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	f040 8158 	bne.w	8001ebe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	4a9a      	ldr	r2, [pc, #616]	; (8001e7c <HAL_GPIO_Init+0x2a0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d05e      	beq.n	8001cd6 <HAL_GPIO_Init+0xfa>
 8001c18:	4a98      	ldr	r2, [pc, #608]	; (8001e7c <HAL_GPIO_Init+0x2a0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d875      	bhi.n	8001d0a <HAL_GPIO_Init+0x12e>
 8001c1e:	4a98      	ldr	r2, [pc, #608]	; (8001e80 <HAL_GPIO_Init+0x2a4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d058      	beq.n	8001cd6 <HAL_GPIO_Init+0xfa>
 8001c24:	4a96      	ldr	r2, [pc, #600]	; (8001e80 <HAL_GPIO_Init+0x2a4>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d86f      	bhi.n	8001d0a <HAL_GPIO_Init+0x12e>
 8001c2a:	4a96      	ldr	r2, [pc, #600]	; (8001e84 <HAL_GPIO_Init+0x2a8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d052      	beq.n	8001cd6 <HAL_GPIO_Init+0xfa>
 8001c30:	4a94      	ldr	r2, [pc, #592]	; (8001e84 <HAL_GPIO_Init+0x2a8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d869      	bhi.n	8001d0a <HAL_GPIO_Init+0x12e>
 8001c36:	4a94      	ldr	r2, [pc, #592]	; (8001e88 <HAL_GPIO_Init+0x2ac>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d04c      	beq.n	8001cd6 <HAL_GPIO_Init+0xfa>
 8001c3c:	4a92      	ldr	r2, [pc, #584]	; (8001e88 <HAL_GPIO_Init+0x2ac>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d863      	bhi.n	8001d0a <HAL_GPIO_Init+0x12e>
 8001c42:	4a92      	ldr	r2, [pc, #584]	; (8001e8c <HAL_GPIO_Init+0x2b0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d046      	beq.n	8001cd6 <HAL_GPIO_Init+0xfa>
 8001c48:	4a90      	ldr	r2, [pc, #576]	; (8001e8c <HAL_GPIO_Init+0x2b0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d85d      	bhi.n	8001d0a <HAL_GPIO_Init+0x12e>
 8001c4e:	2b12      	cmp	r3, #18
 8001c50:	d82a      	bhi.n	8001ca8 <HAL_GPIO_Init+0xcc>
 8001c52:	2b12      	cmp	r3, #18
 8001c54:	d859      	bhi.n	8001d0a <HAL_GPIO_Init+0x12e>
 8001c56:	a201      	add	r2, pc, #4	; (adr r2, 8001c5c <HAL_GPIO_Init+0x80>)
 8001c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5c:	08001cd7 	.word	0x08001cd7
 8001c60:	08001cb1 	.word	0x08001cb1
 8001c64:	08001cc3 	.word	0x08001cc3
 8001c68:	08001d05 	.word	0x08001d05
 8001c6c:	08001d0b 	.word	0x08001d0b
 8001c70:	08001d0b 	.word	0x08001d0b
 8001c74:	08001d0b 	.word	0x08001d0b
 8001c78:	08001d0b 	.word	0x08001d0b
 8001c7c:	08001d0b 	.word	0x08001d0b
 8001c80:	08001d0b 	.word	0x08001d0b
 8001c84:	08001d0b 	.word	0x08001d0b
 8001c88:	08001d0b 	.word	0x08001d0b
 8001c8c:	08001d0b 	.word	0x08001d0b
 8001c90:	08001d0b 	.word	0x08001d0b
 8001c94:	08001d0b 	.word	0x08001d0b
 8001c98:	08001d0b 	.word	0x08001d0b
 8001c9c:	08001d0b 	.word	0x08001d0b
 8001ca0:	08001cb9 	.word	0x08001cb9
 8001ca4:	08001ccd 	.word	0x08001ccd
 8001ca8:	4a79      	ldr	r2, [pc, #484]	; (8001e90 <HAL_GPIO_Init+0x2b4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d013      	beq.n	8001cd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cae:	e02c      	b.n	8001d0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	623b      	str	r3, [r7, #32]
          break;
 8001cb6:	e029      	b.n	8001d0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	623b      	str	r3, [r7, #32]
          break;
 8001cc0:	e024      	b.n	8001d0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	3308      	adds	r3, #8
 8001cc8:	623b      	str	r3, [r7, #32]
          break;
 8001cca:	e01f      	b.n	8001d0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	330c      	adds	r3, #12
 8001cd2:	623b      	str	r3, [r7, #32]
          break;
 8001cd4:	e01a      	b.n	8001d0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d102      	bne.n	8001ce4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cde:	2304      	movs	r3, #4
 8001ce0:	623b      	str	r3, [r7, #32]
          break;
 8001ce2:	e013      	b.n	8001d0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d105      	bne.n	8001cf8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cec:	2308      	movs	r3, #8
 8001cee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69fa      	ldr	r2, [r7, #28]
 8001cf4:	611a      	str	r2, [r3, #16]
          break;
 8001cf6:	e009      	b.n	8001d0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cf8:	2308      	movs	r3, #8
 8001cfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	615a      	str	r2, [r3, #20]
          break;
 8001d02:	e003      	b.n	8001d0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d04:	2300      	movs	r3, #0
 8001d06:	623b      	str	r3, [r7, #32]
          break;
 8001d08:	e000      	b.n	8001d0c <HAL_GPIO_Init+0x130>
          break;
 8001d0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	2bff      	cmp	r3, #255	; 0xff
 8001d10:	d801      	bhi.n	8001d16 <HAL_GPIO_Init+0x13a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	e001      	b.n	8001d1a <HAL_GPIO_Init+0x13e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2bff      	cmp	r3, #255	; 0xff
 8001d20:	d802      	bhi.n	8001d28 <HAL_GPIO_Init+0x14c>
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	e002      	b.n	8001d2e <HAL_GPIO_Init+0x152>
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	3b08      	subs	r3, #8
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	210f      	movs	r1, #15
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	401a      	ands	r2, r3
 8001d40:	6a39      	ldr	r1, [r7, #32]
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 80b1 	beq.w	8001ebe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d5c:	4b4d      	ldr	r3, [pc, #308]	; (8001e94 <HAL_GPIO_Init+0x2b8>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	4a4c      	ldr	r2, [pc, #304]	; (8001e94 <HAL_GPIO_Init+0x2b8>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6193      	str	r3, [r2, #24]
 8001d68:	4b4a      	ldr	r3, [pc, #296]	; (8001e94 <HAL_GPIO_Init+0x2b8>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d74:	4a48      	ldr	r2, [pc, #288]	; (8001e98 <HAL_GPIO_Init+0x2bc>)
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	089b      	lsrs	r3, r3, #2
 8001d7a:	3302      	adds	r3, #2
 8001d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4013      	ands	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a40      	ldr	r2, [pc, #256]	; (8001e9c <HAL_GPIO_Init+0x2c0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d013      	beq.n	8001dc8 <HAL_GPIO_Init+0x1ec>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a3f      	ldr	r2, [pc, #252]	; (8001ea0 <HAL_GPIO_Init+0x2c4>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00d      	beq.n	8001dc4 <HAL_GPIO_Init+0x1e8>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a3e      	ldr	r2, [pc, #248]	; (8001ea4 <HAL_GPIO_Init+0x2c8>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d007      	beq.n	8001dc0 <HAL_GPIO_Init+0x1e4>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a3d      	ldr	r2, [pc, #244]	; (8001ea8 <HAL_GPIO_Init+0x2cc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d101      	bne.n	8001dbc <HAL_GPIO_Init+0x1e0>
 8001db8:	2303      	movs	r3, #3
 8001dba:	e006      	b.n	8001dca <HAL_GPIO_Init+0x1ee>
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	e004      	b.n	8001dca <HAL_GPIO_Init+0x1ee>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e002      	b.n	8001dca <HAL_GPIO_Init+0x1ee>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <HAL_GPIO_Init+0x1ee>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dcc:	f002 0203 	and.w	r2, r2, #3
 8001dd0:	0092      	lsls	r2, r2, #2
 8001dd2:	4093      	lsls	r3, r2
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dda:	492f      	ldr	r1, [pc, #188]	; (8001e98 <HAL_GPIO_Init+0x2bc>)
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	089b      	lsrs	r3, r3, #2
 8001de0:	3302      	adds	r3, #2
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d006      	beq.n	8001e02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001df4:	4b2d      	ldr	r3, [pc, #180]	; (8001eac <HAL_GPIO_Init+0x2d0>)
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	492c      	ldr	r1, [pc, #176]	; (8001eac <HAL_GPIO_Init+0x2d0>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	608b      	str	r3, [r1, #8]
 8001e00:	e006      	b.n	8001e10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e02:	4b2a      	ldr	r3, [pc, #168]	; (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	4928      	ldr	r1, [pc, #160]	; (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d006      	beq.n	8001e2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e1c:	4b23      	ldr	r3, [pc, #140]	; (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	4922      	ldr	r1, [pc, #136]	; (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	60cb      	str	r3, [r1, #12]
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e2a:	4b20      	ldr	r3, [pc, #128]	; (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	491e      	ldr	r1, [pc, #120]	; (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d006      	beq.n	8001e52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	4918      	ldr	r1, [pc, #96]	; (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]
 8001e50:	e006      	b.n	8001e60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e52:	4b16      	ldr	r3, [pc, #88]	; (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	4914      	ldr	r1, [pc, #80]	; (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d021      	beq.n	8001eb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	490e      	ldr	r1, [pc, #56]	; (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	600b      	str	r3, [r1, #0]
 8001e78:	e021      	b.n	8001ebe <HAL_GPIO_Init+0x2e2>
 8001e7a:	bf00      	nop
 8001e7c:	10320000 	.word	0x10320000
 8001e80:	10310000 	.word	0x10310000
 8001e84:	10220000 	.word	0x10220000
 8001e88:	10210000 	.word	0x10210000
 8001e8c:	10120000 	.word	0x10120000
 8001e90:	10110000 	.word	0x10110000
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40010000 	.word	0x40010000
 8001e9c:	40010800 	.word	0x40010800
 8001ea0:	40010c00 	.word	0x40010c00
 8001ea4:	40011000 	.word	0x40011000
 8001ea8:	40011400 	.word	0x40011400
 8001eac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_GPIO_Init+0x304>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	4909      	ldr	r1, [pc, #36]	; (8001ee0 <HAL_GPIO_Init+0x304>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f47f ae8e 	bne.w	8001bf0 <HAL_GPIO_Init+0x14>
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
 8001ed8:	372c      	adds	r7, #44	; 0x2c
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	40010400 	.word	0x40010400

08001ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	807b      	strh	r3, [r7, #2]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ef4:	787b      	ldrb	r3, [r7, #1]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001efa:	887a      	ldrh	r2, [r7, #2]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f00:	e003      	b.n	8001f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f02:	887b      	ldrh	r3, [r7, #2]
 8001f04:	041a      	lsls	r2, r3, #16
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	611a      	str	r2, [r3, #16]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f26:	887a      	ldrh	r2, [r7, #2]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	041a      	lsls	r2, r3, #16
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	43d9      	mvns	r1, r3
 8001f32:	887b      	ldrh	r3, [r7, #2]
 8001f34:	400b      	ands	r3, r1
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	611a      	str	r2, [r3, #16]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
	...

08001f48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e272      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 8087 	beq.w	8002076 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f68:	4b92      	ldr	r3, [pc, #584]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d00c      	beq.n	8001f8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f74:	4b8f      	ldr	r3, [pc, #572]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 030c 	and.w	r3, r3, #12
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d112      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x5e>
 8001f80:	4b8c      	ldr	r3, [pc, #560]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f8c:	d10b      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8e:	4b89      	ldr	r3, [pc, #548]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d06c      	beq.n	8002074 <HAL_RCC_OscConfig+0x12c>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d168      	bne.n	8002074 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e24c      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fae:	d106      	bne.n	8001fbe <HAL_RCC_OscConfig+0x76>
 8001fb0:	4b80      	ldr	r3, [pc, #512]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a7f      	ldr	r2, [pc, #508]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	e02e      	b.n	800201c <HAL_RCC_OscConfig+0xd4>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x98>
 8001fc6:	4b7b      	ldr	r3, [pc, #492]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a7a      	ldr	r2, [pc, #488]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	4b78      	ldr	r3, [pc, #480]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a77      	ldr	r2, [pc, #476]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	e01d      	b.n	800201c <HAL_RCC_OscConfig+0xd4>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCC_OscConfig+0xbc>
 8001fea:	4b72      	ldr	r3, [pc, #456]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a71      	ldr	r2, [pc, #452]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b6f      	ldr	r3, [pc, #444]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a6e      	ldr	r2, [pc, #440]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e00b      	b.n	800201c <HAL_RCC_OscConfig+0xd4>
 8002004:	4b6b      	ldr	r3, [pc, #428]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a6a      	ldr	r2, [pc, #424]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 800200a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	4b68      	ldr	r3, [pc, #416]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a67      	ldr	r2, [pc, #412]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800201a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d013      	beq.n	800204c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002024:	f7ff f8ba 	bl	800119c <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800202c:	f7ff f8b6 	bl	800119c <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b64      	cmp	r3, #100	; 0x64
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e200      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203e:	4b5d      	ldr	r3, [pc, #372]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0xe4>
 800204a:	e014      	b.n	8002076 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff f8a6 	bl	800119c <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002054:	f7ff f8a2 	bl	800119c <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b64      	cmp	r3, #100	; 0x64
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e1ec      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002066:	4b53      	ldr	r3, [pc, #332]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x10c>
 8002072:	e000      	b.n	8002076 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d063      	beq.n	800214a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002082:	4b4c      	ldr	r3, [pc, #304]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00b      	beq.n	80020a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800208e:	4b49      	ldr	r3, [pc, #292]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b08      	cmp	r3, #8
 8002098:	d11c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x18c>
 800209a:	4b46      	ldr	r3, [pc, #280]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d116      	bne.n	80020d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a6:	4b43      	ldr	r3, [pc, #268]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <HAL_RCC_OscConfig+0x176>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d001      	beq.n	80020be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e1c0      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020be:	4b3d      	ldr	r3, [pc, #244]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4939      	ldr	r1, [pc, #228]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d2:	e03a      	b.n	800214a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d020      	beq.n	800211e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020dc:	4b36      	ldr	r3, [pc, #216]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 80020de:	2201      	movs	r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7ff f85b 	bl	800119c <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ea:	f7ff f857 	bl	800119c <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e1a1      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fc:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002108:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4927      	ldr	r1, [pc, #156]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002118:	4313      	orrs	r3, r2
 800211a:	600b      	str	r3, [r1, #0]
 800211c:	e015      	b.n	800214a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800211e:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7ff f83a 	bl	800119c <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212c:	f7ff f836 	bl	800119c <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e180      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213e:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d03a      	beq.n	80021cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d019      	beq.n	8002192 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800215e:	4b17      	ldr	r3, [pc, #92]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002160:	2201      	movs	r2, #1
 8002162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002164:	f7ff f81a 	bl	800119c <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216c:	f7ff f816 	bl	800119c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e160      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217e:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800218a:	2001      	movs	r0, #1
 800218c:	f000 faa6 	bl	80026dc <RCC_Delay>
 8002190:	e01c      	b.n	80021cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002198:	f7ff f800 	bl	800119c <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219e:	e00f      	b.n	80021c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a0:	f7fe fffc 	bl	800119c <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d908      	bls.n	80021c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e146      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	42420000 	.word	0x42420000
 80021bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c0:	4b92      	ldr	r3, [pc, #584]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e9      	bne.n	80021a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80a6 	beq.w	8002326 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021de:	4b8b      	ldr	r3, [pc, #556]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10d      	bne.n	8002206 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ea:	4b88      	ldr	r3, [pc, #544]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	4a87      	ldr	r2, [pc, #540]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f4:	61d3      	str	r3, [r2, #28]
 80021f6:	4b85      	ldr	r3, [pc, #532]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002202:	2301      	movs	r3, #1
 8002204:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002206:	4b82      	ldr	r3, [pc, #520]	; (8002410 <HAL_RCC_OscConfig+0x4c8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220e:	2b00      	cmp	r3, #0
 8002210:	d118      	bne.n	8002244 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002212:	4b7f      	ldr	r3, [pc, #508]	; (8002410 <HAL_RCC_OscConfig+0x4c8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a7e      	ldr	r2, [pc, #504]	; (8002410 <HAL_RCC_OscConfig+0x4c8>)
 8002218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800221e:	f7fe ffbd 	bl	800119c <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002226:	f7fe ffb9 	bl	800119c <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b64      	cmp	r3, #100	; 0x64
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e103      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002238:	4b75      	ldr	r3, [pc, #468]	; (8002410 <HAL_RCC_OscConfig+0x4c8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d106      	bne.n	800225a <HAL_RCC_OscConfig+0x312>
 800224c:	4b6f      	ldr	r3, [pc, #444]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	4a6e      	ldr	r2, [pc, #440]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6213      	str	r3, [r2, #32]
 8002258:	e02d      	b.n	80022b6 <HAL_RCC_OscConfig+0x36e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0x334>
 8002262:	4b6a      	ldr	r3, [pc, #424]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	4a69      	ldr	r2, [pc, #420]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002268:	f023 0301 	bic.w	r3, r3, #1
 800226c:	6213      	str	r3, [r2, #32]
 800226e:	4b67      	ldr	r3, [pc, #412]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	4a66      	ldr	r2, [pc, #408]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002274:	f023 0304 	bic.w	r3, r3, #4
 8002278:	6213      	str	r3, [r2, #32]
 800227a:	e01c      	b.n	80022b6 <HAL_RCC_OscConfig+0x36e>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2b05      	cmp	r3, #5
 8002282:	d10c      	bne.n	800229e <HAL_RCC_OscConfig+0x356>
 8002284:	4b61      	ldr	r3, [pc, #388]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4a60      	ldr	r2, [pc, #384]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 800228a:	f043 0304 	orr.w	r3, r3, #4
 800228e:	6213      	str	r3, [r2, #32]
 8002290:	4b5e      	ldr	r3, [pc, #376]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	4a5d      	ldr	r2, [pc, #372]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6213      	str	r3, [r2, #32]
 800229c:	e00b      	b.n	80022b6 <HAL_RCC_OscConfig+0x36e>
 800229e:	4b5b      	ldr	r3, [pc, #364]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	4a5a      	ldr	r2, [pc, #360]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	f023 0301 	bic.w	r3, r3, #1
 80022a8:	6213      	str	r3, [r2, #32]
 80022aa:	4b58      	ldr	r3, [pc, #352]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	4a57      	ldr	r2, [pc, #348]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	f023 0304 	bic.w	r3, r3, #4
 80022b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d015      	beq.n	80022ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022be:	f7fe ff6d 	bl	800119c <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c4:	e00a      	b.n	80022dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c6:	f7fe ff69 	bl	800119c <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e0b1      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022dc:	4b4b      	ldr	r3, [pc, #300]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0ee      	beq.n	80022c6 <HAL_RCC_OscConfig+0x37e>
 80022e8:	e014      	b.n	8002314 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ea:	f7fe ff57 	bl	800119c <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7fe ff53 	bl	800119c <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e09b      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002308:	4b40      	ldr	r3, [pc, #256]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1ee      	bne.n	80022f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002314:	7dfb      	ldrb	r3, [r7, #23]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d105      	bne.n	8002326 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231a:	4b3c      	ldr	r3, [pc, #240]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	4a3b      	ldr	r2, [pc, #236]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002324:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8087 	beq.w	800243e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002330:	4b36      	ldr	r3, [pc, #216]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b08      	cmp	r3, #8
 800233a:	d061      	beq.n	8002400 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d146      	bne.n	80023d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002344:	4b33      	ldr	r3, [pc, #204]	; (8002414 <HAL_RCC_OscConfig+0x4cc>)
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234a:	f7fe ff27 	bl	800119c <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002352:	f7fe ff23 	bl	800119c <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e06d      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002364:	4b29      	ldr	r3, [pc, #164]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f0      	bne.n	8002352 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002378:	d108      	bne.n	800238c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800237a:	4b24      	ldr	r3, [pc, #144]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	4921      	ldr	r1, [pc, #132]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800238c:	4b1f      	ldr	r3, [pc, #124]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a19      	ldr	r1, [r3, #32]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	430b      	orrs	r3, r1
 800239e:	491b      	ldr	r1, [pc, #108]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a4:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <HAL_RCC_OscConfig+0x4cc>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7fe fef7 	bl	800119c <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b2:	f7fe fef3 	bl	800119c <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e03d      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x46a>
 80023d0:	e035      	b.n	800243e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HAL_RCC_OscConfig+0x4cc>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7fe fee0 	bl	800119c <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e0:	f7fe fedc 	bl	800119c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e026      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x498>
 80023fe:	e01e      	b.n	800243e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d107      	bne.n	8002418 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e019      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
 800240c:	40021000 	.word	0x40021000
 8002410:	40007000 	.word	0x40007000
 8002414:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002418:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <HAL_RCC_OscConfig+0x500>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	429a      	cmp	r2, r3
 800242a:	d106      	bne.n	800243a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002436:	429a      	cmp	r2, r3
 8002438:	d001      	beq.n	800243e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40021000 	.word	0x40021000

0800244c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0d0      	b.n	8002602 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002460:	4b6a      	ldr	r3, [pc, #424]	; (800260c <HAL_RCC_ClockConfig+0x1c0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d910      	bls.n	8002490 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b67      	ldr	r3, [pc, #412]	; (800260c <HAL_RCC_ClockConfig+0x1c0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 0207 	bic.w	r2, r3, #7
 8002476:	4965      	ldr	r1, [pc, #404]	; (800260c <HAL_RCC_ClockConfig+0x1c0>)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b63      	ldr	r3, [pc, #396]	; (800260c <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0b8      	b.n	8002602 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d020      	beq.n	80024de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a8:	4b59      	ldr	r3, [pc, #356]	; (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a58      	ldr	r2, [pc, #352]	; (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c0:	4b53      	ldr	r3, [pc, #332]	; (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	4a52      	ldr	r2, [pc, #328]	; (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024cc:	4b50      	ldr	r3, [pc, #320]	; (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	494d      	ldr	r1, [pc, #308]	; (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d040      	beq.n	800256c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d107      	bne.n	8002502 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	4b47      	ldr	r3, [pc, #284]	; (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d115      	bne.n	800252a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e07f      	b.n	8002602 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d107      	bne.n	800251a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250a:	4b41      	ldr	r3, [pc, #260]	; (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d109      	bne.n	800252a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e073      	b.n	8002602 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251a:	4b3d      	ldr	r3, [pc, #244]	; (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e06b      	b.n	8002602 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800252a:	4b39      	ldr	r3, [pc, #228]	; (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f023 0203 	bic.w	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4936      	ldr	r1, [pc, #216]	; (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800253c:	f7fe fe2e 	bl	800119c <HAL_GetTick>
 8002540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002542:	e00a      	b.n	800255a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002544:	f7fe fe2a 	bl	800119c <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e053      	b.n	8002602 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255a:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 020c 	and.w	r2, r3, #12
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	429a      	cmp	r2, r3
 800256a:	d1eb      	bne.n	8002544 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800256c:	4b27      	ldr	r3, [pc, #156]	; (800260c <HAL_RCC_ClockConfig+0x1c0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d210      	bcs.n	800259c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b24      	ldr	r3, [pc, #144]	; (800260c <HAL_RCC_ClockConfig+0x1c0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 0207 	bic.w	r2, r3, #7
 8002582:	4922      	ldr	r1, [pc, #136]	; (800260c <HAL_RCC_ClockConfig+0x1c0>)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	4b20      	ldr	r3, [pc, #128]	; (800260c <HAL_RCC_ClockConfig+0x1c0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e032      	b.n	8002602 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a8:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4916      	ldr	r1, [pc, #88]	; (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d009      	beq.n	80025da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	490e      	ldr	r1, [pc, #56]	; (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025da:	f000 f821 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 80025de:	4602      	mov	r2, r0
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	490a      	ldr	r1, [pc, #40]	; (8002614 <HAL_RCC_ClockConfig+0x1c8>)
 80025ec:	5ccb      	ldrb	r3, [r1, r3]
 80025ee:	fa22 f303 	lsr.w	r3, r2, r3
 80025f2:	4a09      	ldr	r2, [pc, #36]	; (8002618 <HAL_RCC_ClockConfig+0x1cc>)
 80025f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <HAL_RCC_ClockConfig+0x1d0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fd8c 	bl	8001118 <HAL_InitTick>

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40022000 	.word	0x40022000
 8002610:	40021000 	.word	0x40021000
 8002614:	08003a30 	.word	0x08003a30
 8002618:	20000000 	.word	0x20000000
 800261c:	20000004 	.word	0x20000004

08002620 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002620:	b480      	push	{r7}
 8002622:	b087      	sub	sp, #28
 8002624:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800263a:	4b1e      	ldr	r3, [pc, #120]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b04      	cmp	r3, #4
 8002648:	d002      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0x30>
 800264a:	2b08      	cmp	r3, #8
 800264c:	d003      	beq.n	8002656 <HAL_RCC_GetSysClockFreq+0x36>
 800264e:	e027      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002650:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002652:	613b      	str	r3, [r7, #16]
      break;
 8002654:	e027      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	0c9b      	lsrs	r3, r3, #18
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	4a17      	ldr	r2, [pc, #92]	; (80026bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002660:	5cd3      	ldrb	r3, [r2, r3]
 8002662:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d010      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800266e:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	0c5b      	lsrs	r3, r3, #17
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	4a11      	ldr	r2, [pc, #68]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a0d      	ldr	r2, [pc, #52]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002682:	fb03 f202 	mul.w	r2, r3, r2
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	fbb2 f3f3 	udiv	r3, r2, r3
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	e004      	b.n	800269a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a0c      	ldr	r2, [pc, #48]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002694:	fb02 f303 	mul.w	r3, r2, r3
 8002698:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	613b      	str	r3, [r7, #16]
      break;
 800269e:	e002      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80026a2:	613b      	str	r3, [r7, #16]
      break;
 80026a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026a6:	693b      	ldr	r3, [r7, #16]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	371c      	adds	r7, #28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000
 80026b8:	007a1200 	.word	0x007a1200
 80026bc:	08003a40 	.word	0x08003a40
 80026c0:	08003a50 	.word	0x08003a50
 80026c4:	003d0900 	.word	0x003d0900

080026c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026cc:	4b02      	ldr	r3, [pc, #8]	; (80026d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	20000000 	.word	0x20000000

080026dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026e4:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <RCC_Delay+0x34>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <RCC_Delay+0x38>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	0a5b      	lsrs	r3, r3, #9
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	fb02 f303 	mul.w	r3, r2, r3
 80026f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026f8:	bf00      	nop
  }
  while (Delay --);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1e5a      	subs	r2, r3, #1
 80026fe:	60fa      	str	r2, [r7, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1f9      	bne.n	80026f8 <RCC_Delay+0x1c>
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr
 8002710:	20000000 	.word	0x20000000
 8002714:	10624dd3 	.word	0x10624dd3

08002718 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d07d      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002734:	2300      	movs	r3, #0
 8002736:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002738:	4b4f      	ldr	r3, [pc, #316]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10d      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002744:	4b4c      	ldr	r3, [pc, #304]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	4a4b      	ldr	r2, [pc, #300]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274e:	61d3      	str	r3, [r2, #28]
 8002750:	4b49      	ldr	r3, [pc, #292]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800275c:	2301      	movs	r3, #1
 800275e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	4b46      	ldr	r3, [pc, #280]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002768:	2b00      	cmp	r3, #0
 800276a:	d118      	bne.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800276c:	4b43      	ldr	r3, [pc, #268]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a42      	ldr	r2, [pc, #264]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002776:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002778:	f7fe fd10 	bl	800119c <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277e:	e008      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002780:	f7fe fd0c 	bl	800119c <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b64      	cmp	r3, #100	; 0x64
 800278c:	d901      	bls.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e06d      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002792:	4b3a      	ldr	r3, [pc, #232]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800279e:	4b36      	ldr	r3, [pc, #216]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d02e      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d027      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027bc:	4b2e      	ldr	r3, [pc, #184]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027c6:	4b2e      	ldr	r3, [pc, #184]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027cc:	4b2c      	ldr	r3, [pc, #176]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027d2:	4a29      	ldr	r2, [pc, #164]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d014      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e2:	f7fe fcdb 	bl	800119c <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e8:	e00a      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ea:	f7fe fcd7 	bl	800119c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d901      	bls.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e036      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002800:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0ee      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800280c:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4917      	ldr	r1, [pc, #92]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800281a:	4313      	orrs	r3, r2
 800281c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800281e:	7dfb      	ldrb	r3, [r7, #23]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d105      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002824:	4b14      	ldr	r3, [pc, #80]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	4a13      	ldr	r2, [pc, #76]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800283c:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	490b      	ldr	r1, [pc, #44]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284a:	4313      	orrs	r3, r2
 800284c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0310 	and.w	r3, r3, #16
 8002856:	2b00      	cmp	r3, #0
 8002858:	d008      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800285a:	4b07      	ldr	r3, [pc, #28]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	4904      	ldr	r1, [pc, #16]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000
 800287c:	40007000 	.word	0x40007000
 8002880:	42420440 	.word	0x42420440

08002884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e041      	b.n	800291a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe fb44 	bl	8000f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3304      	adds	r3, #4
 80028c0:	4619      	mov	r1, r3
 80028c2:	4610      	mov	r0, r2
 80028c4:	f000 fa7c 	bl	8002dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d001      	beq.n	800293c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e03a      	b.n	80029b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a18      	ldr	r2, [pc, #96]	; (80029bc <HAL_TIM_Base_Start_IT+0x98>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d00e      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x58>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002966:	d009      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x58>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a14      	ldr	r2, [pc, #80]	; (80029c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d004      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x58>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a13      	ldr	r2, [pc, #76]	; (80029c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d111      	bne.n	80029a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b06      	cmp	r3, #6
 800298c:	d010      	beq.n	80029b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0201 	orr.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800299e:	e007      	b.n	80029b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	40012c00 	.word	0x40012c00
 80029c0:	40000400 	.word	0x40000400
 80029c4:	40000800 	.word	0x40000800

080029c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d122      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d11b      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0202 	mvn.w	r2, #2
 80029f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f9bd 	bl	8002d8a <HAL_TIM_IC_CaptureCallback>
 8002a10:	e005      	b.n	8002a1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f9b0 	bl	8002d78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f9bf 	bl	8002d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d122      	bne.n	8002a78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d11b      	bne.n	8002a78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f06f 0204 	mvn.w	r2, #4
 8002a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f993 	bl	8002d8a <HAL_TIM_IC_CaptureCallback>
 8002a64:	e005      	b.n	8002a72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f986 	bl	8002d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f995 	bl	8002d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d122      	bne.n	8002acc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d11b      	bne.n	8002acc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0208 	mvn.w	r2, #8
 8002a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2204      	movs	r2, #4
 8002aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f969 	bl	8002d8a <HAL_TIM_IC_CaptureCallback>
 8002ab8:	e005      	b.n	8002ac6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f95c 	bl	8002d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f96b 	bl	8002d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b10      	cmp	r3, #16
 8002ad8:	d122      	bne.n	8002b20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b10      	cmp	r3, #16
 8002ae6:	d11b      	bne.n	8002b20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0210 	mvn.w	r2, #16
 8002af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2208      	movs	r2, #8
 8002af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f93f 	bl	8002d8a <HAL_TIM_IC_CaptureCallback>
 8002b0c:	e005      	b.n	8002b1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f932 	bl	8002d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f941 	bl	8002d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d10e      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d107      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0201 	mvn.w	r2, #1
 8002b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f90d 	bl	8002d66 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b56:	2b80      	cmp	r3, #128	; 0x80
 8002b58:	d10e      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b64:	2b80      	cmp	r3, #128	; 0x80
 8002b66:	d107      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 fa83 	bl	800307e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b82:	2b40      	cmp	r3, #64	; 0x40
 8002b84:	d10e      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b90:	2b40      	cmp	r3, #64	; 0x40
 8002b92:	d107      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f905 	bl	8002dae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	2b20      	cmp	r3, #32
 8002bb0:	d10e      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	d107      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0220 	mvn.w	r2, #32
 8002bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fa4e 	bl	800306c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_TIM_ConfigClockSource+0x1c>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e0b4      	b.n	8002d5e <HAL_TIM_ConfigClockSource+0x186>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c2c:	d03e      	beq.n	8002cac <HAL_TIM_ConfigClockSource+0xd4>
 8002c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c32:	f200 8087 	bhi.w	8002d44 <HAL_TIM_ConfigClockSource+0x16c>
 8002c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c3a:	f000 8086 	beq.w	8002d4a <HAL_TIM_ConfigClockSource+0x172>
 8002c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c42:	d87f      	bhi.n	8002d44 <HAL_TIM_ConfigClockSource+0x16c>
 8002c44:	2b70      	cmp	r3, #112	; 0x70
 8002c46:	d01a      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0xa6>
 8002c48:	2b70      	cmp	r3, #112	; 0x70
 8002c4a:	d87b      	bhi.n	8002d44 <HAL_TIM_ConfigClockSource+0x16c>
 8002c4c:	2b60      	cmp	r3, #96	; 0x60
 8002c4e:	d050      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0x11a>
 8002c50:	2b60      	cmp	r3, #96	; 0x60
 8002c52:	d877      	bhi.n	8002d44 <HAL_TIM_ConfigClockSource+0x16c>
 8002c54:	2b50      	cmp	r3, #80	; 0x50
 8002c56:	d03c      	beq.n	8002cd2 <HAL_TIM_ConfigClockSource+0xfa>
 8002c58:	2b50      	cmp	r3, #80	; 0x50
 8002c5a:	d873      	bhi.n	8002d44 <HAL_TIM_ConfigClockSource+0x16c>
 8002c5c:	2b40      	cmp	r3, #64	; 0x40
 8002c5e:	d058      	beq.n	8002d12 <HAL_TIM_ConfigClockSource+0x13a>
 8002c60:	2b40      	cmp	r3, #64	; 0x40
 8002c62:	d86f      	bhi.n	8002d44 <HAL_TIM_ConfigClockSource+0x16c>
 8002c64:	2b30      	cmp	r3, #48	; 0x30
 8002c66:	d064      	beq.n	8002d32 <HAL_TIM_ConfigClockSource+0x15a>
 8002c68:	2b30      	cmp	r3, #48	; 0x30
 8002c6a:	d86b      	bhi.n	8002d44 <HAL_TIM_ConfigClockSource+0x16c>
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	d060      	beq.n	8002d32 <HAL_TIM_ConfigClockSource+0x15a>
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	d867      	bhi.n	8002d44 <HAL_TIM_ConfigClockSource+0x16c>
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d05c      	beq.n	8002d32 <HAL_TIM_ConfigClockSource+0x15a>
 8002c78:	2b10      	cmp	r3, #16
 8002c7a:	d05a      	beq.n	8002d32 <HAL_TIM_ConfigClockSource+0x15a>
 8002c7c:	e062      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6899      	ldr	r1, [r3, #8]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f000 f970 	bl	8002f72 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ca0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	609a      	str	r2, [r3, #8]
      break;
 8002caa:	e04f      	b.n	8002d4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6818      	ldr	r0, [r3, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	6899      	ldr	r1, [r3, #8]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f000 f959 	bl	8002f72 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cce:	609a      	str	r2, [r3, #8]
      break;
 8002cd0:	e03c      	b.n	8002d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	6859      	ldr	r1, [r3, #4]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f000 f8d0 	bl	8002e84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2150      	movs	r1, #80	; 0x50
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 f927 	bl	8002f3e <TIM_ITRx_SetConfig>
      break;
 8002cf0:	e02c      	b.n	8002d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6859      	ldr	r1, [r3, #4]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f000 f8ee 	bl	8002ee0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2160      	movs	r1, #96	; 0x60
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 f917 	bl	8002f3e <TIM_ITRx_SetConfig>
      break;
 8002d10:	e01c      	b.n	8002d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	6859      	ldr	r1, [r3, #4]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	f000 f8b0 	bl	8002e84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2140      	movs	r1, #64	; 0x40
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 f907 	bl	8002f3e <TIM_ITRx_SetConfig>
      break;
 8002d30:	e00c      	b.n	8002d4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	f000 f8fe 	bl	8002f3e <TIM_ITRx_SetConfig>
      break;
 8002d42:	e003      	b.n	8002d4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
      break;
 8002d48:	e000      	b.n	8002d4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr

08002d78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr

08002d8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr

08002d9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr

08002dae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a29      	ldr	r2, [pc, #164]	; (8002e78 <TIM_Base_SetConfig+0xb8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d00b      	beq.n	8002df0 <TIM_Base_SetConfig+0x30>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dde:	d007      	beq.n	8002df0 <TIM_Base_SetConfig+0x30>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a26      	ldr	r2, [pc, #152]	; (8002e7c <TIM_Base_SetConfig+0xbc>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d003      	beq.n	8002df0 <TIM_Base_SetConfig+0x30>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a25      	ldr	r2, [pc, #148]	; (8002e80 <TIM_Base_SetConfig+0xc0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d108      	bne.n	8002e02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a1c      	ldr	r2, [pc, #112]	; (8002e78 <TIM_Base_SetConfig+0xb8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00b      	beq.n	8002e22 <TIM_Base_SetConfig+0x62>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e10:	d007      	beq.n	8002e22 <TIM_Base_SetConfig+0x62>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <TIM_Base_SetConfig+0xbc>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d003      	beq.n	8002e22 <TIM_Base_SetConfig+0x62>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a18      	ldr	r2, [pc, #96]	; (8002e80 <TIM_Base_SetConfig+0xc0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d108      	bne.n	8002e34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a07      	ldr	r2, [pc, #28]	; (8002e78 <TIM_Base_SetConfig+0xb8>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d103      	bne.n	8002e68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	615a      	str	r2, [r3, #20]
}
 8002e6e:	bf00      	nop
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr
 8002e78:	40012c00 	.word	0x40012c00
 8002e7c:	40000400 	.word	0x40000400
 8002e80:	40000800 	.word	0x40000800

08002e84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	f023 0201 	bic.w	r2, r3, #1
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f023 030a 	bic.w	r3, r3, #10
 8002ec0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	621a      	str	r2, [r3, #32]
}
 8002ed6:	bf00      	nop
 8002ed8:	371c      	adds	r7, #28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	f023 0210 	bic.w	r2, r3, #16
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	031b      	lsls	r3, r3, #12
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f1c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	621a      	str	r2, [r3, #32]
}
 8002f34:	bf00      	nop
 8002f36:	371c      	adds	r7, #28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b085      	sub	sp, #20
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f043 0307 	orr.w	r3, r3, #7
 8002f60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	609a      	str	r2, [r3, #8]
}
 8002f68:	bf00      	nop
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr

08002f72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b087      	sub	sp, #28
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
 8002f7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	021a      	lsls	r2, r3, #8
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	431a      	orrs	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	609a      	str	r2, [r3, #8]
}
 8002fa6:	bf00      	nop
 8002fa8:	371c      	adds	r7, #28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr

08002fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e046      	b.n	8003056 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a16      	ldr	r2, [pc, #88]	; (8003060 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d00e      	beq.n	800302a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003014:	d009      	beq.n	800302a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a12      	ldr	r2, [pc, #72]	; (8003064 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d004      	beq.n	800302a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a10      	ldr	r2, [pc, #64]	; (8003068 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d10c      	bne.n	8003044 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003030:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	4313      	orrs	r3, r2
 800303a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr
 8003060:	40012c00 	.word	0x40012c00
 8003064:	40000400 	.word	0x40000400
 8003068:	40000800 	.word	0x40000800

0800306c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr

0800307e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr

08003090 <__errno>:
 8003090:	4b01      	ldr	r3, [pc, #4]	; (8003098 <__errno+0x8>)
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	2000000c 	.word	0x2000000c

0800309c <__libc_init_array>:
 800309c:	b570      	push	{r4, r5, r6, lr}
 800309e:	2600      	movs	r6, #0
 80030a0:	4d0c      	ldr	r5, [pc, #48]	; (80030d4 <__libc_init_array+0x38>)
 80030a2:	4c0d      	ldr	r4, [pc, #52]	; (80030d8 <__libc_init_array+0x3c>)
 80030a4:	1b64      	subs	r4, r4, r5
 80030a6:	10a4      	asrs	r4, r4, #2
 80030a8:	42a6      	cmp	r6, r4
 80030aa:	d109      	bne.n	80030c0 <__libc_init_array+0x24>
 80030ac:	f000 fc9c 	bl	80039e8 <_init>
 80030b0:	2600      	movs	r6, #0
 80030b2:	4d0a      	ldr	r5, [pc, #40]	; (80030dc <__libc_init_array+0x40>)
 80030b4:	4c0a      	ldr	r4, [pc, #40]	; (80030e0 <__libc_init_array+0x44>)
 80030b6:	1b64      	subs	r4, r4, r5
 80030b8:	10a4      	asrs	r4, r4, #2
 80030ba:	42a6      	cmp	r6, r4
 80030bc:	d105      	bne.n	80030ca <__libc_init_array+0x2e>
 80030be:	bd70      	pop	{r4, r5, r6, pc}
 80030c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c4:	4798      	blx	r3
 80030c6:	3601      	adds	r6, #1
 80030c8:	e7ee      	b.n	80030a8 <__libc_init_array+0xc>
 80030ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ce:	4798      	blx	r3
 80030d0:	3601      	adds	r6, #1
 80030d2:	e7f2      	b.n	80030ba <__libc_init_array+0x1e>
 80030d4:	08003a88 	.word	0x08003a88
 80030d8:	08003a88 	.word	0x08003a88
 80030dc:	08003a88 	.word	0x08003a88
 80030e0:	08003a8c 	.word	0x08003a8c

080030e4 <memset>:
 80030e4:	4603      	mov	r3, r0
 80030e6:	4402      	add	r2, r0
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d100      	bne.n	80030ee <memset+0xa>
 80030ec:	4770      	bx	lr
 80030ee:	f803 1b01 	strb.w	r1, [r3], #1
 80030f2:	e7f9      	b.n	80030e8 <memset+0x4>

080030f4 <siprintf>:
 80030f4:	b40e      	push	{r1, r2, r3}
 80030f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030fa:	b500      	push	{lr}
 80030fc:	b09c      	sub	sp, #112	; 0x70
 80030fe:	ab1d      	add	r3, sp, #116	; 0x74
 8003100:	9002      	str	r0, [sp, #8]
 8003102:	9006      	str	r0, [sp, #24]
 8003104:	9107      	str	r1, [sp, #28]
 8003106:	9104      	str	r1, [sp, #16]
 8003108:	4808      	ldr	r0, [pc, #32]	; (800312c <siprintf+0x38>)
 800310a:	4909      	ldr	r1, [pc, #36]	; (8003130 <siprintf+0x3c>)
 800310c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003110:	9105      	str	r1, [sp, #20]
 8003112:	6800      	ldr	r0, [r0, #0]
 8003114:	a902      	add	r1, sp, #8
 8003116:	9301      	str	r3, [sp, #4]
 8003118:	f000 f868 	bl	80031ec <_svfiprintf_r>
 800311c:	2200      	movs	r2, #0
 800311e:	9b02      	ldr	r3, [sp, #8]
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	b01c      	add	sp, #112	; 0x70
 8003124:	f85d eb04 	ldr.w	lr, [sp], #4
 8003128:	b003      	add	sp, #12
 800312a:	4770      	bx	lr
 800312c:	2000000c 	.word	0x2000000c
 8003130:	ffff0208 	.word	0xffff0208

08003134 <__ssputs_r>:
 8003134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003138:	688e      	ldr	r6, [r1, #8]
 800313a:	4682      	mov	sl, r0
 800313c:	429e      	cmp	r6, r3
 800313e:	460c      	mov	r4, r1
 8003140:	4690      	mov	r8, r2
 8003142:	461f      	mov	r7, r3
 8003144:	d838      	bhi.n	80031b8 <__ssputs_r+0x84>
 8003146:	898a      	ldrh	r2, [r1, #12]
 8003148:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800314c:	d032      	beq.n	80031b4 <__ssputs_r+0x80>
 800314e:	6825      	ldr	r5, [r4, #0]
 8003150:	6909      	ldr	r1, [r1, #16]
 8003152:	3301      	adds	r3, #1
 8003154:	eba5 0901 	sub.w	r9, r5, r1
 8003158:	6965      	ldr	r5, [r4, #20]
 800315a:	444b      	add	r3, r9
 800315c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003160:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003164:	106d      	asrs	r5, r5, #1
 8003166:	429d      	cmp	r5, r3
 8003168:	bf38      	it	cc
 800316a:	461d      	movcc	r5, r3
 800316c:	0553      	lsls	r3, r2, #21
 800316e:	d531      	bpl.n	80031d4 <__ssputs_r+0xa0>
 8003170:	4629      	mov	r1, r5
 8003172:	f000 fb6f 	bl	8003854 <_malloc_r>
 8003176:	4606      	mov	r6, r0
 8003178:	b950      	cbnz	r0, 8003190 <__ssputs_r+0x5c>
 800317a:	230c      	movs	r3, #12
 800317c:	f04f 30ff 	mov.w	r0, #4294967295
 8003180:	f8ca 3000 	str.w	r3, [sl]
 8003184:	89a3      	ldrh	r3, [r4, #12]
 8003186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800318a:	81a3      	strh	r3, [r4, #12]
 800318c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003190:	464a      	mov	r2, r9
 8003192:	6921      	ldr	r1, [r4, #16]
 8003194:	f000 face 	bl	8003734 <memcpy>
 8003198:	89a3      	ldrh	r3, [r4, #12]
 800319a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800319e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a2:	81a3      	strh	r3, [r4, #12]
 80031a4:	6126      	str	r6, [r4, #16]
 80031a6:	444e      	add	r6, r9
 80031a8:	6026      	str	r6, [r4, #0]
 80031aa:	463e      	mov	r6, r7
 80031ac:	6165      	str	r5, [r4, #20]
 80031ae:	eba5 0509 	sub.w	r5, r5, r9
 80031b2:	60a5      	str	r5, [r4, #8]
 80031b4:	42be      	cmp	r6, r7
 80031b6:	d900      	bls.n	80031ba <__ssputs_r+0x86>
 80031b8:	463e      	mov	r6, r7
 80031ba:	4632      	mov	r2, r6
 80031bc:	4641      	mov	r1, r8
 80031be:	6820      	ldr	r0, [r4, #0]
 80031c0:	f000 fac6 	bl	8003750 <memmove>
 80031c4:	68a3      	ldr	r3, [r4, #8]
 80031c6:	2000      	movs	r0, #0
 80031c8:	1b9b      	subs	r3, r3, r6
 80031ca:	60a3      	str	r3, [r4, #8]
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	4433      	add	r3, r6
 80031d0:	6023      	str	r3, [r4, #0]
 80031d2:	e7db      	b.n	800318c <__ssputs_r+0x58>
 80031d4:	462a      	mov	r2, r5
 80031d6:	f000 fbb1 	bl	800393c <_realloc_r>
 80031da:	4606      	mov	r6, r0
 80031dc:	2800      	cmp	r0, #0
 80031de:	d1e1      	bne.n	80031a4 <__ssputs_r+0x70>
 80031e0:	4650      	mov	r0, sl
 80031e2:	6921      	ldr	r1, [r4, #16]
 80031e4:	f000 face 	bl	8003784 <_free_r>
 80031e8:	e7c7      	b.n	800317a <__ssputs_r+0x46>
	...

080031ec <_svfiprintf_r>:
 80031ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f0:	4698      	mov	r8, r3
 80031f2:	898b      	ldrh	r3, [r1, #12]
 80031f4:	4607      	mov	r7, r0
 80031f6:	061b      	lsls	r3, r3, #24
 80031f8:	460d      	mov	r5, r1
 80031fa:	4614      	mov	r4, r2
 80031fc:	b09d      	sub	sp, #116	; 0x74
 80031fe:	d50e      	bpl.n	800321e <_svfiprintf_r+0x32>
 8003200:	690b      	ldr	r3, [r1, #16]
 8003202:	b963      	cbnz	r3, 800321e <_svfiprintf_r+0x32>
 8003204:	2140      	movs	r1, #64	; 0x40
 8003206:	f000 fb25 	bl	8003854 <_malloc_r>
 800320a:	6028      	str	r0, [r5, #0]
 800320c:	6128      	str	r0, [r5, #16]
 800320e:	b920      	cbnz	r0, 800321a <_svfiprintf_r+0x2e>
 8003210:	230c      	movs	r3, #12
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	f04f 30ff 	mov.w	r0, #4294967295
 8003218:	e0d1      	b.n	80033be <_svfiprintf_r+0x1d2>
 800321a:	2340      	movs	r3, #64	; 0x40
 800321c:	616b      	str	r3, [r5, #20]
 800321e:	2300      	movs	r3, #0
 8003220:	9309      	str	r3, [sp, #36]	; 0x24
 8003222:	2320      	movs	r3, #32
 8003224:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003228:	2330      	movs	r3, #48	; 0x30
 800322a:	f04f 0901 	mov.w	r9, #1
 800322e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003232:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80033d8 <_svfiprintf_r+0x1ec>
 8003236:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800323a:	4623      	mov	r3, r4
 800323c:	469a      	mov	sl, r3
 800323e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003242:	b10a      	cbz	r2, 8003248 <_svfiprintf_r+0x5c>
 8003244:	2a25      	cmp	r2, #37	; 0x25
 8003246:	d1f9      	bne.n	800323c <_svfiprintf_r+0x50>
 8003248:	ebba 0b04 	subs.w	fp, sl, r4
 800324c:	d00b      	beq.n	8003266 <_svfiprintf_r+0x7a>
 800324e:	465b      	mov	r3, fp
 8003250:	4622      	mov	r2, r4
 8003252:	4629      	mov	r1, r5
 8003254:	4638      	mov	r0, r7
 8003256:	f7ff ff6d 	bl	8003134 <__ssputs_r>
 800325a:	3001      	adds	r0, #1
 800325c:	f000 80aa 	beq.w	80033b4 <_svfiprintf_r+0x1c8>
 8003260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003262:	445a      	add	r2, fp
 8003264:	9209      	str	r2, [sp, #36]	; 0x24
 8003266:	f89a 3000 	ldrb.w	r3, [sl]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 80a2 	beq.w	80033b4 <_svfiprintf_r+0x1c8>
 8003270:	2300      	movs	r3, #0
 8003272:	f04f 32ff 	mov.w	r2, #4294967295
 8003276:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800327a:	f10a 0a01 	add.w	sl, sl, #1
 800327e:	9304      	str	r3, [sp, #16]
 8003280:	9307      	str	r3, [sp, #28]
 8003282:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003286:	931a      	str	r3, [sp, #104]	; 0x68
 8003288:	4654      	mov	r4, sl
 800328a:	2205      	movs	r2, #5
 800328c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003290:	4851      	ldr	r0, [pc, #324]	; (80033d8 <_svfiprintf_r+0x1ec>)
 8003292:	f000 fa41 	bl	8003718 <memchr>
 8003296:	9a04      	ldr	r2, [sp, #16]
 8003298:	b9d8      	cbnz	r0, 80032d2 <_svfiprintf_r+0xe6>
 800329a:	06d0      	lsls	r0, r2, #27
 800329c:	bf44      	itt	mi
 800329e:	2320      	movmi	r3, #32
 80032a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032a4:	0711      	lsls	r1, r2, #28
 80032a6:	bf44      	itt	mi
 80032a8:	232b      	movmi	r3, #43	; 0x2b
 80032aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032ae:	f89a 3000 	ldrb.w	r3, [sl]
 80032b2:	2b2a      	cmp	r3, #42	; 0x2a
 80032b4:	d015      	beq.n	80032e2 <_svfiprintf_r+0xf6>
 80032b6:	4654      	mov	r4, sl
 80032b8:	2000      	movs	r0, #0
 80032ba:	f04f 0c0a 	mov.w	ip, #10
 80032be:	9a07      	ldr	r2, [sp, #28]
 80032c0:	4621      	mov	r1, r4
 80032c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032c6:	3b30      	subs	r3, #48	; 0x30
 80032c8:	2b09      	cmp	r3, #9
 80032ca:	d94e      	bls.n	800336a <_svfiprintf_r+0x17e>
 80032cc:	b1b0      	cbz	r0, 80032fc <_svfiprintf_r+0x110>
 80032ce:	9207      	str	r2, [sp, #28]
 80032d0:	e014      	b.n	80032fc <_svfiprintf_r+0x110>
 80032d2:	eba0 0308 	sub.w	r3, r0, r8
 80032d6:	fa09 f303 	lsl.w	r3, r9, r3
 80032da:	4313      	orrs	r3, r2
 80032dc:	46a2      	mov	sl, r4
 80032de:	9304      	str	r3, [sp, #16]
 80032e0:	e7d2      	b.n	8003288 <_svfiprintf_r+0x9c>
 80032e2:	9b03      	ldr	r3, [sp, #12]
 80032e4:	1d19      	adds	r1, r3, #4
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	9103      	str	r1, [sp, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	bfbb      	ittet	lt
 80032ee:	425b      	neglt	r3, r3
 80032f0:	f042 0202 	orrlt.w	r2, r2, #2
 80032f4:	9307      	strge	r3, [sp, #28]
 80032f6:	9307      	strlt	r3, [sp, #28]
 80032f8:	bfb8      	it	lt
 80032fa:	9204      	strlt	r2, [sp, #16]
 80032fc:	7823      	ldrb	r3, [r4, #0]
 80032fe:	2b2e      	cmp	r3, #46	; 0x2e
 8003300:	d10c      	bne.n	800331c <_svfiprintf_r+0x130>
 8003302:	7863      	ldrb	r3, [r4, #1]
 8003304:	2b2a      	cmp	r3, #42	; 0x2a
 8003306:	d135      	bne.n	8003374 <_svfiprintf_r+0x188>
 8003308:	9b03      	ldr	r3, [sp, #12]
 800330a:	3402      	adds	r4, #2
 800330c:	1d1a      	adds	r2, r3, #4
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	9203      	str	r2, [sp, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	bfb8      	it	lt
 8003316:	f04f 33ff 	movlt.w	r3, #4294967295
 800331a:	9305      	str	r3, [sp, #20]
 800331c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80033dc <_svfiprintf_r+0x1f0>
 8003320:	2203      	movs	r2, #3
 8003322:	4650      	mov	r0, sl
 8003324:	7821      	ldrb	r1, [r4, #0]
 8003326:	f000 f9f7 	bl	8003718 <memchr>
 800332a:	b140      	cbz	r0, 800333e <_svfiprintf_r+0x152>
 800332c:	2340      	movs	r3, #64	; 0x40
 800332e:	eba0 000a 	sub.w	r0, r0, sl
 8003332:	fa03 f000 	lsl.w	r0, r3, r0
 8003336:	9b04      	ldr	r3, [sp, #16]
 8003338:	3401      	adds	r4, #1
 800333a:	4303      	orrs	r3, r0
 800333c:	9304      	str	r3, [sp, #16]
 800333e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003342:	2206      	movs	r2, #6
 8003344:	4826      	ldr	r0, [pc, #152]	; (80033e0 <_svfiprintf_r+0x1f4>)
 8003346:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800334a:	f000 f9e5 	bl	8003718 <memchr>
 800334e:	2800      	cmp	r0, #0
 8003350:	d038      	beq.n	80033c4 <_svfiprintf_r+0x1d8>
 8003352:	4b24      	ldr	r3, [pc, #144]	; (80033e4 <_svfiprintf_r+0x1f8>)
 8003354:	bb1b      	cbnz	r3, 800339e <_svfiprintf_r+0x1b2>
 8003356:	9b03      	ldr	r3, [sp, #12]
 8003358:	3307      	adds	r3, #7
 800335a:	f023 0307 	bic.w	r3, r3, #7
 800335e:	3308      	adds	r3, #8
 8003360:	9303      	str	r3, [sp, #12]
 8003362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003364:	4433      	add	r3, r6
 8003366:	9309      	str	r3, [sp, #36]	; 0x24
 8003368:	e767      	b.n	800323a <_svfiprintf_r+0x4e>
 800336a:	460c      	mov	r4, r1
 800336c:	2001      	movs	r0, #1
 800336e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003372:	e7a5      	b.n	80032c0 <_svfiprintf_r+0xd4>
 8003374:	2300      	movs	r3, #0
 8003376:	f04f 0c0a 	mov.w	ip, #10
 800337a:	4619      	mov	r1, r3
 800337c:	3401      	adds	r4, #1
 800337e:	9305      	str	r3, [sp, #20]
 8003380:	4620      	mov	r0, r4
 8003382:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003386:	3a30      	subs	r2, #48	; 0x30
 8003388:	2a09      	cmp	r2, #9
 800338a:	d903      	bls.n	8003394 <_svfiprintf_r+0x1a8>
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0c5      	beq.n	800331c <_svfiprintf_r+0x130>
 8003390:	9105      	str	r1, [sp, #20]
 8003392:	e7c3      	b.n	800331c <_svfiprintf_r+0x130>
 8003394:	4604      	mov	r4, r0
 8003396:	2301      	movs	r3, #1
 8003398:	fb0c 2101 	mla	r1, ip, r1, r2
 800339c:	e7f0      	b.n	8003380 <_svfiprintf_r+0x194>
 800339e:	ab03      	add	r3, sp, #12
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	462a      	mov	r2, r5
 80033a4:	4638      	mov	r0, r7
 80033a6:	4b10      	ldr	r3, [pc, #64]	; (80033e8 <_svfiprintf_r+0x1fc>)
 80033a8:	a904      	add	r1, sp, #16
 80033aa:	f3af 8000 	nop.w
 80033ae:	1c42      	adds	r2, r0, #1
 80033b0:	4606      	mov	r6, r0
 80033b2:	d1d6      	bne.n	8003362 <_svfiprintf_r+0x176>
 80033b4:	89ab      	ldrh	r3, [r5, #12]
 80033b6:	065b      	lsls	r3, r3, #25
 80033b8:	f53f af2c 	bmi.w	8003214 <_svfiprintf_r+0x28>
 80033bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033be:	b01d      	add	sp, #116	; 0x74
 80033c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033c4:	ab03      	add	r3, sp, #12
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	462a      	mov	r2, r5
 80033ca:	4638      	mov	r0, r7
 80033cc:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <_svfiprintf_r+0x1fc>)
 80033ce:	a904      	add	r1, sp, #16
 80033d0:	f000 f87c 	bl	80034cc <_printf_i>
 80033d4:	e7eb      	b.n	80033ae <_svfiprintf_r+0x1c2>
 80033d6:	bf00      	nop
 80033d8:	08003a52 	.word	0x08003a52
 80033dc:	08003a58 	.word	0x08003a58
 80033e0:	08003a5c 	.word	0x08003a5c
 80033e4:	00000000 	.word	0x00000000
 80033e8:	08003135 	.word	0x08003135

080033ec <_printf_common>:
 80033ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033f0:	4616      	mov	r6, r2
 80033f2:	4699      	mov	r9, r3
 80033f4:	688a      	ldr	r2, [r1, #8]
 80033f6:	690b      	ldr	r3, [r1, #16]
 80033f8:	4607      	mov	r7, r0
 80033fa:	4293      	cmp	r3, r2
 80033fc:	bfb8      	it	lt
 80033fe:	4613      	movlt	r3, r2
 8003400:	6033      	str	r3, [r6, #0]
 8003402:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003406:	460c      	mov	r4, r1
 8003408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800340c:	b10a      	cbz	r2, 8003412 <_printf_common+0x26>
 800340e:	3301      	adds	r3, #1
 8003410:	6033      	str	r3, [r6, #0]
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	0699      	lsls	r1, r3, #26
 8003416:	bf42      	ittt	mi
 8003418:	6833      	ldrmi	r3, [r6, #0]
 800341a:	3302      	addmi	r3, #2
 800341c:	6033      	strmi	r3, [r6, #0]
 800341e:	6825      	ldr	r5, [r4, #0]
 8003420:	f015 0506 	ands.w	r5, r5, #6
 8003424:	d106      	bne.n	8003434 <_printf_common+0x48>
 8003426:	f104 0a19 	add.w	sl, r4, #25
 800342a:	68e3      	ldr	r3, [r4, #12]
 800342c:	6832      	ldr	r2, [r6, #0]
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	42ab      	cmp	r3, r5
 8003432:	dc28      	bgt.n	8003486 <_printf_common+0x9a>
 8003434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003438:	1e13      	subs	r3, r2, #0
 800343a:	6822      	ldr	r2, [r4, #0]
 800343c:	bf18      	it	ne
 800343e:	2301      	movne	r3, #1
 8003440:	0692      	lsls	r2, r2, #26
 8003442:	d42d      	bmi.n	80034a0 <_printf_common+0xb4>
 8003444:	4649      	mov	r1, r9
 8003446:	4638      	mov	r0, r7
 8003448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800344c:	47c0      	blx	r8
 800344e:	3001      	adds	r0, #1
 8003450:	d020      	beq.n	8003494 <_printf_common+0xa8>
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	68e5      	ldr	r5, [r4, #12]
 8003456:	f003 0306 	and.w	r3, r3, #6
 800345a:	2b04      	cmp	r3, #4
 800345c:	bf18      	it	ne
 800345e:	2500      	movne	r5, #0
 8003460:	6832      	ldr	r2, [r6, #0]
 8003462:	f04f 0600 	mov.w	r6, #0
 8003466:	68a3      	ldr	r3, [r4, #8]
 8003468:	bf08      	it	eq
 800346a:	1aad      	subeq	r5, r5, r2
 800346c:	6922      	ldr	r2, [r4, #16]
 800346e:	bf08      	it	eq
 8003470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003474:	4293      	cmp	r3, r2
 8003476:	bfc4      	itt	gt
 8003478:	1a9b      	subgt	r3, r3, r2
 800347a:	18ed      	addgt	r5, r5, r3
 800347c:	341a      	adds	r4, #26
 800347e:	42b5      	cmp	r5, r6
 8003480:	d11a      	bne.n	80034b8 <_printf_common+0xcc>
 8003482:	2000      	movs	r0, #0
 8003484:	e008      	b.n	8003498 <_printf_common+0xac>
 8003486:	2301      	movs	r3, #1
 8003488:	4652      	mov	r2, sl
 800348a:	4649      	mov	r1, r9
 800348c:	4638      	mov	r0, r7
 800348e:	47c0      	blx	r8
 8003490:	3001      	adds	r0, #1
 8003492:	d103      	bne.n	800349c <_printf_common+0xb0>
 8003494:	f04f 30ff 	mov.w	r0, #4294967295
 8003498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800349c:	3501      	adds	r5, #1
 800349e:	e7c4      	b.n	800342a <_printf_common+0x3e>
 80034a0:	2030      	movs	r0, #48	; 0x30
 80034a2:	18e1      	adds	r1, r4, r3
 80034a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034ae:	4422      	add	r2, r4
 80034b0:	3302      	adds	r3, #2
 80034b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034b6:	e7c5      	b.n	8003444 <_printf_common+0x58>
 80034b8:	2301      	movs	r3, #1
 80034ba:	4622      	mov	r2, r4
 80034bc:	4649      	mov	r1, r9
 80034be:	4638      	mov	r0, r7
 80034c0:	47c0      	blx	r8
 80034c2:	3001      	adds	r0, #1
 80034c4:	d0e6      	beq.n	8003494 <_printf_common+0xa8>
 80034c6:	3601      	adds	r6, #1
 80034c8:	e7d9      	b.n	800347e <_printf_common+0x92>
	...

080034cc <_printf_i>:
 80034cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034d0:	7e0f      	ldrb	r7, [r1, #24]
 80034d2:	4691      	mov	r9, r2
 80034d4:	2f78      	cmp	r7, #120	; 0x78
 80034d6:	4680      	mov	r8, r0
 80034d8:	460c      	mov	r4, r1
 80034da:	469a      	mov	sl, r3
 80034dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80034de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80034e2:	d807      	bhi.n	80034f4 <_printf_i+0x28>
 80034e4:	2f62      	cmp	r7, #98	; 0x62
 80034e6:	d80a      	bhi.n	80034fe <_printf_i+0x32>
 80034e8:	2f00      	cmp	r7, #0
 80034ea:	f000 80d9 	beq.w	80036a0 <_printf_i+0x1d4>
 80034ee:	2f58      	cmp	r7, #88	; 0x58
 80034f0:	f000 80a4 	beq.w	800363c <_printf_i+0x170>
 80034f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034fc:	e03a      	b.n	8003574 <_printf_i+0xa8>
 80034fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003502:	2b15      	cmp	r3, #21
 8003504:	d8f6      	bhi.n	80034f4 <_printf_i+0x28>
 8003506:	a101      	add	r1, pc, #4	; (adr r1, 800350c <_printf_i+0x40>)
 8003508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800350c:	08003565 	.word	0x08003565
 8003510:	08003579 	.word	0x08003579
 8003514:	080034f5 	.word	0x080034f5
 8003518:	080034f5 	.word	0x080034f5
 800351c:	080034f5 	.word	0x080034f5
 8003520:	080034f5 	.word	0x080034f5
 8003524:	08003579 	.word	0x08003579
 8003528:	080034f5 	.word	0x080034f5
 800352c:	080034f5 	.word	0x080034f5
 8003530:	080034f5 	.word	0x080034f5
 8003534:	080034f5 	.word	0x080034f5
 8003538:	08003687 	.word	0x08003687
 800353c:	080035a9 	.word	0x080035a9
 8003540:	08003669 	.word	0x08003669
 8003544:	080034f5 	.word	0x080034f5
 8003548:	080034f5 	.word	0x080034f5
 800354c:	080036a9 	.word	0x080036a9
 8003550:	080034f5 	.word	0x080034f5
 8003554:	080035a9 	.word	0x080035a9
 8003558:	080034f5 	.word	0x080034f5
 800355c:	080034f5 	.word	0x080034f5
 8003560:	08003671 	.word	0x08003671
 8003564:	682b      	ldr	r3, [r5, #0]
 8003566:	1d1a      	adds	r2, r3, #4
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	602a      	str	r2, [r5, #0]
 800356c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003574:	2301      	movs	r3, #1
 8003576:	e0a4      	b.n	80036c2 <_printf_i+0x1f6>
 8003578:	6820      	ldr	r0, [r4, #0]
 800357a:	6829      	ldr	r1, [r5, #0]
 800357c:	0606      	lsls	r6, r0, #24
 800357e:	f101 0304 	add.w	r3, r1, #4
 8003582:	d50a      	bpl.n	800359a <_printf_i+0xce>
 8003584:	680e      	ldr	r6, [r1, #0]
 8003586:	602b      	str	r3, [r5, #0]
 8003588:	2e00      	cmp	r6, #0
 800358a:	da03      	bge.n	8003594 <_printf_i+0xc8>
 800358c:	232d      	movs	r3, #45	; 0x2d
 800358e:	4276      	negs	r6, r6
 8003590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003594:	230a      	movs	r3, #10
 8003596:	485e      	ldr	r0, [pc, #376]	; (8003710 <_printf_i+0x244>)
 8003598:	e019      	b.n	80035ce <_printf_i+0x102>
 800359a:	680e      	ldr	r6, [r1, #0]
 800359c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80035a0:	602b      	str	r3, [r5, #0]
 80035a2:	bf18      	it	ne
 80035a4:	b236      	sxthne	r6, r6
 80035a6:	e7ef      	b.n	8003588 <_printf_i+0xbc>
 80035a8:	682b      	ldr	r3, [r5, #0]
 80035aa:	6820      	ldr	r0, [r4, #0]
 80035ac:	1d19      	adds	r1, r3, #4
 80035ae:	6029      	str	r1, [r5, #0]
 80035b0:	0601      	lsls	r1, r0, #24
 80035b2:	d501      	bpl.n	80035b8 <_printf_i+0xec>
 80035b4:	681e      	ldr	r6, [r3, #0]
 80035b6:	e002      	b.n	80035be <_printf_i+0xf2>
 80035b8:	0646      	lsls	r6, r0, #25
 80035ba:	d5fb      	bpl.n	80035b4 <_printf_i+0xe8>
 80035bc:	881e      	ldrh	r6, [r3, #0]
 80035be:	2f6f      	cmp	r7, #111	; 0x6f
 80035c0:	bf0c      	ite	eq
 80035c2:	2308      	moveq	r3, #8
 80035c4:	230a      	movne	r3, #10
 80035c6:	4852      	ldr	r0, [pc, #328]	; (8003710 <_printf_i+0x244>)
 80035c8:	2100      	movs	r1, #0
 80035ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035ce:	6865      	ldr	r5, [r4, #4]
 80035d0:	2d00      	cmp	r5, #0
 80035d2:	bfa8      	it	ge
 80035d4:	6821      	ldrge	r1, [r4, #0]
 80035d6:	60a5      	str	r5, [r4, #8]
 80035d8:	bfa4      	itt	ge
 80035da:	f021 0104 	bicge.w	r1, r1, #4
 80035de:	6021      	strge	r1, [r4, #0]
 80035e0:	b90e      	cbnz	r6, 80035e6 <_printf_i+0x11a>
 80035e2:	2d00      	cmp	r5, #0
 80035e4:	d04d      	beq.n	8003682 <_printf_i+0x1b6>
 80035e6:	4615      	mov	r5, r2
 80035e8:	fbb6 f1f3 	udiv	r1, r6, r3
 80035ec:	fb03 6711 	mls	r7, r3, r1, r6
 80035f0:	5dc7      	ldrb	r7, [r0, r7]
 80035f2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80035f6:	4637      	mov	r7, r6
 80035f8:	42bb      	cmp	r3, r7
 80035fa:	460e      	mov	r6, r1
 80035fc:	d9f4      	bls.n	80035e8 <_printf_i+0x11c>
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d10b      	bne.n	800361a <_printf_i+0x14e>
 8003602:	6823      	ldr	r3, [r4, #0]
 8003604:	07de      	lsls	r6, r3, #31
 8003606:	d508      	bpl.n	800361a <_printf_i+0x14e>
 8003608:	6923      	ldr	r3, [r4, #16]
 800360a:	6861      	ldr	r1, [r4, #4]
 800360c:	4299      	cmp	r1, r3
 800360e:	bfde      	ittt	le
 8003610:	2330      	movle	r3, #48	; 0x30
 8003612:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003616:	f105 35ff 	addle.w	r5, r5, #4294967295
 800361a:	1b52      	subs	r2, r2, r5
 800361c:	6122      	str	r2, [r4, #16]
 800361e:	464b      	mov	r3, r9
 8003620:	4621      	mov	r1, r4
 8003622:	4640      	mov	r0, r8
 8003624:	f8cd a000 	str.w	sl, [sp]
 8003628:	aa03      	add	r2, sp, #12
 800362a:	f7ff fedf 	bl	80033ec <_printf_common>
 800362e:	3001      	adds	r0, #1
 8003630:	d14c      	bne.n	80036cc <_printf_i+0x200>
 8003632:	f04f 30ff 	mov.w	r0, #4294967295
 8003636:	b004      	add	sp, #16
 8003638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800363c:	4834      	ldr	r0, [pc, #208]	; (8003710 <_printf_i+0x244>)
 800363e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003642:	6829      	ldr	r1, [r5, #0]
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	f851 6b04 	ldr.w	r6, [r1], #4
 800364a:	6029      	str	r1, [r5, #0]
 800364c:	061d      	lsls	r5, r3, #24
 800364e:	d514      	bpl.n	800367a <_printf_i+0x1ae>
 8003650:	07df      	lsls	r7, r3, #31
 8003652:	bf44      	itt	mi
 8003654:	f043 0320 	orrmi.w	r3, r3, #32
 8003658:	6023      	strmi	r3, [r4, #0]
 800365a:	b91e      	cbnz	r6, 8003664 <_printf_i+0x198>
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	f023 0320 	bic.w	r3, r3, #32
 8003662:	6023      	str	r3, [r4, #0]
 8003664:	2310      	movs	r3, #16
 8003666:	e7af      	b.n	80035c8 <_printf_i+0xfc>
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	f043 0320 	orr.w	r3, r3, #32
 800366e:	6023      	str	r3, [r4, #0]
 8003670:	2378      	movs	r3, #120	; 0x78
 8003672:	4828      	ldr	r0, [pc, #160]	; (8003714 <_printf_i+0x248>)
 8003674:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003678:	e7e3      	b.n	8003642 <_printf_i+0x176>
 800367a:	0659      	lsls	r1, r3, #25
 800367c:	bf48      	it	mi
 800367e:	b2b6      	uxthmi	r6, r6
 8003680:	e7e6      	b.n	8003650 <_printf_i+0x184>
 8003682:	4615      	mov	r5, r2
 8003684:	e7bb      	b.n	80035fe <_printf_i+0x132>
 8003686:	682b      	ldr	r3, [r5, #0]
 8003688:	6826      	ldr	r6, [r4, #0]
 800368a:	1d18      	adds	r0, r3, #4
 800368c:	6961      	ldr	r1, [r4, #20]
 800368e:	6028      	str	r0, [r5, #0]
 8003690:	0635      	lsls	r5, r6, #24
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	d501      	bpl.n	800369a <_printf_i+0x1ce>
 8003696:	6019      	str	r1, [r3, #0]
 8003698:	e002      	b.n	80036a0 <_printf_i+0x1d4>
 800369a:	0670      	lsls	r0, r6, #25
 800369c:	d5fb      	bpl.n	8003696 <_printf_i+0x1ca>
 800369e:	8019      	strh	r1, [r3, #0]
 80036a0:	2300      	movs	r3, #0
 80036a2:	4615      	mov	r5, r2
 80036a4:	6123      	str	r3, [r4, #16]
 80036a6:	e7ba      	b.n	800361e <_printf_i+0x152>
 80036a8:	682b      	ldr	r3, [r5, #0]
 80036aa:	2100      	movs	r1, #0
 80036ac:	1d1a      	adds	r2, r3, #4
 80036ae:	602a      	str	r2, [r5, #0]
 80036b0:	681d      	ldr	r5, [r3, #0]
 80036b2:	6862      	ldr	r2, [r4, #4]
 80036b4:	4628      	mov	r0, r5
 80036b6:	f000 f82f 	bl	8003718 <memchr>
 80036ba:	b108      	cbz	r0, 80036c0 <_printf_i+0x1f4>
 80036bc:	1b40      	subs	r0, r0, r5
 80036be:	6060      	str	r0, [r4, #4]
 80036c0:	6863      	ldr	r3, [r4, #4]
 80036c2:	6123      	str	r3, [r4, #16]
 80036c4:	2300      	movs	r3, #0
 80036c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036ca:	e7a8      	b.n	800361e <_printf_i+0x152>
 80036cc:	462a      	mov	r2, r5
 80036ce:	4649      	mov	r1, r9
 80036d0:	4640      	mov	r0, r8
 80036d2:	6923      	ldr	r3, [r4, #16]
 80036d4:	47d0      	blx	sl
 80036d6:	3001      	adds	r0, #1
 80036d8:	d0ab      	beq.n	8003632 <_printf_i+0x166>
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	079b      	lsls	r3, r3, #30
 80036de:	d413      	bmi.n	8003708 <_printf_i+0x23c>
 80036e0:	68e0      	ldr	r0, [r4, #12]
 80036e2:	9b03      	ldr	r3, [sp, #12]
 80036e4:	4298      	cmp	r0, r3
 80036e6:	bfb8      	it	lt
 80036e8:	4618      	movlt	r0, r3
 80036ea:	e7a4      	b.n	8003636 <_printf_i+0x16a>
 80036ec:	2301      	movs	r3, #1
 80036ee:	4632      	mov	r2, r6
 80036f0:	4649      	mov	r1, r9
 80036f2:	4640      	mov	r0, r8
 80036f4:	47d0      	blx	sl
 80036f6:	3001      	adds	r0, #1
 80036f8:	d09b      	beq.n	8003632 <_printf_i+0x166>
 80036fa:	3501      	adds	r5, #1
 80036fc:	68e3      	ldr	r3, [r4, #12]
 80036fe:	9903      	ldr	r1, [sp, #12]
 8003700:	1a5b      	subs	r3, r3, r1
 8003702:	42ab      	cmp	r3, r5
 8003704:	dcf2      	bgt.n	80036ec <_printf_i+0x220>
 8003706:	e7eb      	b.n	80036e0 <_printf_i+0x214>
 8003708:	2500      	movs	r5, #0
 800370a:	f104 0619 	add.w	r6, r4, #25
 800370e:	e7f5      	b.n	80036fc <_printf_i+0x230>
 8003710:	08003a63 	.word	0x08003a63
 8003714:	08003a74 	.word	0x08003a74

08003718 <memchr>:
 8003718:	4603      	mov	r3, r0
 800371a:	b510      	push	{r4, lr}
 800371c:	b2c9      	uxtb	r1, r1
 800371e:	4402      	add	r2, r0
 8003720:	4293      	cmp	r3, r2
 8003722:	4618      	mov	r0, r3
 8003724:	d101      	bne.n	800372a <memchr+0x12>
 8003726:	2000      	movs	r0, #0
 8003728:	e003      	b.n	8003732 <memchr+0x1a>
 800372a:	7804      	ldrb	r4, [r0, #0]
 800372c:	3301      	adds	r3, #1
 800372e:	428c      	cmp	r4, r1
 8003730:	d1f6      	bne.n	8003720 <memchr+0x8>
 8003732:	bd10      	pop	{r4, pc}

08003734 <memcpy>:
 8003734:	440a      	add	r2, r1
 8003736:	4291      	cmp	r1, r2
 8003738:	f100 33ff 	add.w	r3, r0, #4294967295
 800373c:	d100      	bne.n	8003740 <memcpy+0xc>
 800373e:	4770      	bx	lr
 8003740:	b510      	push	{r4, lr}
 8003742:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003746:	4291      	cmp	r1, r2
 8003748:	f803 4f01 	strb.w	r4, [r3, #1]!
 800374c:	d1f9      	bne.n	8003742 <memcpy+0xe>
 800374e:	bd10      	pop	{r4, pc}

08003750 <memmove>:
 8003750:	4288      	cmp	r0, r1
 8003752:	b510      	push	{r4, lr}
 8003754:	eb01 0402 	add.w	r4, r1, r2
 8003758:	d902      	bls.n	8003760 <memmove+0x10>
 800375a:	4284      	cmp	r4, r0
 800375c:	4623      	mov	r3, r4
 800375e:	d807      	bhi.n	8003770 <memmove+0x20>
 8003760:	1e43      	subs	r3, r0, #1
 8003762:	42a1      	cmp	r1, r4
 8003764:	d008      	beq.n	8003778 <memmove+0x28>
 8003766:	f811 2b01 	ldrb.w	r2, [r1], #1
 800376a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800376e:	e7f8      	b.n	8003762 <memmove+0x12>
 8003770:	4601      	mov	r1, r0
 8003772:	4402      	add	r2, r0
 8003774:	428a      	cmp	r2, r1
 8003776:	d100      	bne.n	800377a <memmove+0x2a>
 8003778:	bd10      	pop	{r4, pc}
 800377a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800377e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003782:	e7f7      	b.n	8003774 <memmove+0x24>

08003784 <_free_r>:
 8003784:	b538      	push	{r3, r4, r5, lr}
 8003786:	4605      	mov	r5, r0
 8003788:	2900      	cmp	r1, #0
 800378a:	d040      	beq.n	800380e <_free_r+0x8a>
 800378c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003790:	1f0c      	subs	r4, r1, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	bfb8      	it	lt
 8003796:	18e4      	addlt	r4, r4, r3
 8003798:	f000 f910 	bl	80039bc <__malloc_lock>
 800379c:	4a1c      	ldr	r2, [pc, #112]	; (8003810 <_free_r+0x8c>)
 800379e:	6813      	ldr	r3, [r2, #0]
 80037a0:	b933      	cbnz	r3, 80037b0 <_free_r+0x2c>
 80037a2:	6063      	str	r3, [r4, #4]
 80037a4:	6014      	str	r4, [r2, #0]
 80037a6:	4628      	mov	r0, r5
 80037a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037ac:	f000 b90c 	b.w	80039c8 <__malloc_unlock>
 80037b0:	42a3      	cmp	r3, r4
 80037b2:	d908      	bls.n	80037c6 <_free_r+0x42>
 80037b4:	6820      	ldr	r0, [r4, #0]
 80037b6:	1821      	adds	r1, r4, r0
 80037b8:	428b      	cmp	r3, r1
 80037ba:	bf01      	itttt	eq
 80037bc:	6819      	ldreq	r1, [r3, #0]
 80037be:	685b      	ldreq	r3, [r3, #4]
 80037c0:	1809      	addeq	r1, r1, r0
 80037c2:	6021      	streq	r1, [r4, #0]
 80037c4:	e7ed      	b.n	80037a2 <_free_r+0x1e>
 80037c6:	461a      	mov	r2, r3
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	b10b      	cbz	r3, 80037d0 <_free_r+0x4c>
 80037cc:	42a3      	cmp	r3, r4
 80037ce:	d9fa      	bls.n	80037c6 <_free_r+0x42>
 80037d0:	6811      	ldr	r1, [r2, #0]
 80037d2:	1850      	adds	r0, r2, r1
 80037d4:	42a0      	cmp	r0, r4
 80037d6:	d10b      	bne.n	80037f0 <_free_r+0x6c>
 80037d8:	6820      	ldr	r0, [r4, #0]
 80037da:	4401      	add	r1, r0
 80037dc:	1850      	adds	r0, r2, r1
 80037de:	4283      	cmp	r3, r0
 80037e0:	6011      	str	r1, [r2, #0]
 80037e2:	d1e0      	bne.n	80037a6 <_free_r+0x22>
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	4401      	add	r1, r0
 80037ea:	6011      	str	r1, [r2, #0]
 80037ec:	6053      	str	r3, [r2, #4]
 80037ee:	e7da      	b.n	80037a6 <_free_r+0x22>
 80037f0:	d902      	bls.n	80037f8 <_free_r+0x74>
 80037f2:	230c      	movs	r3, #12
 80037f4:	602b      	str	r3, [r5, #0]
 80037f6:	e7d6      	b.n	80037a6 <_free_r+0x22>
 80037f8:	6820      	ldr	r0, [r4, #0]
 80037fa:	1821      	adds	r1, r4, r0
 80037fc:	428b      	cmp	r3, r1
 80037fe:	bf01      	itttt	eq
 8003800:	6819      	ldreq	r1, [r3, #0]
 8003802:	685b      	ldreq	r3, [r3, #4]
 8003804:	1809      	addeq	r1, r1, r0
 8003806:	6021      	streq	r1, [r4, #0]
 8003808:	6063      	str	r3, [r4, #4]
 800380a:	6054      	str	r4, [r2, #4]
 800380c:	e7cb      	b.n	80037a6 <_free_r+0x22>
 800380e:	bd38      	pop	{r3, r4, r5, pc}
 8003810:	20000110 	.word	0x20000110

08003814 <sbrk_aligned>:
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	4e0e      	ldr	r6, [pc, #56]	; (8003850 <sbrk_aligned+0x3c>)
 8003818:	460c      	mov	r4, r1
 800381a:	6831      	ldr	r1, [r6, #0]
 800381c:	4605      	mov	r5, r0
 800381e:	b911      	cbnz	r1, 8003826 <sbrk_aligned+0x12>
 8003820:	f000 f8bc 	bl	800399c <_sbrk_r>
 8003824:	6030      	str	r0, [r6, #0]
 8003826:	4621      	mov	r1, r4
 8003828:	4628      	mov	r0, r5
 800382a:	f000 f8b7 	bl	800399c <_sbrk_r>
 800382e:	1c43      	adds	r3, r0, #1
 8003830:	d00a      	beq.n	8003848 <sbrk_aligned+0x34>
 8003832:	1cc4      	adds	r4, r0, #3
 8003834:	f024 0403 	bic.w	r4, r4, #3
 8003838:	42a0      	cmp	r0, r4
 800383a:	d007      	beq.n	800384c <sbrk_aligned+0x38>
 800383c:	1a21      	subs	r1, r4, r0
 800383e:	4628      	mov	r0, r5
 8003840:	f000 f8ac 	bl	800399c <_sbrk_r>
 8003844:	3001      	adds	r0, #1
 8003846:	d101      	bne.n	800384c <sbrk_aligned+0x38>
 8003848:	f04f 34ff 	mov.w	r4, #4294967295
 800384c:	4620      	mov	r0, r4
 800384e:	bd70      	pop	{r4, r5, r6, pc}
 8003850:	20000114 	.word	0x20000114

08003854 <_malloc_r>:
 8003854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003858:	1ccd      	adds	r5, r1, #3
 800385a:	f025 0503 	bic.w	r5, r5, #3
 800385e:	3508      	adds	r5, #8
 8003860:	2d0c      	cmp	r5, #12
 8003862:	bf38      	it	cc
 8003864:	250c      	movcc	r5, #12
 8003866:	2d00      	cmp	r5, #0
 8003868:	4607      	mov	r7, r0
 800386a:	db01      	blt.n	8003870 <_malloc_r+0x1c>
 800386c:	42a9      	cmp	r1, r5
 800386e:	d905      	bls.n	800387c <_malloc_r+0x28>
 8003870:	230c      	movs	r3, #12
 8003872:	2600      	movs	r6, #0
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	4630      	mov	r0, r6
 8003878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800387c:	4e2e      	ldr	r6, [pc, #184]	; (8003938 <_malloc_r+0xe4>)
 800387e:	f000 f89d 	bl	80039bc <__malloc_lock>
 8003882:	6833      	ldr	r3, [r6, #0]
 8003884:	461c      	mov	r4, r3
 8003886:	bb34      	cbnz	r4, 80038d6 <_malloc_r+0x82>
 8003888:	4629      	mov	r1, r5
 800388a:	4638      	mov	r0, r7
 800388c:	f7ff ffc2 	bl	8003814 <sbrk_aligned>
 8003890:	1c43      	adds	r3, r0, #1
 8003892:	4604      	mov	r4, r0
 8003894:	d14d      	bne.n	8003932 <_malloc_r+0xde>
 8003896:	6834      	ldr	r4, [r6, #0]
 8003898:	4626      	mov	r6, r4
 800389a:	2e00      	cmp	r6, #0
 800389c:	d140      	bne.n	8003920 <_malloc_r+0xcc>
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	4631      	mov	r1, r6
 80038a2:	4638      	mov	r0, r7
 80038a4:	eb04 0803 	add.w	r8, r4, r3
 80038a8:	f000 f878 	bl	800399c <_sbrk_r>
 80038ac:	4580      	cmp	r8, r0
 80038ae:	d13a      	bne.n	8003926 <_malloc_r+0xd2>
 80038b0:	6821      	ldr	r1, [r4, #0]
 80038b2:	3503      	adds	r5, #3
 80038b4:	1a6d      	subs	r5, r5, r1
 80038b6:	f025 0503 	bic.w	r5, r5, #3
 80038ba:	3508      	adds	r5, #8
 80038bc:	2d0c      	cmp	r5, #12
 80038be:	bf38      	it	cc
 80038c0:	250c      	movcc	r5, #12
 80038c2:	4638      	mov	r0, r7
 80038c4:	4629      	mov	r1, r5
 80038c6:	f7ff ffa5 	bl	8003814 <sbrk_aligned>
 80038ca:	3001      	adds	r0, #1
 80038cc:	d02b      	beq.n	8003926 <_malloc_r+0xd2>
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	442b      	add	r3, r5
 80038d2:	6023      	str	r3, [r4, #0]
 80038d4:	e00e      	b.n	80038f4 <_malloc_r+0xa0>
 80038d6:	6822      	ldr	r2, [r4, #0]
 80038d8:	1b52      	subs	r2, r2, r5
 80038da:	d41e      	bmi.n	800391a <_malloc_r+0xc6>
 80038dc:	2a0b      	cmp	r2, #11
 80038de:	d916      	bls.n	800390e <_malloc_r+0xba>
 80038e0:	1961      	adds	r1, r4, r5
 80038e2:	42a3      	cmp	r3, r4
 80038e4:	6025      	str	r5, [r4, #0]
 80038e6:	bf18      	it	ne
 80038e8:	6059      	strne	r1, [r3, #4]
 80038ea:	6863      	ldr	r3, [r4, #4]
 80038ec:	bf08      	it	eq
 80038ee:	6031      	streq	r1, [r6, #0]
 80038f0:	5162      	str	r2, [r4, r5]
 80038f2:	604b      	str	r3, [r1, #4]
 80038f4:	4638      	mov	r0, r7
 80038f6:	f104 060b 	add.w	r6, r4, #11
 80038fa:	f000 f865 	bl	80039c8 <__malloc_unlock>
 80038fe:	f026 0607 	bic.w	r6, r6, #7
 8003902:	1d23      	adds	r3, r4, #4
 8003904:	1af2      	subs	r2, r6, r3
 8003906:	d0b6      	beq.n	8003876 <_malloc_r+0x22>
 8003908:	1b9b      	subs	r3, r3, r6
 800390a:	50a3      	str	r3, [r4, r2]
 800390c:	e7b3      	b.n	8003876 <_malloc_r+0x22>
 800390e:	6862      	ldr	r2, [r4, #4]
 8003910:	42a3      	cmp	r3, r4
 8003912:	bf0c      	ite	eq
 8003914:	6032      	streq	r2, [r6, #0]
 8003916:	605a      	strne	r2, [r3, #4]
 8003918:	e7ec      	b.n	80038f4 <_malloc_r+0xa0>
 800391a:	4623      	mov	r3, r4
 800391c:	6864      	ldr	r4, [r4, #4]
 800391e:	e7b2      	b.n	8003886 <_malloc_r+0x32>
 8003920:	4634      	mov	r4, r6
 8003922:	6876      	ldr	r6, [r6, #4]
 8003924:	e7b9      	b.n	800389a <_malloc_r+0x46>
 8003926:	230c      	movs	r3, #12
 8003928:	4638      	mov	r0, r7
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	f000 f84c 	bl	80039c8 <__malloc_unlock>
 8003930:	e7a1      	b.n	8003876 <_malloc_r+0x22>
 8003932:	6025      	str	r5, [r4, #0]
 8003934:	e7de      	b.n	80038f4 <_malloc_r+0xa0>
 8003936:	bf00      	nop
 8003938:	20000110 	.word	0x20000110

0800393c <_realloc_r>:
 800393c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003940:	4680      	mov	r8, r0
 8003942:	4614      	mov	r4, r2
 8003944:	460e      	mov	r6, r1
 8003946:	b921      	cbnz	r1, 8003952 <_realloc_r+0x16>
 8003948:	4611      	mov	r1, r2
 800394a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800394e:	f7ff bf81 	b.w	8003854 <_malloc_r>
 8003952:	b92a      	cbnz	r2, 8003960 <_realloc_r+0x24>
 8003954:	f7ff ff16 	bl	8003784 <_free_r>
 8003958:	4625      	mov	r5, r4
 800395a:	4628      	mov	r0, r5
 800395c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003960:	f000 f838 	bl	80039d4 <_malloc_usable_size_r>
 8003964:	4284      	cmp	r4, r0
 8003966:	4607      	mov	r7, r0
 8003968:	d802      	bhi.n	8003970 <_realloc_r+0x34>
 800396a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800396e:	d812      	bhi.n	8003996 <_realloc_r+0x5a>
 8003970:	4621      	mov	r1, r4
 8003972:	4640      	mov	r0, r8
 8003974:	f7ff ff6e 	bl	8003854 <_malloc_r>
 8003978:	4605      	mov	r5, r0
 800397a:	2800      	cmp	r0, #0
 800397c:	d0ed      	beq.n	800395a <_realloc_r+0x1e>
 800397e:	42bc      	cmp	r4, r7
 8003980:	4622      	mov	r2, r4
 8003982:	4631      	mov	r1, r6
 8003984:	bf28      	it	cs
 8003986:	463a      	movcs	r2, r7
 8003988:	f7ff fed4 	bl	8003734 <memcpy>
 800398c:	4631      	mov	r1, r6
 800398e:	4640      	mov	r0, r8
 8003990:	f7ff fef8 	bl	8003784 <_free_r>
 8003994:	e7e1      	b.n	800395a <_realloc_r+0x1e>
 8003996:	4635      	mov	r5, r6
 8003998:	e7df      	b.n	800395a <_realloc_r+0x1e>
	...

0800399c <_sbrk_r>:
 800399c:	b538      	push	{r3, r4, r5, lr}
 800399e:	2300      	movs	r3, #0
 80039a0:	4d05      	ldr	r5, [pc, #20]	; (80039b8 <_sbrk_r+0x1c>)
 80039a2:	4604      	mov	r4, r0
 80039a4:	4608      	mov	r0, r1
 80039a6:	602b      	str	r3, [r5, #0]
 80039a8:	f7fd fb3e 	bl	8001028 <_sbrk>
 80039ac:	1c43      	adds	r3, r0, #1
 80039ae:	d102      	bne.n	80039b6 <_sbrk_r+0x1a>
 80039b0:	682b      	ldr	r3, [r5, #0]
 80039b2:	b103      	cbz	r3, 80039b6 <_sbrk_r+0x1a>
 80039b4:	6023      	str	r3, [r4, #0]
 80039b6:	bd38      	pop	{r3, r4, r5, pc}
 80039b8:	20000118 	.word	0x20000118

080039bc <__malloc_lock>:
 80039bc:	4801      	ldr	r0, [pc, #4]	; (80039c4 <__malloc_lock+0x8>)
 80039be:	f000 b811 	b.w	80039e4 <__retarget_lock_acquire_recursive>
 80039c2:	bf00      	nop
 80039c4:	2000011c 	.word	0x2000011c

080039c8 <__malloc_unlock>:
 80039c8:	4801      	ldr	r0, [pc, #4]	; (80039d0 <__malloc_unlock+0x8>)
 80039ca:	f000 b80c 	b.w	80039e6 <__retarget_lock_release_recursive>
 80039ce:	bf00      	nop
 80039d0:	2000011c 	.word	0x2000011c

080039d4 <_malloc_usable_size_r>:
 80039d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039d8:	1f18      	subs	r0, r3, #4
 80039da:	2b00      	cmp	r3, #0
 80039dc:	bfbc      	itt	lt
 80039de:	580b      	ldrlt	r3, [r1, r0]
 80039e0:	18c0      	addlt	r0, r0, r3
 80039e2:	4770      	bx	lr

080039e4 <__retarget_lock_acquire_recursive>:
 80039e4:	4770      	bx	lr

080039e6 <__retarget_lock_release_recursive>:
 80039e6:	4770      	bx	lr

080039e8 <_init>:
 80039e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ea:	bf00      	nop
 80039ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ee:	bc08      	pop	{r3}
 80039f0:	469e      	mov	lr, r3
 80039f2:	4770      	bx	lr

080039f4 <_fini>:
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f6:	bf00      	nop
 80039f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039fa:	bc08      	pop	{r3}
 80039fc:	469e      	mov	lr, r3
 80039fe:	4770      	bx	lr
