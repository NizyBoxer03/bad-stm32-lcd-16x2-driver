
lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003b74  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003ca4  08003ca4  00013ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d2c  08003d2c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003d2c  08003d2c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d2c  08003d2c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d2c  08003d2c  00013d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d30  08003d30  00013d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  08003da4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003da4  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccbe  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020aa  00000000  00000000  0002cd57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000707c  00000000  00000000  0002ee01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  00035e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cb8  00000000  00000000  00036c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000186d1  00000000  00000000  00037915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e27d  00000000  00000000  0004ffe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008db7f  00000000  00000000  0005e263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000ebde2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b58  00000000  00000000  000ebe34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000070 	.word	0x20000070
 800014c:	00000000 	.word	0x00000000
 8000150:	08003c8c 	.word	0x08003c8c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000074 	.word	0x20000074
 800016c:	08003c8c 	.word	0x08003c8c

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	; 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003de:	2afd      	cmp	r2, #253	; 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	; 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	; 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	; 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__aeabi_f2iz>:
 800062c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000630:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000634:	d30f      	bcc.n	8000656 <__aeabi_f2iz+0x2a>
 8000636:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800063a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800063e:	d90d      	bls.n	800065c <__aeabi_f2iz+0x30>
 8000640:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000644:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000648:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800064c:	fa23 f002 	lsr.w	r0, r3, r2
 8000650:	bf18      	it	ne
 8000652:	4240      	negne	r0, r0
 8000654:	4770      	bx	lr
 8000656:	f04f 0000 	mov.w	r0, #0
 800065a:	4770      	bx	lr
 800065c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000660:	d101      	bne.n	8000666 <__aeabi_f2iz+0x3a>
 8000662:	0242      	lsls	r2, r0, #9
 8000664:	d105      	bne.n	8000672 <__aeabi_f2iz+0x46>
 8000666:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800066a:	bf08      	it	eq
 800066c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000670:	4770      	bx	lr
 8000672:	f04f 0000 	mov.w	r0, #0
 8000676:	4770      	bx	lr

08000678 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <DWT_Delay_Init+0x58>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	4a13      	ldr	r2, [pc, #76]	; (80006d0 <DWT_Delay_Init+0x58>)
 8000682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000686:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <DWT_Delay_Init+0x58>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	4a10      	ldr	r2, [pc, #64]	; (80006d0 <DWT_Delay_Init+0x58>)
 800068e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000692:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <DWT_Delay_Init+0x5c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <DWT_Delay_Init+0x5c>)
 800069a:	f023 0301 	bic.w	r3, r3, #1
 800069e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <DWT_Delay_Init+0x5c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <DWT_Delay_Init+0x5c>)
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <DWT_Delay_Init+0x5c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80006b2:	bf00      	nop
    __ASM volatile ("NOP");
 80006b4:	bf00      	nop
    __ASM volatile ("NOP");
 80006b6:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <DWT_Delay_Init+0x5c>)
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80006c0:	2300      	movs	r3, #0
 80006c2:	e000      	b.n	80006c6 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80006c4:	2301      	movs	r3, #1
    }
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	e000edf0 	.word	0xe000edf0
 80006d4:	e0001000 	.word	0xe0001000

080006d8 <DWT_Delay_us>:
uint32_t DWT_Delay_Init(void);


// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <DWT_Delay_us+0x48>)
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80006e6:	f002 f965 	bl	80029b4 <HAL_RCC_GetHCLKFreq>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <DWT_Delay_us+0x4c>)
 80006ee:	fba2 2303 	umull	r2, r3, r2, r3
 80006f2:	0c9b      	lsrs	r3, r3, #18
 80006f4:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	68ba      	ldr	r2, [r7, #8]
 80006fa:	fb02 f303 	mul.w	r3, r2, r3
 80006fe:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000700:	bf00      	nop
 8000702:	4b07      	ldr	r3, [pc, #28]	; (8000720 <DWT_Delay_us+0x48>)
 8000704:	685a      	ldr	r2, [r3, #4]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	1ad2      	subs	r2, r2, r3
 800070a:	6879      	ldr	r1, [r7, #4]
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	1acb      	subs	r3, r1, r3
 8000710:	429a      	cmp	r2, r3
 8000712:	d3f6      	bcc.n	8000702 <DWT_Delay_us+0x2a>
}
 8000714:	bf00      	nop
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	e0001000 	.word	0xe0001000
 8000724:	431bde83 	.word	0x431bde83

08000728 <DWT_Delay_ms>:

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <DWT_Delay_ms+0x44>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8000736:	f002 f93d 	bl	80029b4 <HAL_RCC_GetHCLKFreq>
 800073a:	4603      	mov	r3, r0
 800073c:	4a0c      	ldr	r2, [pc, #48]	; (8000770 <DWT_Delay_ms+0x48>)
 800073e:	fba2 2303 	umull	r2, r3, r2, r3
 8000742:	099b      	lsrs	r3, r3, #6
 8000744:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	68ba      	ldr	r2, [r7, #8]
 800074a:	fb02 f303 	mul.w	r3, r2, r3
 800074e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8000750:	bf00      	nop
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <DWT_Delay_ms+0x44>)
 8000754:	685a      	ldr	r2, [r3, #4]
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	1ad2      	subs	r2, r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	429a      	cmp	r2, r3
 800075e:	d3f8      	bcc.n	8000752 <DWT_Delay_ms+0x2a>
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	e0001000 	.word	0xe0001000
 8000770:	10624dd3 	.word	0x10624dd3

08000774 <LCD_DATA>:
#include "DWT_Delay.h"

/* Escribe 1 o 0 en los pines configurados en LCD16x2_CfgParam */

void LCD_DATA(unsigned char Data)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
	(LCD16x2_CfgParam.LCD_GPIO)->ODR &= ~(0xF<<4);
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <LCD_DATA+0x3c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	68da      	ldr	r2, [r3, #12]
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <LCD_DATA+0x3c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800078c:	60da      	str	r2, [r3, #12]
	(LCD16x2_CfgParam.LCD_GPIO)->ODR |= (0xF0 & (Data<<4)); //Aplico un mask para que no sobrescriba nada de lo que haya en el puerto
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <LCD_DATA+0x3c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	68d9      	ldr	r1, [r3, #12]
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	011b      	lsls	r3, r3, #4
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <LCD_DATA+0x3c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	430a      	orrs	r2, r1
 80007a0:	60da      	str	r2, [r3, #12]
	LCD_EN_PULSE();
 80007a2:	f000 f991 	bl	8000ac8 <LCD_EN_PULSE>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	08003cc0 	.word	0x08003cc0

080007b4 <LCD_CMD>:

void LCD_CMD(unsigned char a_CMD)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	unsigned char Low4, High4;
	Low4  = a_CMD & 0x0F;
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	f003 030f 	and.w	r3, r3, #15
 80007c4:	73fb      	strb	r3, [r7, #15]
	High4 = a_CMD & 0xF0;
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	f023 030f 	bic.w	r3, r3, #15
 80007cc:	73bb      	strb	r3, [r7, #14]

	// Seleccionar Registro de Comando
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 0);
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <LCD_CMD+0x48>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <LCD_CMD+0x48>)
 80007d4:	89d1      	ldrh	r1, [r2, #14]
 80007d6:	2200      	movs	r2, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f001 fcf9 	bl	80021d0 <HAL_GPIO_WritePin>

    // Enviar comando a LCD
	// Enviar flanco a la señal ENable. No olvidar delays.
    LCD_DATA((High4>>4));
 80007de:	7bbb      	ldrb	r3, [r7, #14]
 80007e0:	091b      	lsrs	r3, r3, #4
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ffc5 	bl	8000774 <LCD_DATA>
    LCD_DATA(Low4);
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ffc1 	bl	8000774 <LCD_DATA>

}
 80007f2:	bf00      	nop
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	08003cc0 	.word	0x08003cc0

08000800 <LCD_Clear>:

void LCD_Clear()
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
    LCD_CMD(0x1);
 8000804:	2001      	movs	r0, #1
 8000806:	f7ff ffd5 	bl	80007b4 <LCD_CMD>
	LCD_CMD(0x2); //Return home
 800080a:	2002      	movs	r0, #2
 800080c:	f7ff ffd2 	bl	80007b4 <LCD_CMD>
	DWT_Delay_ms(2);
 8000810:	2002      	movs	r0, #2
 8000812:	f7ff ff89 	bl	8000728 <DWT_Delay_ms>
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}

0800081a <LCD_SetCursor>:

/* Setea posicion de cursor */
void LCD_SetCursor(unsigned char fila, unsigned char columna)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	4603      	mov	r3, r0
 8000822:	460a      	mov	r2, r1
 8000824:	71fb      	strb	r3, [r7, #7]
 8000826:	4613      	mov	r3, r2
 8000828:	71bb      	strb	r3, [r7, #6]
    if(fila == 1)
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d108      	bne.n	8000842 <LCD_SetCursor+0x28>
    {
        LCD_CMD(0x80 + (columna - 1)); //Debería funcionar pero IDK
 8000830:	79bb      	ldrb	r3, [r7, #6]
 8000832:	337f      	adds	r3, #127	; 0x7f
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ffbc 	bl	80007b4 <LCD_CMD>
        DWT_Delay_us(40);
 800083c:	2028      	movs	r0, #40	; 0x28
 800083e:	f7ff ff4b 	bl	80006d8 <DWT_Delay_us>

    }

    if(fila == 2)
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	2b02      	cmp	r3, #2
 8000846:	d108      	bne.n	800085a <LCD_SetCursor+0x40>
    {
    	LCD_CMD(0xC0 + (columna - 1)); //Ídem anterior
 8000848:	79bb      	ldrb	r3, [r7, #6]
 800084a:	3b41      	subs	r3, #65	; 0x41
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ffb0 	bl	80007b4 <LCD_CMD>
    	DWT_Delay_us(40);
 8000854:	2028      	movs	r0, #40	; 0x28
 8000856:	f7ff ff3f 	bl	80006d8 <DWT_Delay_us>
    }

    DWT_Delay_ms(2);
 800085a:	2002      	movs	r0, #2
 800085c:	f7ff ff64 	bl	8000728 <DWT_Delay_ms>
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <LCD_Init>:

void LCD_Init()
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
	
	// Inicializa la funcion de delay DWT 
	DWT_Delay_Init();
 800087c:	f7ff fefc 	bl	8000678 <DWT_Delay_Init>
	
    // habilitacion de clock en GPIOs
	if(LCD16x2_CfgParam.LCD_GPIO == GPIOA)
 8000880:	4b68      	ldr	r3, [pc, #416]	; (8000a24 <LCD_Init+0x1bc>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a68      	ldr	r2, [pc, #416]	; (8000a28 <LCD_Init+0x1c0>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d10c      	bne.n	80008a4 <LCD_Init+0x3c>
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b68      	ldr	r3, [pc, #416]	; (8000a2c <LCD_Init+0x1c4>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	4a67      	ldr	r2, [pc, #412]	; (8000a2c <LCD_Init+0x1c4>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6193      	str	r3, [r2, #24]
 8000896:	4b65      	ldr	r3, [pc, #404]	; (8000a2c <LCD_Init+0x1c4>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	e034      	b.n	800090e <LCD_Init+0xa6>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOB)
 80008a4:	4b5f      	ldr	r3, [pc, #380]	; (8000a24 <LCD_Init+0x1bc>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a61      	ldr	r2, [pc, #388]	; (8000a30 <LCD_Init+0x1c8>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d10c      	bne.n	80008c8 <LCD_Init+0x60>
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	4b5f      	ldr	r3, [pc, #380]	; (8000a2c <LCD_Init+0x1c4>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	4a5e      	ldr	r2, [pc, #376]	; (8000a2c <LCD_Init+0x1c4>)
 80008b4:	f043 0308 	orr.w	r3, r3, #8
 80008b8:	6193      	str	r3, [r2, #24]
 80008ba:	4b5c      	ldr	r3, [pc, #368]	; (8000a2c <LCD_Init+0x1c4>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	f003 0308 	and.w	r3, r3, #8
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	e022      	b.n	800090e <LCD_Init+0xa6>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOC)
 80008c8:	4b56      	ldr	r3, [pc, #344]	; (8000a24 <LCD_Init+0x1bc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a59      	ldr	r2, [pc, #356]	; (8000a34 <LCD_Init+0x1cc>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d10c      	bne.n	80008ec <LCD_Init+0x84>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	4b56      	ldr	r3, [pc, #344]	; (8000a2c <LCD_Init+0x1c4>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	4a55      	ldr	r2, [pc, #340]	; (8000a2c <LCD_Init+0x1c4>)
 80008d8:	f043 0310 	orr.w	r3, r3, #16
 80008dc:	6193      	str	r3, [r2, #24]
 80008de:	4b53      	ldr	r3, [pc, #332]	; (8000a2c <LCD_Init+0x1c4>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f003 0310 	and.w	r3, r3, #16
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	e010      	b.n	800090e <LCD_Init+0xa6>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOD)
 80008ec:	4b4d      	ldr	r3, [pc, #308]	; (8000a24 <LCD_Init+0x1bc>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a51      	ldr	r2, [pc, #324]	; (8000a38 <LCD_Init+0x1d0>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d10b      	bne.n	800090e <LCD_Init+0xa6>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80008f6:	4b4d      	ldr	r3, [pc, #308]	; (8000a2c <LCD_Init+0x1c4>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	4a4c      	ldr	r2, [pc, #304]	; (8000a2c <LCD_Init+0x1c4>)
 80008fc:	f043 0320 	orr.w	r3, r3, #32
 8000900:	6193      	str	r3, [r2, #24]
 8000902:	4b4a      	ldr	r3, [pc, #296]	; (8000a2c <LCD_Init+0x1c4>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	f003 0320 	and.w	r3, r3, #32
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]
	
	
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, GPIO_PIN_RESET);
 800090e:	4b45      	ldr	r3, [pc, #276]	; (8000a24 <LCD_Init+0x1bc>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a44      	ldr	r2, [pc, #272]	; (8000a24 <LCD_Init+0x1bc>)
 8000914:	8891      	ldrh	r1, [r2, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f001 fc59 	bl	80021d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, GPIO_PIN_RESET);
 800091e:	4b41      	ldr	r3, [pc, #260]	; (8000a24 <LCD_Init+0x1bc>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a40      	ldr	r2, [pc, #256]	; (8000a24 <LCD_Init+0x1bc>)
 8000924:	88d1      	ldrh	r1, [r2, #6]
 8000926:	2200      	movs	r2, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f001 fc51 	bl	80021d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, GPIO_PIN_RESET);
 800092e:	4b3d      	ldr	r3, [pc, #244]	; (8000a24 <LCD_Init+0x1bc>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a3c      	ldr	r2, [pc, #240]	; (8000a24 <LCD_Init+0x1bc>)
 8000934:	8911      	ldrh	r1, [r2, #8]
 8000936:	2200      	movs	r2, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f001 fc49 	bl	80021d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, GPIO_PIN_RESET);
 800093e:	4b39      	ldr	r3, [pc, #228]	; (8000a24 <LCD_Init+0x1bc>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a38      	ldr	r2, [pc, #224]	; (8000a24 <LCD_Init+0x1bc>)
 8000944:	8951      	ldrh	r1, [r2, #10]
 8000946:	2200      	movs	r2, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f001 fc41 	bl	80021d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 800094e:	4b35      	ldr	r3, [pc, #212]	; (8000a24 <LCD_Init+0x1bc>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a34      	ldr	r2, [pc, #208]	; (8000a24 <LCD_Init+0x1bc>)
 8000954:	89d1      	ldrh	r1, [r2, #14]
 8000956:	2200      	movs	r2, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f001 fc39 	bl	80021d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 800095e:	4b31      	ldr	r3, [pc, #196]	; (8000a24 <LCD_Init+0x1bc>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a30      	ldr	r2, [pc, #192]	; (8000a24 <LCD_Init+0x1bc>)
 8000964:	8991      	ldrh	r1, [r2, #12]
 8000966:	2200      	movs	r2, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f001 fc31 	bl	80021d0 <HAL_GPIO_WritePin>
	
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 800096e:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <LCD_Init+0x1bc>)
 8000970:	889a      	ldrh	r2, [r3, #4]
 8000972:	4b2c      	ldr	r3, [pc, #176]	; (8000a24 <LCD_Init+0x1bc>)
 8000974:	88db      	ldrh	r3, [r3, #6]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 8000976:	4313      	orrs	r3, r2
 8000978:	b29a      	uxth	r2, r3
 800097a:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <LCD_Init+0x1bc>)
 800097c:	891b      	ldrh	r3, [r3, #8]
 800097e:	4313      	orrs	r3, r2
 8000980:	b29a      	uxth	r2, r3
 8000982:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <LCD_Init+0x1bc>)
 8000984:	895b      	ldrh	r3, [r3, #10]
 8000986:	4313      	orrs	r3, r2
 8000988:	b29a      	uxth	r2, r3
 800098a:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <LCD_Init+0x1bc>)
 800098c:	89db      	ldrh	r3, [r3, #14]
 800098e:	4313      	orrs	r3, r2
 8000990:	b29a      	uxth	r2, r3
			LCD16x2_CfgParam.EN_PIN;
 8000992:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <LCD_Init+0x1bc>)
 8000994:	899b      	ldrh	r3, [r3, #12]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 8000996:	4313      	orrs	r3, r2
 8000998:	b29b      	uxth	r3, r3
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 800099a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LCD16x2_CfgParam.LCD_GPIO, &GPIO_InitStruct);
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <LCD_Init+0x1bc>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f107 0210 	add.w	r2, r7, #16
 80009b0:	4611      	mov	r1, r2
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 fa88 	bl	8001ec8 <HAL_GPIO_Init>

	// Inicializar display de acuerdo a la especificiación provista en DataSheet
    //AYUDAME LOCOOOOOOOO
	//Faltan los delays en todos lados la reconcha de la lora
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 0);
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <LCD_Init+0x1bc>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <LCD_Init+0x1bc>)
 80009be:	89d1      	ldrh	r1, [r2, #14]
 80009c0:	2200      	movs	r2, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 fc04 	bl	80021d0 <HAL_GPIO_WritePin>
	DWT_Delay_ms(16); //Delay +15 ms
 80009c8:	2010      	movs	r0, #16
 80009ca:	f7ff fead 	bl	8000728 <DWT_Delay_ms>
	LCD_DATA(0x3); //Comando de config
 80009ce:	2003      	movs	r0, #3
 80009d0:	f7ff fed0 	bl	8000774 <LCD_DATA>
	DWT_Delay_ms(5); //Delay +4.1ms
 80009d4:	2005      	movs	r0, #5
 80009d6:	f7ff fea7 	bl	8000728 <DWT_Delay_ms>
	LCD_DATA(0x3); //Comando de config
 80009da:	2003      	movs	r0, #3
 80009dc:	f7ff feca 	bl	8000774 <LCD_DATA>
	DWT_Delay_us(110); //Delay +100ms
 80009e0:	206e      	movs	r0, #110	; 0x6e
 80009e2:	f7ff fe79 	bl	80006d8 <DWT_Delay_us>
	LCD_DATA(0x3); //Comando de config
 80009e6:	2003      	movs	r0, #3
 80009e8:	f7ff fec4 	bl	8000774 <LCD_DATA>
	LCD_DATA(0x2); //Comando de config
 80009ec:	2002      	movs	r0, #2
 80009ee:	f7ff fec1 	bl	8000774 <LCD_DATA>

	//Ahora viene lo bueno
	LCD_CMD(0x2C);
 80009f2:	202c      	movs	r0, #44	; 0x2c
 80009f4:	f7ff fede 	bl	80007b4 <LCD_CMD>
	LCD_CMD(0x8);
 80009f8:	2008      	movs	r0, #8
 80009fa:	f7ff fedb 	bl	80007b4 <LCD_CMD>
	LCD_CMD(0x1);
 80009fe:	2001      	movs	r0, #1
 8000a00:	f7ff fed8 	bl	80007b4 <LCD_CMD>
	LCD_CMD(0xE);
 8000a04:	200e      	movs	r0, #14
 8000a06:	f7ff fed5 	bl	80007b4 <LCD_CMD>
	LCD_CMD(0x6); //Entry Mode Set - CHECKEAR
 8000a0a:	2006      	movs	r0, #6
 8000a0c:	f7ff fed2 	bl	80007b4 <LCD_CMD>
	LCD_CMD(0x2); //Return home
 8000a10:	2002      	movs	r0, #2
 8000a12:	f7ff fecf 	bl	80007b4 <LCD_CMD>
	DWT_Delay_ms(2);
 8000a16:	2002      	movs	r0, #2
 8000a18:	f7ff fe86 	bl	8000728 <DWT_Delay_ms>

	//Init Done
}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	08003cc0 	.word	0x08003cc0
 8000a28:	40010800 	.word	0x40010800
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40010c00 	.word	0x40010c00
 8000a34:	40011000 	.word	0x40011000
 8000a38:	40011400 	.word	0x40011400

08000a3c <LCD_WriteChar>:
void LCD_WriteChar(char Data) //El LCD opera en ASCII, así que en teoriiiiiiiiiiiiia debería funcionar así nomás
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
   // Puede usar HAL_GPIO_WritePin() <Author's comment: fuck you>

	char Low4, High4;
    Low4  = Data & 0x0F;
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	f003 030f 	and.w	r3, r3, #15
 8000a4c:	73fb      	strb	r3, [r7, #15]
    High4 = Data & 0xF0;
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	f023 030f 	bic.w	r3, r3, #15
 8000a54:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 1);
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <LCD_WriteChar+0x48>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <LCD_WriteChar+0x48>)
 8000a5c:	89d1      	ldrh	r1, [r2, #14]
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 fbb5 	bl	80021d0 <HAL_GPIO_WritePin>

   	// Enviar nible alto
    LCD_DATA((High4>>4));
 8000a66:	7bbb      	ldrb	r3, [r7, #14]
 8000a68:	091b      	lsrs	r3, r3, #4
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fe81 	bl	8000774 <LCD_DATA>

   	// Enviar nibble bajo
    LCD_DATA(Low4);
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fe7d 	bl	8000774 <LCD_DATA>
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	08003cc0 	.word	0x08003cc0

08000a88 <LCD_WriteString>:

void LCD_WriteString(char *str)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
    while(str[i] != '\0')
 8000a94:	e00c      	b.n	8000ab0 <LCD_WriteString+0x28>
    {
 	   LCD_WriteChar(str[i]);
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff ffcc 	bl	8000a3c <LCD_WriteChar>
	   DWT_Delay_us(40);
 8000aa4:	2028      	movs	r0, #40	; 0x28
 8000aa6:	f7ff fe17 	bl	80006d8 <DWT_Delay_us>
	   i++;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	3301      	adds	r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
    while(str[i] != '\0')
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1ec      	bne.n	8000a96 <LCD_WriteString+0xe>
    }
}
 8000abc:	bf00      	nop
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <LCD_EN_PULSE>:
	LCD_CMD(0x6); //Entry Mode Set - S = 0
	DWT_Delay_us(40);
}

void LCD_EN_PULSE()
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <LCD_EN_PULSE+0x30>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a09      	ldr	r2, [pc, #36]	; (8000af8 <LCD_EN_PULSE+0x30>)
 8000ad2:	8991      	ldrh	r1, [r2, #12]
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fb7a 	bl	80021d0 <HAL_GPIO_WritePin>
	DWT_Delay_ms(5);
 8000adc:	2005      	movs	r0, #5
 8000ade:	f7ff fe23 	bl	8000728 <DWT_Delay_ms>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <LCD_EN_PULSE+0x30>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <LCD_EN_PULSE+0x30>)
 8000ae8:	8991      	ldrh	r1, [r2, #12]
 8000aea:	2200      	movs	r2, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f001 fb6f 	bl	80021d0 <HAL_GPIO_WritePin>
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	08003cc0 	.word	0x08003cc0

08000afc <DWT_Delay_ms>:
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <DWT_Delay_ms+0x44>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8000b0a:	f001 ff53 	bl	80029b4 <HAL_RCC_GetHCLKFreq>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4a0c      	ldr	r2, [pc, #48]	; (8000b44 <DWT_Delay_ms+0x48>)
 8000b12:	fba2 2303 	umull	r2, r3, r2, r3
 8000b16:	099b      	lsrs	r3, r3, #6
 8000b18:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	68ba      	ldr	r2, [r7, #8]
 8000b1e:	fb02 f303 	mul.w	r3, r2, r3
 8000b22:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8000b24:	bf00      	nop
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <DWT_Delay_ms+0x44>)
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	1ad2      	subs	r2, r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d3f8      	bcc.n	8000b26 <DWT_Delay_ms+0x2a>
}
 8000b34:	bf00      	nop
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	e0001000 	.word	0xe0001000
 8000b44:	10624dd3 	.word	0x10624dd3

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4e:	f000 fc43 	bl	80013d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b52:	f000 f85f 	bl	8000c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b56:	f000 f939 	bl	8000dcc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b5a:	f000 f8e9 	bl	8000d30 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000b5e:	f000 f8a9 	bl	8000cb4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2); //Start timer
 8000b62:	4826      	ldr	r0, [pc, #152]	; (8000bfc <main+0xb4>)
 8000b64:	f002 f854 	bl	8002c10 <HAL_TIM_Base_Start_IT>
  LCD_Init();
 8000b68:	f7ff fe7e 	bl	8000868 <LCD_Init>

  LCD_Clear();
 8000b6c:	f7ff fe48 	bl	8000800 <LCD_Clear>
  LCD_SetCursor(1, 1);
 8000b70:	2101      	movs	r1, #1
 8000b72:	2001      	movs	r0, #1
 8000b74:	f7ff fe51 	bl	800081a <LCD_SetCursor>
  LCD_WriteString("CONVERSION ADC");
 8000b78:	4821      	ldr	r0, [pc, #132]	; (8000c00 <main+0xb8>)
 8000b7a:	f7ff ff85 	bl	8000a88 <LCD_WriteString>
  DWT_Delay_ms(100);
 8000b7e:	2064      	movs	r0, #100	; 0x64
 8000b80:	f7ff ffbc 	bl	8000afc <DWT_Delay_ms>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  int value = (ADCReading * 330 / 4096);
 8000b84:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <main+0xbc>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	491f      	ldr	r1, [pc, #124]	; (8000c08 <main+0xc0>)
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fbfe 	bl	800038c <__aeabi_fmul>
 8000b90:	4603      	mov	r3, r0
 8000b92:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fcac 	bl	80004f4 <__aeabi_fdiv>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fd44 	bl	800062c <__aeabi_f2iz>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	617b      	str	r3, [r7, #20]
	  int value_dec = value % 100;
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	4a18      	ldr	r2, [pc, #96]	; (8000c0c <main+0xc4>)
 8000bac:	fb82 1203 	smull	r1, r2, r2, r3
 8000bb0:	1151      	asrs	r1, r2, #5
 8000bb2:	17da      	asrs	r2, r3, #31
 8000bb4:	1a8a      	subs	r2, r1, r2
 8000bb6:	2164      	movs	r1, #100	; 0x64
 8000bb8:	fb01 f202 	mul.w	r2, r1, r2
 8000bbc:	1a9b      	subs	r3, r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
	  int value_int = (value - value_dec)/ 100;
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	4a11      	ldr	r2, [pc, #68]	; (8000c0c <main+0xc4>)
 8000bc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bcc:	1152      	asrs	r2, r2, #5
 8000bce:	17db      	asrs	r3, r3, #31
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	60fb      	str	r3, [r7, #12]

	  char volts[10];

	  sprintf(volts, "%d,%02d V", value_int, value_dec);
 8000bd4:	4638      	mov	r0, r7
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	68fa      	ldr	r2, [r7, #12]
 8000bda:	490d      	ldr	r1, [pc, #52]	; (8000c10 <main+0xc8>)
 8000bdc:	f002 fbdc 	bl	8003398 <siprintf>

	  LCD_SetCursor(2, 1);
 8000be0:	2101      	movs	r1, #1
 8000be2:	2002      	movs	r0, #2
 8000be4:	f7ff fe19 	bl	800081a <LCD_SetCursor>
	  LCD_WriteString(volts);
 8000be8:	463b      	mov	r3, r7
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff4c 	bl	8000a88 <LCD_WriteString>
	  DWT_Delay_ms(500);
 8000bf0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bf4:	f7ff ff82 	bl	8000afc <DWT_Delay_ms>
  {
 8000bf8:	e7c4      	b.n	8000b84 <main+0x3c>
 8000bfa:	bf00      	nop
 8000bfc:	200000bc 	.word	0x200000bc
 8000c00:	08003ca4 	.word	0x08003ca4
 8000c04:	20000104 	.word	0x20000104
 8000c08:	43a50000 	.word	0x43a50000
 8000c0c:	51eb851f 	.word	0x51eb851f
 8000c10:	08003cb4 	.word	0x08003cb4

08000c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b094      	sub	sp, #80	; 0x50
 8000c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c1e:	2228      	movs	r2, #40	; 0x28
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f002 fbb0 	bl	8003388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c44:	2301      	movs	r3, #1
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 faec 	bl	8002234 <HAL_RCC_OscConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0x52>
  {
    Error_Handler();
 8000c62:	f000 f8ff 	bl	8000e64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c66:	230f      	movs	r3, #15
 8000c68:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f001 fd59 	bl	8002738 <HAL_RCC_ClockConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000c8c:	f000 f8ea 	bl	8000e64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c90:	2302      	movs	r3, #2
 8000c92:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f001 feb2 	bl	8002a04 <HAL_RCCEx_PeriphCLKConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ca6:	f000 f8dd 	bl	8000e64 <Error_Handler>
  }
}
 8000caa:	bf00      	nop
 8000cac:	3750      	adds	r7, #80	; 0x50
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cc4:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <MX_ADC1_Init+0x74>)
 8000cc6:	4a19      	ldr	r2, [pc, #100]	; (8000d2c <MX_ADC1_Init+0x78>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cca:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <MX_ADC1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cd0:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <MX_ADC1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <MX_ADC1_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <MX_ADC1_Init+0x74>)
 8000cde:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ce2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce4:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <MX_ADC1_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_ADC1_Init+0x74>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <MX_ADC1_Init+0x74>)
 8000cf2:	f000 fbd3 	bl	800149c <HAL_ADC_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000cfc:	f000 f8b2 	bl	8000e64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d04:	2301      	movs	r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4805      	ldr	r0, [pc, #20]	; (8000d28 <MX_ADC1_Init+0x74>)
 8000d12:	f000 fe2f 	bl	8001974 <HAL_ADC_ConfigChannel>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d1c:	f000 f8a2 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	2000008c 	.word	0x2000008c
 8000d2c:	40012400 	.word	0x40012400

08000d30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d36:	f107 0308 	add.w	r3, r7, #8
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d44:	463b      	mov	r3, r7
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d4c:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8000d54:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 8000d62:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d64:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000d68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d72:	2280      	movs	r2, #128	; 0x80
 8000d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d76:	4814      	ldr	r0, [pc, #80]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d78:	f001 fefa 	bl	8002b70 <HAL_TIM_Base_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d82:	f000 f86f 	bl	8000e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	4619      	mov	r1, r3
 8000d92:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000d94:	f002 f896 	bl	8002ec4 <HAL_TIM_ConfigClockSource>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d9e:	f000 f861 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da2:	2300      	movs	r3, #0
 8000da4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000daa:	463b      	mov	r3, r7
 8000dac:	4619      	mov	r1, r3
 8000dae:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <MX_TIM2_Init+0x98>)
 8000db0:	f002 fa74 	bl	800329c <HAL_TIMEx_MasterConfigSynchronization>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000dba:	f000 f853 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200000bc 	.word	0x200000bc

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 0310 	add.w	r3, r7, #16
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de0:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <MX_GPIO_Init+0x90>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	4a1d      	ldr	r2, [pc, #116]	; (8000e5c <MX_GPIO_Init+0x90>)
 8000de6:	f043 0310 	orr.w	r3, r3, #16
 8000dea:	6193      	str	r3, [r2, #24]
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <MX_GPIO_Init+0x90>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	f003 0310 	and.w	r3, r3, #16
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df8:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <MX_GPIO_Init+0x90>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <MX_GPIO_Init+0x90>)
 8000dfe:	f043 0320 	orr.w	r3, r3, #32
 8000e02:	6193      	str	r3, [r2, #24]
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <MX_GPIO_Init+0x90>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	f003 0320 	and.w	r3, r3, #32
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <MX_GPIO_Init+0x90>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a11      	ldr	r2, [pc, #68]	; (8000e5c <MX_GPIO_Init+0x90>)
 8000e16:	f043 0304 	orr.w	r3, r3, #4
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <MX_GPIO_Init+0x90>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0304 	and.w	r3, r3, #4
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e2e:	480c      	ldr	r0, [pc, #48]	; (8000e60 <MX_GPIO_Init+0x94>)
 8000e30:	f001 f9ce 	bl	80021d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_GPIO_Init+0x94>)
 8000e4e:	f001 f83b 	bl	8001ec8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e52:	bf00      	nop
 8000e54:	3720      	adds	r7, #32
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40011000 	.word	0x40011000

08000e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e68:	b672      	cpsid	i
}
 8000e6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <Error_Handler+0x8>
	...

08000e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_MspInit+0x5c>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <HAL_MspInit+0x5c>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6193      	str	r3, [r2, #24]
 8000e82:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_MspInit+0x5c>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_MspInit+0x5c>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <HAL_MspInit+0x5c>)
 8000e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e98:	61d3      	str	r3, [r2, #28]
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <HAL_MspInit+0x5c>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_MspInit+0x60>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_MspInit+0x60>)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40010000 	.word	0x40010000

08000ed4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a18      	ldr	r2, [pc, #96]	; (8000f50 <HAL_ADC_MspInit+0x7c>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d129      	bne.n	8000f48 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_ADC_MspInit+0x80>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a16      	ldr	r2, [pc, #88]	; (8000f54 <HAL_ADC_MspInit+0x80>)
 8000efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <HAL_ADC_MspInit+0x80>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <HAL_ADC_MspInit+0x80>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a10      	ldr	r2, [pc, #64]	; (8000f54 <HAL_ADC_MspInit+0x80>)
 8000f12:	f043 0304 	orr.w	r3, r3, #4
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <HAL_ADC_MspInit+0x80>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f24:	2301      	movs	r3, #1
 8000f26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	4619      	mov	r1, r3
 8000f32:	4809      	ldr	r0, [pc, #36]	; (8000f58 <HAL_ADC_MspInit+0x84>)
 8000f34:	f000 ffc8 	bl	8001ec8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2012      	movs	r0, #18
 8000f3e:	f000 ff8c 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f42:	2012      	movs	r0, #18
 8000f44:	f000 ffa5 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f48:	bf00      	nop
 8000f4a:	3720      	adds	r7, #32
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40012400 	.word	0x40012400
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40010800 	.word	0x40010800

08000f5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f6c:	d113      	bne.n	8000f96 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <HAL_TIM_Base_MspInit+0x44>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <HAL_TIM_Base_MspInit+0x44>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	61d3      	str	r3, [r2, #28]
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <HAL_TIM_Base_MspInit+0x44>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	201c      	movs	r0, #28
 8000f8c:	f000 ff65 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f90:	201c      	movs	r0, #28
 8000f92:	f000 ff7e 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <NMI_Handler+0x4>

08000faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <HardFault_Handler+0x4>

08000fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <MemManage_Handler+0x4>

08000fb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr

08000fce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr

08000fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr

08000fe6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fea:	f000 fa3b 	bl	8001464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ff8:	4807      	ldr	r0, [pc, #28]	; (8001018 <ADC1_2_IRQHandler+0x24>)
 8000ffa:	f000 fbe9 	bl	80017d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
  ADCReading = HAL_ADC_GetValue(&hadc1);
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <ADC1_2_IRQHandler+0x24>)
 8001000:	f000 fbda 	bl	80017b8 <HAL_ADC_GetValue>
 8001004:	4603      	mov	r3, r0
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff f968 	bl	80002dc <__aeabi_ui2f>
 800100c:	4603      	mov	r3, r0
 800100e:	4a03      	ldr	r2, [pc, #12]	; (800101c <ADC1_2_IRQHandler+0x28>)
 8001010:	6013      	str	r3, [r2, #0]
  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000008c 	.word	0x2000008c
 800101c:	20000104 	.word	0x20000104

08001020 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001024:	4806      	ldr	r0, [pc, #24]	; (8001040 <TIM2_IRQHandler+0x20>)
 8001026:	f001 fe45 	bl	8002cb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800102a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <TIM2_IRQHandler+0x24>)
 8001030:	f001 f8e6 	bl	8002200 <HAL_GPIO_TogglePin>
  HAL_ADC_Start_IT(&hadc1);
 8001034:	4804      	ldr	r0, [pc, #16]	; (8001048 <TIM2_IRQHandler+0x28>)
 8001036:	f000 fb09 	bl	800164c <HAL_ADC_Start_IT>
  /* USER CODE END TIM2_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200000bc 	.word	0x200000bc
 8001044:	40011000 	.word	0x40011000
 8001048:	2000008c 	.word	0x2000008c

0800104c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001054:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <_sbrk+0x5c>)
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <_sbrk+0x60>)
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <_sbrk+0x64>)
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <_sbrk+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	429a      	cmp	r2, r3
 800107a:	d207      	bcs.n	800108c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800107c:	f002 f97e 	bl	800337c <__errno>
 8001080:	4603      	mov	r3, r0
 8001082:	220c      	movs	r2, #12
 8001084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	e009      	b.n	80010a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <_sbrk+0x64>)
 800109c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20005000 	.word	0x20005000
 80010ac:	00000400 	.word	0x00000400
 80010b0:	20000108 	.word	0x20000108
 80010b4:	20000120 	.word	0x20000120

080010b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <Reset_Handler>:

void Reset_Handler(void);

//implemento reset handler
void Reset_Handler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
	uint32_t *datalnit = &_sidata;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <Reset_Handler+0x4c>)
 80010cc:	60fb      	str	r3, [r7, #12]
    uint32_t *data = &_sdata;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <Reset_Handler+0x50>)
 80010d0:	60bb      	str	r3, [r7, #8]
	while(data < &_edata) {
 80010d2:	e007      	b.n	80010e4 <Reset_Handler+0x20>
		*data++ = *datalnit++;
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	1d13      	adds	r3, r2, #4
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	1d19      	adds	r1, r3, #4
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	6812      	ldr	r2, [r2, #0]
 80010e2:	601a      	str	r2, [r3, #0]
	while(data < &_edata) {
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4a0c      	ldr	r2, [pc, #48]	; (8001118 <Reset_Handler+0x54>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d3f3      	bcc.n	80010d4 <Reset_Handler+0x10>
	}
	
	uint32_t *bss = &_sbss;
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <Reset_Handler+0x58>)
 80010ee:	607b      	str	r3, [r7, #4]
	while(bss < &_ebss) {
 80010f0:	e004      	b.n	80010fc <Reset_Handler+0x38>
		*bss++ = 0;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	1d1a      	adds	r2, r3, #4
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
	while(bss < &_ebss) {
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a08      	ldr	r2, [pc, #32]	; (8001120 <Reset_Handler+0x5c>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d3f6      	bcc.n	80010f2 <Reset_Handler+0x2e>
	}
	
	SystemInit();
 8001104:	f7ff ffd8 	bl	80010b8 <SystemInit>

	//finalmente, llamo a main
	main();
 8001108:	f7ff fd1e 	bl	8000b48 <main>
	
	while(1);
 800110c:	e7fe      	b.n	800110c <Reset_Handler+0x48>
 800110e:	bf00      	nop
 8001110:	08003d34 	.word	0x08003d34
 8001114:	20000000 	.word	0x20000000
 8001118:	20000070 	.word	0x20000070
 800111c:	20000070 	.word	0x20000070
 8001120:	20000120 	.word	0x20000120

08001124 <Default_Handler>:
}

void Default_Handler(void) {
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
    while(1);
 8001128:	e7fe      	b.n	8001128 <Default_Handler+0x4>

0800112a <WWDG_IRQHandler>:
__attribute__((weak)) void UsageFault_Handler (void) { Default_Handler(); }
__attribute__((weak)) void SVC_Handler (void) { Default_Handler(); }
__attribute__((weak)) void DebugMon_Handler (void) { Default_Handler(); }
__attribute__((weak)) void PendSV_Handler (void) { Default_Handler(); }
__attribute__((weak)) void SysTick_Handler (void) { Default_Handler(); }
__attribute__((weak)) void WWDG_IRQHandler (void) { Default_Handler(); }          			/* Window Watchdog interrupt                        */
 800112a:	b580      	push	{r7, lr}
 800112c:	af00      	add	r7, sp, #0
 800112e:	f7ff fff9 	bl	8001124 <Default_Handler>
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}

08001136 <PVD_IRQHandler>:
__attribute__((weak)) void PVD_IRQHandler (void) { Default_Handler(); }          			/* PVD through EXTI line detection interrupt        */
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
 800113a:	f7ff fff3 	bl	8001124 <Default_Handler>
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}

08001142 <TAMPER_IRQHandler>:
__attribute__((weak)) void TAMPER_IRQHandler (void) { Default_Handler(); }       			/* Tamper interrupt                                 */
 8001142:	b580      	push	{r7, lr}
 8001144:	af00      	add	r7, sp, #0
 8001146:	f7ff ffed 	bl	8001124 <Default_Handler>
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}

0800114e <RTC_IRQHandler>:
__attribute__((weak)) void RTC_IRQHandler (void) { Default_Handler(); }          			/* RTC global interrupt                             */
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
 8001152:	f7ff ffe7 	bl	8001124 <Default_Handler>
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}

0800115a <FLASH_IRQHandler>:
__attribute__((weak)) void FLASH_IRQHandler (void) { Default_Handler(); }        			/* Flash global interrupt                           */
 800115a:	b580      	push	{r7, lr}
 800115c:	af00      	add	r7, sp, #0
 800115e:	f7ff ffe1 	bl	8001124 <Default_Handler>
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}

08001166 <RCC_IRQHandler>:
__attribute__((weak)) void RCC_IRQHandler (void) { Default_Handler(); }          			/* RCC global interrupt                             */
 8001166:	b580      	push	{r7, lr}
 8001168:	af00      	add	r7, sp, #0
 800116a:	f7ff ffdb 	bl	8001124 <Default_Handler>
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}

08001172 <EXTI0_IRQHandler>:
__attribute__((weak)) void EXTI0_IRQHandler (void) { Default_Handler(); }        			/* EXTI Line0 interrupt                             */
 8001172:	b580      	push	{r7, lr}
 8001174:	af00      	add	r7, sp, #0
 8001176:	f7ff ffd5 	bl	8001124 <Default_Handler>
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}

0800117e <EXTI1_IRQHandler>:
__attribute__((weak)) void EXTI1_IRQHandler (void) { Default_Handler(); }        			/* EXTI Line1 interrupt                             */
 800117e:	b580      	push	{r7, lr}
 8001180:	af00      	add	r7, sp, #0
 8001182:	f7ff ffcf 	bl	8001124 <Default_Handler>
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}

0800118a <EXTI2_IRQHandler>:
__attribute__((weak)) void EXTI2_IRQHandler (void) { Default_Handler(); }        			/* EXTI Line2 interrupt                             */
 800118a:	b580      	push	{r7, lr}
 800118c:	af00      	add	r7, sp, #0
 800118e:	f7ff ffc9 	bl	8001124 <Default_Handler>
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}

08001196 <EXTI3_IRQHandler>:
__attribute__((weak)) void EXTI3_IRQHandler (void) { Default_Handler(); }        			/* EXTI Line3 interrupt                             */
 8001196:	b580      	push	{r7, lr}
 8001198:	af00      	add	r7, sp, #0
 800119a:	f7ff ffc3 	bl	8001124 <Default_Handler>
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <EXTI4_IRQHandler>:
__attribute__((weak)) void EXTI4_IRQHandler (void) { Default_Handler(); }        			/* EXTI Line4 interrupt                             */
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	f7ff ffbd 	bl	8001124 <Default_Handler>
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}

080011ae <DMA1_Channel1_IRQHandler>:
__attribute__((weak)) void DMA1_Channel1_IRQHandler (void) { Default_Handler(); } 			/* DMA1 Channel1 global interrupt                   */
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	f7ff ffb7 	bl	8001124 <Default_Handler>
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}

080011ba <DMA1_Channel2_IRQHandler>:
__attribute__((weak)) void DMA1_Channel2_IRQHandler (void) { Default_Handler(); } 			/* DMA1 Channel2 global interrupt                   */
 80011ba:	b580      	push	{r7, lr}
 80011bc:	af00      	add	r7, sp, #0
 80011be:	f7ff ffb1 	bl	8001124 <Default_Handler>
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <DMA1_Channel3_IRQHandler>:
__attribute__((weak)) void DMA1_Channel3_IRQHandler (void) { Default_Handler(); }			/* DMA1 Channel3 global interrupt                   */
 80011c6:	b580      	push	{r7, lr}
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	f7ff ffab 	bl	8001124 <Default_Handler>
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <DMA1_Channel4_IRQHandler>:
__attribute__((weak)) void DMA1_Channel4_IRQHandler (void) { Default_Handler(); }			/* DMA1 Channel4 global interrupt                   */
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	f7ff ffa5 	bl	8001124 <Default_Handler>
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}

080011de <DMA1_Channel5_IRQHandler>:
__attribute__((weak)) void DMA1_Channel5_IRQHandler (void) { Default_Handler(); }			/* DMA1 Channel5 global interrupt                   */
 80011de:	b580      	push	{r7, lr}
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	f7ff ff9f 	bl	8001124 <Default_Handler>
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}

080011ea <DMA1_Channel6_IRQHandler>:
__attribute__((weak)) void DMA1_Channel6_IRQHandler (void) { Default_Handler(); }			/* DMA1 Channel6 global interrupt                   */
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	f7ff ff99 	bl	8001124 <Default_Handler>
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <DMA1_Channel7_IRQHandler>:
__attribute__((weak)) void DMA1_Channel7_IRQHandler (void) { Default_Handler(); }			/* DMA1 Channel7 global interrupt                   */
 80011f6:	b580      	push	{r7, lr}
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	f7ff ff93 	bl	8001124 <Default_Handler>
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}

08001202 <USB_HP_CAN_TX_IRQHandler>:
__attribute__((weak)) void ADC1_2_IRQHandler (void) { Default_Handler(); }       			/* ADC1 and ADC2 global interrupt                   */
__attribute__((weak)) void USB_HP_CAN_TX_IRQHandler (void) { Default_Handler(); }			/* USB High Priority or CAN TX interrupts           */
 8001202:	b580      	push	{r7, lr}
 8001204:	af00      	add	r7, sp, #0
 8001206:	f7ff ff8d 	bl	8001124 <Default_Handler>
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}

0800120e <USB_LP_CAN_RX0_IRQHandler>:
__attribute__((weak)) void USB_LP_CAN_RX0_IRQHandler (void) { Default_Handler(); }			/* USB Low Priority or CAN RX0 interrupts           */
 800120e:	b580      	push	{r7, lr}
 8001210:	af00      	add	r7, sp, #0
 8001212:	f7ff ff87 	bl	8001124 <Default_Handler>
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}

0800121a <CAN_RX1_IRQHandler>:
__attribute__((weak)) void CAN_RX1_IRQHandler (void) { Default_Handler(); }      			/* CAN RX1 interrupt                                */
 800121a:	b580      	push	{r7, lr}
 800121c:	af00      	add	r7, sp, #0
 800121e:	f7ff ff81 	bl	8001124 <Default_Handler>
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}

08001226 <CAN_SCE_IRQHandler>:
__attribute__((weak)) void CAN_SCE_IRQHandler (void) { Default_Handler(); }      			/* CAN SCE interrupt                                */
 8001226:	b580      	push	{r7, lr}
 8001228:	af00      	add	r7, sp, #0
 800122a:	f7ff ff7b 	bl	8001124 <Default_Handler>
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}

08001232 <EXTI9_5_IRQHandler>:
__attribute__((weak)) void EXTI9_5_IRQHandler (void) { Default_Handler(); }      			/* EXTI Line[9:5] interrupts                        */
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
 8001236:	f7ff ff75 	bl	8001124 <Default_Handler>
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}

0800123e <TIM1_BRK_IRQHandler>:
__attribute__((weak)) void TIM1_BRK_IRQHandler (void) { Default_Handler(); }     			/* TIM1 Break interrupt                             */
 800123e:	b580      	push	{r7, lr}
 8001240:	af00      	add	r7, sp, #0
 8001242:	f7ff ff6f 	bl	8001124 <Default_Handler>
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}

0800124a <TIM1_UP_IRQHandler>:
__attribute__((weak)) void TIM1_UP_IRQHandler (void) { Default_Handler(); }      			/* TIM1 Update interrupt                            */
 800124a:	b580      	push	{r7, lr}
 800124c:	af00      	add	r7, sp, #0
 800124e:	f7ff ff69 	bl	8001124 <Default_Handler>
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}

08001256 <TIM1_TRG_COM_IRQHandler>:
__attribute__((weak)) void TIM1_TRG_COM_IRQHandler (void) { Default_Handler(); }  			/* TIM1 Trigger and Commutation interrupts          */
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0
 800125a:	f7ff ff63 	bl	8001124 <Default_Handler>
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}

08001262 <TIM1_CC_IRQHandler>:
__attribute__((weak)) void TIM1_CC_IRQHandler (void) { Default_Handler(); }       			/* TIM1 Capture Compare interrupt                   */
 8001262:	b580      	push	{r7, lr}
 8001264:	af00      	add	r7, sp, #0
 8001266:	f7ff ff5d 	bl	8001124 <Default_Handler>
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}

0800126e <TIM3_IRQHandler>:
__attribute__((weak)) void TIM2_IRQHandler (void) { Default_Handler(); }          			/* TIM2 global interrupt                            */
__attribute__((weak)) void TIM3_IRQHandler (void) { Default_Handler(); }         			/* TIM3 global interrupt                            */
 800126e:	b580      	push	{r7, lr}
 8001270:	af00      	add	r7, sp, #0
 8001272:	f7ff ff57 	bl	8001124 <Default_Handler>
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}

0800127a <TIM4_IRQHandler>:
__attribute__((weak)) void TIM4_IRQHandler (void) { Default_Handler(); }        	    	/* TIM4 global interrupt                            */
 800127a:	b580      	push	{r7, lr}
 800127c:	af00      	add	r7, sp, #0
 800127e:	f7ff ff51 	bl	8001124 <Default_Handler>
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}

08001286 <I2C1_EV_IRQHandler>:
__attribute__((weak)) void I2C1_EV_IRQHandler (void) { Default_Handler(); }      			/* I2C1 event interrupt                             */
 8001286:	b580      	push	{r7, lr}
 8001288:	af00      	add	r7, sp, #0
 800128a:	f7ff ff4b 	bl	8001124 <Default_Handler>
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}

08001292 <I2C1_ER_IRQHandler>:
__attribute__((weak)) void I2C1_ER_IRQHandler (void) { Default_Handler(); }      			/* I2C1 error interrupt                             */
 8001292:	b580      	push	{r7, lr}
 8001294:	af00      	add	r7, sp, #0
 8001296:	f7ff ff45 	bl	8001124 <Default_Handler>
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}

0800129e <I2C2_EV_IRQHandler>:
__attribute__((weak)) void I2C2_EV_IRQHandler (void) { Default_Handler(); }      			/* I2C2 event interrupt                             */
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	f7ff ff3f 	bl	8001124 <Default_Handler>
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}

080012aa <I2C2_ER_IRQHandler>:
__attribute__((weak)) void I2C2_ER_IRQHandler (void) { Default_Handler(); }      			/* I2C2 error interrupt                             */
 80012aa:	b580      	push	{r7, lr}
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	f7ff ff39 	bl	8001124 <Default_Handler>
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <SPI1_IRQHandler>:
__attribute__((weak)) void SPI1_IRQHandler (void) { Default_Handler(); }         			/* SPI1 global interrupt                            */
 80012b6:	b580      	push	{r7, lr}
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	f7ff ff33 	bl	8001124 <Default_Handler>
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <SPI2_IRQHandler>:
__attribute__((weak)) void SPI2_IRQHandler (void) { Default_Handler(); }         			/* SPI2 global interrupt                            */
 80012c2:	b580      	push	{r7, lr}
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	f7ff ff2d 	bl	8001124 <Default_Handler>
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}

080012ce <USART1_IRQHandler>:
__attribute__((weak)) void USART1_IRQHandler (void) { Default_Handler(); }        			/* USART1 global interrupt                          */
 80012ce:	b580      	push	{r7, lr}
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	f7ff ff27 	bl	8001124 <Default_Handler>
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}

080012da <USART2_IRQHandler>:
__attribute__((weak)) void USART2_IRQHandler (void) { Default_Handler(); }       			/* USART2 global interrupt                          */
 80012da:	b580      	push	{r7, lr}
 80012dc:	af00      	add	r7, sp, #0
 80012de:	f7ff ff21 	bl	8001124 <Default_Handler>
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <USART3_IRQHandler>:
__attribute__((weak)) void USART3_IRQHandler (void) { Default_Handler(); }       			/* USART3 global interrupt                          */
 80012e6:	b580      	push	{r7, lr}
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	f7ff ff1b 	bl	8001124 <Default_Handler>
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <EXTI15_10_IRQHandler>:
__attribute__((weak)) void EXTI15_10_IRQHandler (void) { Default_Handler(); }    			/* EXTI Line[15:10] interrupts                      */
 80012f2:	b580      	push	{r7, lr}
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	f7ff ff15 	bl	8001124 <Default_Handler>
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}

080012fe <RTCAlarm_IRQHandler>:
__attribute__((weak)) void RTCAlarm_IRQHandler (void) { Default_Handler(); }     			/* RTC Alarms through EXTI line interrupt           */
 80012fe:	b580      	push	{r7, lr}
 8001300:	af00      	add	r7, sp, #0
 8001302:	f7ff ff0f 	bl	8001124 <Default_Handler>
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}

0800130a <TIM8_BRK_IRQHandler>:
__attribute__((weak)) void TIM8_BRK_IRQHandler (void) { Default_Handler(); }     			/* TIM8 Break interrupt                             */
 800130a:	b580      	push	{r7, lr}
 800130c:	af00      	add	r7, sp, #0
 800130e:	f7ff ff09 	bl	8001124 <Default_Handler>
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}

08001316 <TIM8_UP_IRQHandler>:
__attribute__((weak)) void TIM8_UP_IRQHandler (void) { Default_Handler(); }      			/* TIM8 Update interrupt                            */
 8001316:	b580      	push	{r7, lr}
 8001318:	af00      	add	r7, sp, #0
 800131a:	f7ff ff03 	bl	8001124 <Default_Handler>
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}

08001322 <TIM8_TRG_COM_IRQHandler>:
__attribute__((weak)) void TIM8_TRG_COM_IRQHandler (void) { Default_Handler(); } 			/* TIM8 Trigger and Commutation interrupts          */
 8001322:	b580      	push	{r7, lr}
 8001324:	af00      	add	r7, sp, #0
 8001326:	f7ff fefd 	bl	8001124 <Default_Handler>
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}

0800132e <TIM8_CC_IRQHandler>:
__attribute__((weak)) void TIM8_CC_IRQHandler (void) { Default_Handler(); }      			/* TIM8 Capture Compare interrupt                   */
 800132e:	b580      	push	{r7, lr}
 8001330:	af00      	add	r7, sp, #0
 8001332:	f7ff fef7 	bl	8001124 <Default_Handler>
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}

0800133a <ADC3_IRQHandler>:
__attribute__((weak)) void ADC3_IRQHandler (void) { Default_Handler(); }         			/* ADC3 global interrupt                            */
 800133a:	b580      	push	{r7, lr}
 800133c:	af00      	add	r7, sp, #0
 800133e:	f7ff fef1 	bl	8001124 <Default_Handler>
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}

08001346 <FSMC_IRQHandler>:
__attribute__((weak)) void FSMC_IRQHandler (void) { Default_Handler(); }         			/* FSMC global interrupt                            */
 8001346:	b580      	push	{r7, lr}
 8001348:	af00      	add	r7, sp, #0
 800134a:	f7ff feeb 	bl	8001124 <Default_Handler>
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}

08001352 <SDIO_IRQHandler>:
__attribute__((weak)) void SDIO_IRQHandler (void) { Default_Handler(); }         			/* SDIO global interrupt                            */
 8001352:	b580      	push	{r7, lr}
 8001354:	af00      	add	r7, sp, #0
 8001356:	f7ff fee5 	bl	8001124 <Default_Handler>
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}

0800135e <TIM5_IRQHandler>:
__attribute__((weak)) void TIM5_IRQHandler (void) { Default_Handler(); }         			/* TIM5 global interrupt                            */
 800135e:	b580      	push	{r7, lr}
 8001360:	af00      	add	r7, sp, #0
 8001362:	f7ff fedf 	bl	8001124 <Default_Handler>
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}

0800136a <SPI3_IRQHandler>:
__attribute__((weak)) void SPI3_IRQHandler (void) { Default_Handler(); }         			/* SPI3 global interrupt                            */
 800136a:	b580      	push	{r7, lr}
 800136c:	af00      	add	r7, sp, #0
 800136e:	f7ff fed9 	bl	8001124 <Default_Handler>
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}

08001376 <UART4_IRQHandler>:
__attribute__((weak)) void UART4_IRQHandler (void) { Default_Handler(); }        			/* UART4 global interrupt                           */
 8001376:	b580      	push	{r7, lr}
 8001378:	af00      	add	r7, sp, #0
 800137a:	f7ff fed3 	bl	8001124 <Default_Handler>
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}

08001382 <UART5_IRQHandler>:
__attribute__((weak)) void UART5_IRQHandler (void) { Default_Handler(); }        			/* UART5 global interrupt                           */
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
 8001386:	f7ff fecd 	bl	8001124 <Default_Handler>
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}

0800138e <TIM6_IRQHandler>:
__attribute__((weak)) void TIM6_IRQHandler (void) { Default_Handler(); }         			/* TIM6 global interrupt                            */
 800138e:	b580      	push	{r7, lr}
 8001390:	af00      	add	r7, sp, #0
 8001392:	f7ff fec7 	bl	8001124 <Default_Handler>
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}

0800139a <TIM7_IRQHandler>:
__attribute__((weak)) void TIM7_IRQHandler (void) { Default_Handler(); }         			/* TIM7 global interrupt                            */
 800139a:	b580      	push	{r7, lr}
 800139c:	af00      	add	r7, sp, #0
 800139e:	f7ff fec1 	bl	8001124 <Default_Handler>
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <DMA2_Channel1_IRQHandler>:
__attribute__((weak)) void DMA2_Channel1_IRQHandler (void) { Default_Handler(); }			/* DMA2 Channel1 global interrupt                   */
 80013a6:	b580      	push	{r7, lr}
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	f7ff febb 	bl	8001124 <Default_Handler>
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <DMA2_Channel2_IRQHandler>:
__attribute__((weak)) void DMA2_Channel2_IRQHandler (void) { Default_Handler(); }			/* DMA2 Channel2 global interrupt                   */
 80013b2:	b580      	push	{r7, lr}
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	f7ff feb5 	bl	8001124 <Default_Handler>
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}

080013be <DMA2_Channel3_IRQHandler>:
__attribute__((weak)) void DMA2_Channel3_IRQHandler (void) { Default_Handler(); }			/* DMA2 Channel3 global interrupt                   */
 80013be:	b580      	push	{r7, lr}
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	f7ff feaf 	bl	8001124 <Default_Handler>
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}

080013ca <DMA2_Channel4_5_IRQHandler>:
__attribute__((weak)) void DMA2_Channel4_5_IRQHandler (void) { Default_Handler(); }			/* DMA2 Channel4 and DMA2 Channel5 global interrupt */
 80013ca:	b580      	push	{r7, lr}
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	f7ff fea9 	bl	8001124 <Default_Handler>
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_Init+0x28>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <HAL_Init+0x28>)
 80013e2:	f043 0310 	orr.w	r3, r3, #16
 80013e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e8:	2003      	movs	r0, #3
 80013ea:	f000 fd2b 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f000 f808 	bl	8001404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f4:	f7ff fd3c 	bl	8000e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40022000 	.word	0x40022000

08001404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_InitTick+0x54>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_InitTick+0x58>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4619      	mov	r1, r3
 8001416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141a:	fbb3 f3f1 	udiv	r3, r3, r1
 800141e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f000 fd43 	bl	8001eae <HAL_SYSTICK_Config>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e00e      	b.n	8001450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b0f      	cmp	r3, #15
 8001436:	d80a      	bhi.n	800144e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001438:	2200      	movs	r2, #0
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f000 fd0b 	bl	8001e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001444:	4a06      	ldr	r2, [pc, #24]	; (8001460 <HAL_InitTick+0x5c>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	e000      	b.n	8001450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000000 	.word	0x20000000
 800145c:	20000008 	.word	0x20000008
 8001460:	20000004 	.word	0x20000004

08001464 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_IncTick+0x1c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <HAL_IncTick+0x20>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4413      	add	r3, r2
 8001474:	4a03      	ldr	r2, [pc, #12]	; (8001484 <HAL_IncTick+0x20>)
 8001476:	6013      	str	r3, [r2, #0]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	20000008 	.word	0x20000008
 8001484:	2000010c 	.word	0x2000010c

08001488 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;
 800148c:	4b02      	ldr	r3, [pc, #8]	; (8001498 <HAL_GetTick+0x10>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	2000010c 	.word	0x2000010c

0800149c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e0be      	b.n	800163c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d109      	bne.n	80014e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff fcfa 	bl	8000ed4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 fb99 	bl	8001c18 <ADC_ConversionStop_Disable>
 80014e6:	4603      	mov	r3, r0
 80014e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ee:	f003 0310 	and.w	r3, r3, #16
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f040 8099 	bne.w	800162a <HAL_ADC_Init+0x18e>
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f040 8095 	bne.w	800162a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001504:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001508:	f023 0302 	bic.w	r3, r3, #2
 800150c:	f043 0202 	orr.w	r2, r3, #2
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800151c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	7b1b      	ldrb	r3, [r3, #12]
 8001522:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001524:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	4313      	orrs	r3, r2
 800152a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001534:	d003      	beq.n	800153e <HAL_ADC_Init+0xa2>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d102      	bne.n	8001544 <HAL_ADC_Init+0xa8>
 800153e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001542:	e000      	b.n	8001546 <HAL_ADC_Init+0xaa>
 8001544:	2300      	movs	r3, #0
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	7d1b      	ldrb	r3, [r3, #20]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d119      	bne.n	8001588 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7b1b      	ldrb	r3, [r3, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d109      	bne.n	8001570 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	3b01      	subs	r3, #1
 8001562:	035a      	lsls	r2, r3, #13
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	e00b      	b.n	8001588 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	f043 0220 	orr.w	r2, r3, #32
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	f043 0201 	orr.w	r2, r3, #1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	430a      	orrs	r2, r1
 800159a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	4b28      	ldr	r3, [pc, #160]	; (8001644 <HAL_ADC_Init+0x1a8>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	68b9      	ldr	r1, [r7, #8]
 80015ac:	430b      	orrs	r3, r1
 80015ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015b8:	d003      	beq.n	80015c2 <HAL_ADC_Init+0x126>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d104      	bne.n	80015cc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	051b      	lsls	r3, r3, #20
 80015ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	430a      	orrs	r2, r1
 80015de:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_ADC_Init+0x1ac>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d10b      	bne.n	8001608 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fa:	f023 0303 	bic.w	r3, r3, #3
 80015fe:	f043 0201 	orr.w	r2, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001606:	e018      	b.n	800163a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	f023 0312 	bic.w	r3, r3, #18
 8001610:	f043 0210 	orr.w	r2, r3, #16
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161c:	f043 0201 	orr.w	r2, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001628:	e007      	b.n	800163a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162e:	f043 0210 	orr.w	r2, r3, #16
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800163a:	7dfb      	ldrb	r3, [r7, #23]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	ffe1f7fd 	.word	0xffe1f7fd
 8001648:	ff1f0efe 	.word	0xff1f0efe

0800164c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <HAL_ADC_Start_IT+0x1a>
 8001662:	2302      	movs	r3, #2
 8001664:	e0a0      	b.n	80017a8 <HAL_ADC_Start_IT+0x15c>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 fa78 	bl	8001b64 <ADC_Enable>
 8001674:	4603      	mov	r3, r0
 8001676:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f040 808f 	bne.w	800179e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001684:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001688:	f023 0301 	bic.w	r3, r3, #1
 800168c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a45      	ldr	r2, [pc, #276]	; (80017b0 <HAL_ADC_Start_IT+0x164>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d105      	bne.n	80016aa <HAL_ADC_Start_IT+0x5e>
 800169e:	4b45      	ldr	r3, [pc, #276]	; (80017b4 <HAL_ADC_Start_IT+0x168>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d115      	bne.n	80016d6 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d026      	beq.n	8001712 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016d4:	e01d      	b.n	8001712 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a33      	ldr	r2, [pc, #204]	; (80017b4 <HAL_ADC_Start_IT+0x168>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d004      	beq.n	80016f6 <HAL_ADC_Start_IT+0xaa>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a2f      	ldr	r2, [pc, #188]	; (80017b0 <HAL_ADC_Start_IT+0x164>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d10d      	bne.n	8001712 <HAL_ADC_Start_IT+0xc6>
 80016f6:	4b2f      	ldr	r3, [pc, #188]	; (80017b4 <HAL_ADC_Start_IT+0x168>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d007      	beq.n	8001712 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800170a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d006      	beq.n	800172c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	f023 0206 	bic.w	r2, r3, #6
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	62da      	str	r2, [r3, #44]	; 0x2c
 800172a:	e002      	b.n	8001732 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f06f 0202 	mvn.w	r2, #2
 8001742:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 0220 	orr.w	r2, r2, #32
 8001752:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800175e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001762:	d113      	bne.n	800178c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001768:	4a11      	ldr	r2, [pc, #68]	; (80017b0 <HAL_ADC_Start_IT+0x164>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d105      	bne.n	800177a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_ADC_Start_IT+0x168>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001776:	2b00      	cmp	r3, #0
 8001778:	d108      	bne.n	800178c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	e00c      	b.n	80017a6 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	e003      	b.n	80017a6 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40012800 	.word	0x40012800
 80017b4:	40012400 	.word	0x40012400

080017b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	f003 0320 	and.w	r3, r3, #32
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d03e      	beq.n	8001870 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d039      	beq.n	8001870 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001800:	f003 0310 	and.w	r3, r3, #16
 8001804:	2b00      	cmp	r3, #0
 8001806:	d105      	bne.n	8001814 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800181e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001822:	d11d      	bne.n	8001860 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001828:	2b00      	cmp	r3, #0
 800182a:	d119      	bne.n	8001860 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0220 	bic.w	r2, r2, #32
 800183a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001840:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d105      	bne.n	8001860 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	f043 0201 	orr.w	r2, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f874 	bl	800194e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f06f 0212 	mvn.w	r2, #18
 800186e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001876:	2b00      	cmp	r3, #0
 8001878:	d04d      	beq.n	8001916 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d048      	beq.n	8001916 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001888:	f003 0310 	and.w	r3, r3, #16
 800188c:	2b00      	cmp	r3, #0
 800188e:	d105      	bne.n	800189c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001894:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80018a6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80018aa:	d012      	beq.n	80018d2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d125      	bne.n	8001906 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80018c4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018c8:	d11d      	bne.n	8001906 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d119      	bne.n	8001906 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018e0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d105      	bne.n	8001906 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	f043 0201 	orr.w	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f9c7 	bl	8001c9a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f06f 020c 	mvn.w	r2, #12
 8001914:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191c:	2b00      	cmp	r3, #0
 800191e:	d012      	beq.n	8001946 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00d      	beq.n	8001946 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f812 	bl	8001960 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f06f 0201 	mvn.w	r2, #1
 8001944:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
	...

08001974 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x20>
 8001990:	2302      	movs	r3, #2
 8001992:	e0dc      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x1da>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b06      	cmp	r3, #6
 80019a2:	d81c      	bhi.n	80019de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	3b05      	subs	r3, #5
 80019b6:	221f      	movs	r2, #31
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	4019      	ands	r1, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	3b05      	subs	r3, #5
 80019d0:	fa00 f203 	lsl.w	r2, r0, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	635a      	str	r2, [r3, #52]	; 0x34
 80019dc:	e03c      	b.n	8001a58 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b0c      	cmp	r3, #12
 80019e4:	d81c      	bhi.n	8001a20 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	3b23      	subs	r3, #35	; 0x23
 80019f8:	221f      	movs	r2, #31
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	4019      	ands	r1, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	3b23      	subs	r3, #35	; 0x23
 8001a12:	fa00 f203 	lsl.w	r2, r0, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a1e:	e01b      	b.n	8001a58 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	3b41      	subs	r3, #65	; 0x41
 8001a32:	221f      	movs	r2, #31
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	4019      	ands	r1, r3
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	3b41      	subs	r3, #65	; 0x41
 8001a4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b09      	cmp	r3, #9
 8001a5e:	d91c      	bls.n	8001a9a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68d9      	ldr	r1, [r3, #12]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	4413      	add	r3, r2
 8001a70:	3b1e      	subs	r3, #30
 8001a72:	2207      	movs	r2, #7
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	4019      	ands	r1, r3
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	6898      	ldr	r0, [r3, #8]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4613      	mov	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4413      	add	r3, r2
 8001a8a:	3b1e      	subs	r3, #30
 8001a8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	e019      	b.n	8001ace <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6919      	ldr	r1, [r3, #16]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	2207      	movs	r2, #7
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	4019      	ands	r1, r3
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	6898      	ldr	r0, [r3, #8]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b10      	cmp	r3, #16
 8001ad4:	d003      	beq.n	8001ade <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ada:	2b11      	cmp	r3, #17
 8001adc:	d132      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a1d      	ldr	r2, [pc, #116]	; (8001b58 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d125      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d126      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b04:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b10      	cmp	r3, #16
 8001b0c:	d11a      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b0e:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <HAL_ADC_ConfigChannel+0x1e8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a13      	ldr	r2, [pc, #76]	; (8001b60 <HAL_ADC_ConfigChannel+0x1ec>)
 8001b14:	fba2 2303 	umull	r2, r3, r2, r3
 8001b18:	0c9a      	lsrs	r2, r3, #18
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b24:	e002      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f9      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x1b2>
 8001b32:	e007      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b38:	f043 0220 	orr.w	r2, r3, #32
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	40012400 	.word	0x40012400
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	431bde83 	.word	0x431bde83

08001b64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d040      	beq.n	8001c04 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0201 	orr.w	r2, r2, #1
 8001b90:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b92:	4b1f      	ldr	r3, [pc, #124]	; (8001c10 <ADC_Enable+0xac>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a1f      	ldr	r2, [pc, #124]	; (8001c14 <ADC_Enable+0xb0>)
 8001b98:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9c:	0c9b      	lsrs	r3, r3, #18
 8001b9e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ba0:	e002      	b.n	8001ba8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f9      	bne.n	8001ba2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bae:	f7ff fc6b 	bl	8001488 <HAL_GetTick>
 8001bb2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bb4:	e01f      	b.n	8001bf6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bb6:	f7ff fc67 	bl	8001488 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d918      	bls.n	8001bf6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d011      	beq.n	8001bf6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd6:	f043 0210 	orr.w	r2, r3, #16
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be2:	f043 0201 	orr.w	r2, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e007      	b.n	8001c06 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d1d8      	bne.n	8001bb6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000000 	.word	0x20000000
 8001c14:	431bde83 	.word	0x431bde83

08001c18 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d12e      	bne.n	8001c90 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0201 	bic.w	r2, r2, #1
 8001c40:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c42:	f7ff fc21 	bl	8001488 <HAL_GetTick>
 8001c46:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c48:	e01b      	b.n	8001c82 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c4a:	f7ff fc1d 	bl	8001488 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d914      	bls.n	8001c82 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d10d      	bne.n	8001c82 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6a:	f043 0210 	orr.w	r2, r3, #16
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c76:	f043 0201 	orr.w	r2, r3, #1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e007      	b.n	8001c92 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d0dc      	beq.n	8001c4a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cde:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	60d3      	str	r3, [r2, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db0b      	blt.n	8001d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	f003 021f 	and.w	r2, r3, #31
 8001d28:	4906      	ldr	r1, [pc, #24]	; (8001d44 <__NVIC_EnableIRQ+0x34>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2001      	movs	r0, #1
 8001d32:	fa00 f202 	lsl.w	r2, r0, r2
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	; (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	; (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e10:	d301      	bcc.n	8001e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00f      	b.n	8001e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <SysTick_Config+0x40>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1e:	210f      	movs	r1, #15
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	f7ff ff90 	bl	8001d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <SysTick_Config+0x40>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2e:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <SysTick_Config+0x40>)
 8001e30:	2207      	movs	r2, #7
 8001e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	e000e010 	.word	0xe000e010

08001e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff2d 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6c:	f7ff ff42 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff90 	bl	8001d9c <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5f 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff35 	bl	8001d10 <__NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffa2 	bl	8001e00 <SysTick_Config>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b08b      	sub	sp, #44	; 0x2c
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eda:	e169      	b.n	80021b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001edc:	2201      	movs	r2, #1
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	f040 8158 	bne.w	80021aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4a9a      	ldr	r2, [pc, #616]	; (8002168 <HAL_GPIO_Init+0x2a0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d05e      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
 8001f04:	4a98      	ldr	r2, [pc, #608]	; (8002168 <HAL_GPIO_Init+0x2a0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d875      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f0a:	4a98      	ldr	r2, [pc, #608]	; (800216c <HAL_GPIO_Init+0x2a4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d058      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
 8001f10:	4a96      	ldr	r2, [pc, #600]	; (800216c <HAL_GPIO_Init+0x2a4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d86f      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f16:	4a96      	ldr	r2, [pc, #600]	; (8002170 <HAL_GPIO_Init+0x2a8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d052      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
 8001f1c:	4a94      	ldr	r2, [pc, #592]	; (8002170 <HAL_GPIO_Init+0x2a8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d869      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f22:	4a94      	ldr	r2, [pc, #592]	; (8002174 <HAL_GPIO_Init+0x2ac>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d04c      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
 8001f28:	4a92      	ldr	r2, [pc, #584]	; (8002174 <HAL_GPIO_Init+0x2ac>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d863      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f2e:	4a92      	ldr	r2, [pc, #584]	; (8002178 <HAL_GPIO_Init+0x2b0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d046      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
 8001f34:	4a90      	ldr	r2, [pc, #576]	; (8002178 <HAL_GPIO_Init+0x2b0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d85d      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f3a:	2b12      	cmp	r3, #18
 8001f3c:	d82a      	bhi.n	8001f94 <HAL_GPIO_Init+0xcc>
 8001f3e:	2b12      	cmp	r3, #18
 8001f40:	d859      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f42:	a201      	add	r2, pc, #4	; (adr r2, 8001f48 <HAL_GPIO_Init+0x80>)
 8001f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f48:	08001fc3 	.word	0x08001fc3
 8001f4c:	08001f9d 	.word	0x08001f9d
 8001f50:	08001faf 	.word	0x08001faf
 8001f54:	08001ff1 	.word	0x08001ff1
 8001f58:	08001ff7 	.word	0x08001ff7
 8001f5c:	08001ff7 	.word	0x08001ff7
 8001f60:	08001ff7 	.word	0x08001ff7
 8001f64:	08001ff7 	.word	0x08001ff7
 8001f68:	08001ff7 	.word	0x08001ff7
 8001f6c:	08001ff7 	.word	0x08001ff7
 8001f70:	08001ff7 	.word	0x08001ff7
 8001f74:	08001ff7 	.word	0x08001ff7
 8001f78:	08001ff7 	.word	0x08001ff7
 8001f7c:	08001ff7 	.word	0x08001ff7
 8001f80:	08001ff7 	.word	0x08001ff7
 8001f84:	08001ff7 	.word	0x08001ff7
 8001f88:	08001ff7 	.word	0x08001ff7
 8001f8c:	08001fa5 	.word	0x08001fa5
 8001f90:	08001fb9 	.word	0x08001fb9
 8001f94:	4a79      	ldr	r2, [pc, #484]	; (800217c <HAL_GPIO_Init+0x2b4>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d013      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f9a:	e02c      	b.n	8001ff6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	623b      	str	r3, [r7, #32]
          break;
 8001fa2:	e029      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	623b      	str	r3, [r7, #32]
          break;
 8001fac:	e024      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	3308      	adds	r3, #8
 8001fb4:	623b      	str	r3, [r7, #32]
          break;
 8001fb6:	e01f      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	330c      	adds	r3, #12
 8001fbe:	623b      	str	r3, [r7, #32]
          break;
 8001fc0:	e01a      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d102      	bne.n	8001fd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fca:	2304      	movs	r3, #4
 8001fcc:	623b      	str	r3, [r7, #32]
          break;
 8001fce:	e013      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d105      	bne.n	8001fe4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fd8:	2308      	movs	r3, #8
 8001fda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	611a      	str	r2, [r3, #16]
          break;
 8001fe2:	e009      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fe4:	2308      	movs	r3, #8
 8001fe6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69fa      	ldr	r2, [r7, #28]
 8001fec:	615a      	str	r2, [r3, #20]
          break;
 8001fee:	e003      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	623b      	str	r3, [r7, #32]
          break;
 8001ff4:	e000      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          break;
 8001ff6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	2bff      	cmp	r3, #255	; 0xff
 8001ffc:	d801      	bhi.n	8002002 <HAL_GPIO_Init+0x13a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	e001      	b.n	8002006 <HAL_GPIO_Init+0x13e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3304      	adds	r3, #4
 8002006:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	2bff      	cmp	r3, #255	; 0xff
 800200c:	d802      	bhi.n	8002014 <HAL_GPIO_Init+0x14c>
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	e002      	b.n	800201a <HAL_GPIO_Init+0x152>
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	3b08      	subs	r3, #8
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	210f      	movs	r1, #15
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	fa01 f303 	lsl.w	r3, r1, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	401a      	ands	r2, r3
 800202c:	6a39      	ldr	r1, [r7, #32]
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	fa01 f303 	lsl.w	r3, r1, r3
 8002034:	431a      	orrs	r2, r3
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 80b1 	beq.w	80021aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002048:	4b4d      	ldr	r3, [pc, #308]	; (8002180 <HAL_GPIO_Init+0x2b8>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	4a4c      	ldr	r2, [pc, #304]	; (8002180 <HAL_GPIO_Init+0x2b8>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6193      	str	r3, [r2, #24]
 8002054:	4b4a      	ldr	r3, [pc, #296]	; (8002180 <HAL_GPIO_Init+0x2b8>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002060:	4a48      	ldr	r2, [pc, #288]	; (8002184 <HAL_GPIO_Init+0x2bc>)
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	089b      	lsrs	r3, r3, #2
 8002066:	3302      	adds	r3, #2
 8002068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	220f      	movs	r2, #15
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4013      	ands	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a40      	ldr	r2, [pc, #256]	; (8002188 <HAL_GPIO_Init+0x2c0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d013      	beq.n	80020b4 <HAL_GPIO_Init+0x1ec>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a3f      	ldr	r2, [pc, #252]	; (800218c <HAL_GPIO_Init+0x2c4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d00d      	beq.n	80020b0 <HAL_GPIO_Init+0x1e8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a3e      	ldr	r2, [pc, #248]	; (8002190 <HAL_GPIO_Init+0x2c8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d007      	beq.n	80020ac <HAL_GPIO_Init+0x1e4>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a3d      	ldr	r2, [pc, #244]	; (8002194 <HAL_GPIO_Init+0x2cc>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d101      	bne.n	80020a8 <HAL_GPIO_Init+0x1e0>
 80020a4:	2303      	movs	r3, #3
 80020a6:	e006      	b.n	80020b6 <HAL_GPIO_Init+0x1ee>
 80020a8:	2304      	movs	r3, #4
 80020aa:	e004      	b.n	80020b6 <HAL_GPIO_Init+0x1ee>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e002      	b.n	80020b6 <HAL_GPIO_Init+0x1ee>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <HAL_GPIO_Init+0x1ee>
 80020b4:	2300      	movs	r3, #0
 80020b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b8:	f002 0203 	and.w	r2, r2, #3
 80020bc:	0092      	lsls	r2, r2, #2
 80020be:	4093      	lsls	r3, r2
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020c6:	492f      	ldr	r1, [pc, #188]	; (8002184 <HAL_GPIO_Init+0x2bc>)
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	089b      	lsrs	r3, r3, #2
 80020cc:	3302      	adds	r3, #2
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d006      	beq.n	80020ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020e0:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <HAL_GPIO_Init+0x2d0>)
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	492c      	ldr	r1, [pc, #176]	; (8002198 <HAL_GPIO_Init+0x2d0>)
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	608b      	str	r3, [r1, #8]
 80020ec:	e006      	b.n	80020fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020ee:	4b2a      	ldr	r3, [pc, #168]	; (8002198 <HAL_GPIO_Init+0x2d0>)
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	4928      	ldr	r1, [pc, #160]	; (8002198 <HAL_GPIO_Init+0x2d0>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d006      	beq.n	8002116 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002108:	4b23      	ldr	r3, [pc, #140]	; (8002198 <HAL_GPIO_Init+0x2d0>)
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	4922      	ldr	r1, [pc, #136]	; (8002198 <HAL_GPIO_Init+0x2d0>)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	4313      	orrs	r3, r2
 8002112:	60cb      	str	r3, [r1, #12]
 8002114:	e006      	b.n	8002124 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_GPIO_Init+0x2d0>)
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	43db      	mvns	r3, r3
 800211e:	491e      	ldr	r1, [pc, #120]	; (8002198 <HAL_GPIO_Init+0x2d0>)
 8002120:	4013      	ands	r3, r2
 8002122:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d006      	beq.n	800213e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002130:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_GPIO_Init+0x2d0>)
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	4918      	ldr	r1, [pc, #96]	; (8002198 <HAL_GPIO_Init+0x2d0>)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
 800213c:	e006      	b.n	800214c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <HAL_GPIO_Init+0x2d0>)
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	43db      	mvns	r3, r3
 8002146:	4914      	ldr	r1, [pc, #80]	; (8002198 <HAL_GPIO_Init+0x2d0>)
 8002148:	4013      	ands	r3, r2
 800214a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d021      	beq.n	800219c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <HAL_GPIO_Init+0x2d0>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	490e      	ldr	r1, [pc, #56]	; (8002198 <HAL_GPIO_Init+0x2d0>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	4313      	orrs	r3, r2
 8002162:	600b      	str	r3, [r1, #0]
 8002164:	e021      	b.n	80021aa <HAL_GPIO_Init+0x2e2>
 8002166:	bf00      	nop
 8002168:	10320000 	.word	0x10320000
 800216c:	10310000 	.word	0x10310000
 8002170:	10220000 	.word	0x10220000
 8002174:	10210000 	.word	0x10210000
 8002178:	10120000 	.word	0x10120000
 800217c:	10110000 	.word	0x10110000
 8002180:	40021000 	.word	0x40021000
 8002184:	40010000 	.word	0x40010000
 8002188:	40010800 	.word	0x40010800
 800218c:	40010c00 	.word	0x40010c00
 8002190:	40011000 	.word	0x40011000
 8002194:	40011400 	.word	0x40011400
 8002198:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_GPIO_Init+0x304>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	4909      	ldr	r1, [pc, #36]	; (80021cc <HAL_GPIO_Init+0x304>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	3301      	adds	r3, #1
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f47f ae8e 	bne.w	8001edc <HAL_GPIO_Init+0x14>
  }
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	372c      	adds	r7, #44	; 0x2c
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	40010400 	.word	0x40010400

080021d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	807b      	strh	r3, [r7, #2]
 80021dc:	4613      	mov	r3, r2
 80021de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021e0:	787b      	ldrb	r3, [r7, #1]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e6:	887a      	ldrh	r2, [r7, #2]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021ec:	e003      	b.n	80021f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021ee:	887b      	ldrh	r3, [r7, #2]
 80021f0:	041a      	lsls	r2, r3, #16
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	611a      	str	r2, [r3, #16]
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002212:	887a      	ldrh	r2, [r7, #2]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4013      	ands	r3, r2
 8002218:	041a      	lsls	r2, r3, #16
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	43d9      	mvns	r1, r3
 800221e:	887b      	ldrh	r3, [r7, #2]
 8002220:	400b      	ands	r3, r1
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	611a      	str	r2, [r3, #16]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr
	...

08002234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e272      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8087 	beq.w	8002362 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002254:	4b92      	ldr	r3, [pc, #584]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b04      	cmp	r3, #4
 800225e:	d00c      	beq.n	800227a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002260:	4b8f      	ldr	r3, [pc, #572]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 030c 	and.w	r3, r3, #12
 8002268:	2b08      	cmp	r3, #8
 800226a:	d112      	bne.n	8002292 <HAL_RCC_OscConfig+0x5e>
 800226c:	4b8c      	ldr	r3, [pc, #560]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002278:	d10b      	bne.n	8002292 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227a:	4b89      	ldr	r3, [pc, #548]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d06c      	beq.n	8002360 <HAL_RCC_OscConfig+0x12c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d168      	bne.n	8002360 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e24c      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229a:	d106      	bne.n	80022aa <HAL_RCC_OscConfig+0x76>
 800229c:	4b80      	ldr	r3, [pc, #512]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a7f      	ldr	r2, [pc, #508]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	e02e      	b.n	8002308 <HAL_RCC_OscConfig+0xd4>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0x98>
 80022b2:	4b7b      	ldr	r3, [pc, #492]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a7a      	ldr	r2, [pc, #488]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b78      	ldr	r3, [pc, #480]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a77      	ldr	r2, [pc, #476]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e01d      	b.n	8002308 <HAL_RCC_OscConfig+0xd4>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCC_OscConfig+0xbc>
 80022d6:	4b72      	ldr	r3, [pc, #456]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a71      	ldr	r2, [pc, #452]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	4b6f      	ldr	r3, [pc, #444]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a6e      	ldr	r2, [pc, #440]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e00b      	b.n	8002308 <HAL_RCC_OscConfig+0xd4>
 80022f0:	4b6b      	ldr	r3, [pc, #428]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a6a      	ldr	r2, [pc, #424]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b68      	ldr	r3, [pc, #416]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a67      	ldr	r2, [pc, #412]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002306:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d013      	beq.n	8002338 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7ff f8ba 	bl	8001488 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002318:	f7ff f8b6 	bl	8001488 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e200      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	4b5d      	ldr	r3, [pc, #372]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0xe4>
 8002336:	e014      	b.n	8002362 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7ff f8a6 	bl	8001488 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002340:	f7ff f8a2 	bl	8001488 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b64      	cmp	r3, #100	; 0x64
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e1ec      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002352:	4b53      	ldr	r3, [pc, #332]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x10c>
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d063      	beq.n	8002436 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800236e:	4b4c      	ldr	r3, [pc, #304]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00b      	beq.n	8002392 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800237a:	4b49      	ldr	r3, [pc, #292]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b08      	cmp	r3, #8
 8002384:	d11c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x18c>
 8002386:	4b46      	ldr	r3, [pc, #280]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d116      	bne.n	80023c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002392:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <HAL_RCC_OscConfig+0x176>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d001      	beq.n	80023aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e1c0      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023aa:	4b3d      	ldr	r3, [pc, #244]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4939      	ldr	r1, [pc, #228]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023be:	e03a      	b.n	8002436 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d020      	beq.n	800240a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c8:	4b36      	ldr	r3, [pc, #216]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7ff f85b 	bl	8001488 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d6:	f7ff f857 	bl	8001488 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e1a1      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e8:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f4:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4927      	ldr	r1, [pc, #156]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002404:	4313      	orrs	r3, r2
 8002406:	600b      	str	r3, [r1, #0]
 8002408:	e015      	b.n	8002436 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240a:	4b26      	ldr	r3, [pc, #152]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7ff f83a 	bl	8001488 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002418:	f7ff f836 	bl	8001488 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e180      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242a:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d03a      	beq.n	80024b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d019      	beq.n	800247e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800244a:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <HAL_RCC_OscConfig+0x274>)
 800244c:	2201      	movs	r2, #1
 800244e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002450:	f7ff f81a 	bl	8001488 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002458:	f7ff f816 	bl	8001488 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e160      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002476:	2001      	movs	r0, #1
 8002478:	f000 faa6 	bl	80029c8 <RCC_Delay>
 800247c:	e01c      	b.n	80024b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800247e:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <HAL_RCC_OscConfig+0x274>)
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002484:	f7ff f800 	bl	8001488 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800248a:	e00f      	b.n	80024ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800248c:	f7fe fffc 	bl	8001488 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d908      	bls.n	80024ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e146      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
 80024a4:	42420000 	.word	0x42420000
 80024a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ac:	4b92      	ldr	r3, [pc, #584]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1e9      	bne.n	800248c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80a6 	beq.w	8002612 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c6:	2300      	movs	r3, #0
 80024c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ca:	4b8b      	ldr	r3, [pc, #556]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10d      	bne.n	80024f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d6:	4b88      	ldr	r3, [pc, #544]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4a87      	ldr	r2, [pc, #540]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e0:	61d3      	str	r3, [r2, #28]
 80024e2:	4b85      	ldr	r3, [pc, #532]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ee:	2301      	movs	r3, #1
 80024f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f2:	4b82      	ldr	r3, [pc, #520]	; (80026fc <HAL_RCC_OscConfig+0x4c8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d118      	bne.n	8002530 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024fe:	4b7f      	ldr	r3, [pc, #508]	; (80026fc <HAL_RCC_OscConfig+0x4c8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a7e      	ldr	r2, [pc, #504]	; (80026fc <HAL_RCC_OscConfig+0x4c8>)
 8002504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800250a:	f7fe ffbd 	bl	8001488 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002512:	f7fe ffb9 	bl	8001488 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b64      	cmp	r3, #100	; 0x64
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e103      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002524:	4b75      	ldr	r3, [pc, #468]	; (80026fc <HAL_RCC_OscConfig+0x4c8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d106      	bne.n	8002546 <HAL_RCC_OscConfig+0x312>
 8002538:	4b6f      	ldr	r3, [pc, #444]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	4a6e      	ldr	r2, [pc, #440]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6213      	str	r3, [r2, #32]
 8002544:	e02d      	b.n	80025a2 <HAL_RCC_OscConfig+0x36e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x334>
 800254e:	4b6a      	ldr	r3, [pc, #424]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a69      	ldr	r2, [pc, #420]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6213      	str	r3, [r2, #32]
 800255a:	4b67      	ldr	r3, [pc, #412]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a66      	ldr	r2, [pc, #408]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	f023 0304 	bic.w	r3, r3, #4
 8002564:	6213      	str	r3, [r2, #32]
 8002566:	e01c      	b.n	80025a2 <HAL_RCC_OscConfig+0x36e>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2b05      	cmp	r3, #5
 800256e:	d10c      	bne.n	800258a <HAL_RCC_OscConfig+0x356>
 8002570:	4b61      	ldr	r3, [pc, #388]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4a60      	ldr	r2, [pc, #384]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002576:	f043 0304 	orr.w	r3, r3, #4
 800257a:	6213      	str	r3, [r2, #32]
 800257c:	4b5e      	ldr	r3, [pc, #376]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	4a5d      	ldr	r2, [pc, #372]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6213      	str	r3, [r2, #32]
 8002588:	e00b      	b.n	80025a2 <HAL_RCC_OscConfig+0x36e>
 800258a:	4b5b      	ldr	r3, [pc, #364]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a5a      	ldr	r2, [pc, #360]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	6213      	str	r3, [r2, #32]
 8002596:	4b58      	ldr	r3, [pc, #352]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4a57      	ldr	r2, [pc, #348]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800259c:	f023 0304 	bic.w	r3, r3, #4
 80025a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d015      	beq.n	80025d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025aa:	f7fe ff6d 	bl	8001488 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b0:	e00a      	b.n	80025c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b2:	f7fe ff69 	bl	8001488 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e0b1      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c8:	4b4b      	ldr	r3, [pc, #300]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0ee      	beq.n	80025b2 <HAL_RCC_OscConfig+0x37e>
 80025d4:	e014      	b.n	8002600 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d6:	f7fe ff57 	bl	8001488 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025dc:	e00a      	b.n	80025f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025de:	f7fe ff53 	bl	8001488 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e09b      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f4:	4b40      	ldr	r3, [pc, #256]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1ee      	bne.n	80025de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002600:	7dfb      	ldrb	r3, [r7, #23]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d105      	bne.n	8002612 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002606:	4b3c      	ldr	r3, [pc, #240]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	4a3b      	ldr	r2, [pc, #236]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800260c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002610:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 8087 	beq.w	800272a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800261c:	4b36      	ldr	r3, [pc, #216]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 030c 	and.w	r3, r3, #12
 8002624:	2b08      	cmp	r3, #8
 8002626:	d061      	beq.n	80026ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d146      	bne.n	80026be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002630:	4b33      	ldr	r3, [pc, #204]	; (8002700 <HAL_RCC_OscConfig+0x4cc>)
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002636:	f7fe ff27 	bl	8001488 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263e:	f7fe ff23 	bl	8001488 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e06d      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002650:	4b29      	ldr	r3, [pc, #164]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f0      	bne.n	800263e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002664:	d108      	bne.n	8002678 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002666:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	4921      	ldr	r1, [pc, #132]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002678:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a19      	ldr	r1, [r3, #32]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	430b      	orrs	r3, r1
 800268a:	491b      	ldr	r1, [pc, #108]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002690:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <HAL_RCC_OscConfig+0x4cc>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002696:	f7fe fef7 	bl	8001488 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269e:	f7fe fef3 	bl	8001488 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e03d      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x46a>
 80026bc:	e035      	b.n	800272a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <HAL_RCC_OscConfig+0x4cc>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7fe fee0 	bl	8001488 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026cc:	f7fe fedc 	bl	8001488 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e026      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x498>
 80026ea:	e01e      	b.n	800272a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d107      	bne.n	8002704 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e019      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40007000 	.word	0x40007000
 8002700:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_RCC_OscConfig+0x500>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	429a      	cmp	r2, r3
 8002716:	d106      	bne.n	8002726 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	429a      	cmp	r2, r3
 8002724:	d001      	beq.n	800272a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000

08002738 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0d0      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800274c:	4b6a      	ldr	r3, [pc, #424]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d910      	bls.n	800277c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275a:	4b67      	ldr	r3, [pc, #412]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 0207 	bic.w	r2, r3, #7
 8002762:	4965      	ldr	r1, [pc, #404]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276a:	4b63      	ldr	r3, [pc, #396]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0b8      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d020      	beq.n	80027ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002794:	4b59      	ldr	r3, [pc, #356]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4a58      	ldr	r2, [pc, #352]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800279e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027ac:	4b53      	ldr	r3, [pc, #332]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4a52      	ldr	r2, [pc, #328]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b8:	4b50      	ldr	r3, [pc, #320]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	494d      	ldr	r1, [pc, #308]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d040      	beq.n	8002858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027de:	4b47      	ldr	r3, [pc, #284]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d115      	bne.n	8002816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e07f      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d107      	bne.n	8002806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f6:	4b41      	ldr	r3, [pc, #260]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d109      	bne.n	8002816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e073      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002806:	4b3d      	ldr	r3, [pc, #244]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e06b      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002816:	4b39      	ldr	r3, [pc, #228]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f023 0203 	bic.w	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4936      	ldr	r1, [pc, #216]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002828:	f7fe fe2e 	bl	8001488 <HAL_GetTick>
 800282c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	e00a      	b.n	8002846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002830:	f7fe fe2a 	bl	8001488 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	f241 3288 	movw	r2, #5000	; 0x1388
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e053      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002846:	4b2d      	ldr	r3, [pc, #180]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 020c 	and.w	r2, r3, #12
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	429a      	cmp	r2, r3
 8002856:	d1eb      	bne.n	8002830 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002858:	4b27      	ldr	r3, [pc, #156]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d210      	bcs.n	8002888 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 0207 	bic.w	r2, r3, #7
 800286e:	4922      	ldr	r1, [pc, #136]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002876:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e032      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002894:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4916      	ldr	r1, [pc, #88]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d009      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028b2:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	490e      	ldr	r1, [pc, #56]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028c6:	f000 f821 	bl	800290c <HAL_RCC_GetSysClockFreq>
 80028ca:	4602      	mov	r2, r0
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	490a      	ldr	r1, [pc, #40]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80028d8:	5ccb      	ldrb	r3, [r1, r3]
 80028da:	fa22 f303 	lsr.w	r3, r2, r3
 80028de:	4a09      	ldr	r2, [pc, #36]	; (8002904 <HAL_RCC_ClockConfig+0x1cc>)
 80028e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <HAL_RCC_ClockConfig+0x1d0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe fd8c 	bl	8001404 <HAL_InitTick>

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40022000 	.word	0x40022000
 80028fc:	40021000 	.word	0x40021000
 8002900:	08003cd4 	.word	0x08003cd4
 8002904:	20000000 	.word	0x20000000
 8002908:	20000004 	.word	0x20000004

0800290c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800290c:	b480      	push	{r7}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	2300      	movs	r3, #0
 8002920:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002926:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b04      	cmp	r3, #4
 8002934:	d002      	beq.n	800293c <HAL_RCC_GetSysClockFreq+0x30>
 8002936:	2b08      	cmp	r3, #8
 8002938:	d003      	beq.n	8002942 <HAL_RCC_GetSysClockFreq+0x36>
 800293a:	e027      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800293c:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800293e:	613b      	str	r3, [r7, #16]
      break;
 8002940:	e027      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	0c9b      	lsrs	r3, r3, #18
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	4a17      	ldr	r2, [pc, #92]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800294c:	5cd3      	ldrb	r3, [r2, r3]
 800294e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d010      	beq.n	800297c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800295a:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	0c5b      	lsrs	r3, r3, #17
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	4a11      	ldr	r2, [pc, #68]	; (80029ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002966:	5cd3      	ldrb	r3, [r2, r3]
 8002968:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a0d      	ldr	r2, [pc, #52]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800296e:	fb03 f202 	mul.w	r2, r3, r2
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	fbb2 f3f3 	udiv	r3, r2, r3
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	e004      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a0c      	ldr	r2, [pc, #48]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002980:	fb02 f303 	mul.w	r3, r2, r3
 8002984:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	613b      	str	r3, [r7, #16]
      break;
 800298a:	e002      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800298e:	613b      	str	r3, [r7, #16]
      break;
 8002990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002992:	693b      	ldr	r3, [r7, #16]
}
 8002994:	4618      	mov	r0, r3
 8002996:	371c      	adds	r7, #28
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	007a1200 	.word	0x007a1200
 80029a8:	08003ce4 	.word	0x08003ce4
 80029ac:	08003cf4 	.word	0x08003cf4
 80029b0:	003d0900 	.word	0x003d0900

080029b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b8:	4b02      	ldr	r3, [pc, #8]	; (80029c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr
 80029c4:	20000000 	.word	0x20000000

080029c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <RCC_Delay+0x34>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <RCC_Delay+0x38>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	0a5b      	lsrs	r3, r3, #9
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	fb02 f303 	mul.w	r3, r2, r3
 80029e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029e4:	bf00      	nop
  }
  while (Delay --);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1e5a      	subs	r2, r3, #1
 80029ea:	60fa      	str	r2, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f9      	bne.n	80029e4 <RCC_Delay+0x1c>
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	20000000 	.word	0x20000000
 8002a00:	10624dd3 	.word	0x10624dd3

08002a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d07d      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a20:	2300      	movs	r3, #0
 8002a22:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a24:	4b4f      	ldr	r3, [pc, #316]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10d      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a30:	4b4c      	ldr	r3, [pc, #304]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	4a4b      	ldr	r2, [pc, #300]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	61d3      	str	r3, [r2, #28]
 8002a3c:	4b49      	ldr	r3, [pc, #292]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	4b46      	ldr	r3, [pc, #280]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d118      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a58:	4b43      	ldr	r3, [pc, #268]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a42      	ldr	r2, [pc, #264]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a64:	f7fe fd10 	bl	8001488 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6a:	e008      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6c:	f7fe fd0c 	bl	8001488 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e06d      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7e:	4b3a      	ldr	r3, [pc, #232]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a8a:	4b36      	ldr	r3, [pc, #216]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d02e      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d027      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002aa8:	4b2e      	ldr	r3, [pc, #184]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ab2:	4b2e      	ldr	r3, [pc, #184]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ab8:	4b2c      	ldr	r3, [pc, #176]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002abe:	4a29      	ldr	r2, [pc, #164]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d014      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ace:	f7fe fcdb 	bl	8001488 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad4:	e00a      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad6:	f7fe fcd7 	bl	8001488 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e036      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aec:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0ee      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002af8:	4b1a      	ldr	r3, [pc, #104]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4917      	ldr	r1, [pc, #92]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b0a:	7dfb      	ldrb	r3, [r7, #23]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d105      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b10:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	4a13      	ldr	r2, [pc, #76]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b28:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	490b      	ldr	r1, [pc, #44]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d008      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b46:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	4904      	ldr	r1, [pc, #16]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40007000 	.word	0x40007000
 8002b6c:	42420440 	.word	0x42420440

08002b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e041      	b.n	8002c06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d106      	bne.n	8002b9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fe f9e0 	bl	8000f5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3304      	adds	r3, #4
 8002bac:	4619      	mov	r1, r3
 8002bae:	4610      	mov	r0, r2
 8002bb0:	f000 fa7c 	bl	80030ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d001      	beq.n	8002c28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e03a      	b.n	8002c9e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a18      	ldr	r2, [pc, #96]	; (8002ca8 <HAL_TIM_Base_Start_IT+0x98>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d00e      	beq.n	8002c68 <HAL_TIM_Base_Start_IT+0x58>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c52:	d009      	beq.n	8002c68 <HAL_TIM_Base_Start_IT+0x58>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a14      	ldr	r2, [pc, #80]	; (8002cac <HAL_TIM_Base_Start_IT+0x9c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d004      	beq.n	8002c68 <HAL_TIM_Base_Start_IT+0x58>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d111      	bne.n	8002c8c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b06      	cmp	r3, #6
 8002c78:	d010      	beq.n	8002c9c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0201 	orr.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c8a:	e007      	b.n	8002c9c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr
 8002ca8:	40012c00 	.word	0x40012c00
 8002cac:	40000400 	.word	0x40000400
 8002cb0:	40000800 	.word	0x40000800

08002cb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d122      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d11b      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0202 	mvn.w	r2, #2
 8002ce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f9bd 	bl	8003076 <HAL_TIM_IC_CaptureCallback>
 8002cfc:	e005      	b.n	8002d0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f9b0 	bl	8003064 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f9bf 	bl	8003088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d122      	bne.n	8002d64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d11b      	bne.n	8002d64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0204 	mvn.w	r2, #4
 8002d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f993 	bl	8003076 <HAL_TIM_IC_CaptureCallback>
 8002d50:	e005      	b.n	8002d5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f986 	bl	8003064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f995 	bl	8003088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d122      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d11b      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0208 	mvn.w	r2, #8
 8002d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2204      	movs	r2, #4
 8002d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f969 	bl	8003076 <HAL_TIM_IC_CaptureCallback>
 8002da4:	e005      	b.n	8002db2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f95c 	bl	8003064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f96b 	bl	8003088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b10      	cmp	r3, #16
 8002dc4:	d122      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	2b10      	cmp	r3, #16
 8002dd2:	d11b      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0210 	mvn.w	r2, #16
 8002ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2208      	movs	r2, #8
 8002de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f93f 	bl	8003076 <HAL_TIM_IC_CaptureCallback>
 8002df8:	e005      	b.n	8002e06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f932 	bl	8003064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f941 	bl	8003088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d10e      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d107      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0201 	mvn.w	r2, #1
 8002e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f90d 	bl	8003052 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e42:	2b80      	cmp	r3, #128	; 0x80
 8002e44:	d10e      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e50:	2b80      	cmp	r3, #128	; 0x80
 8002e52:	d107      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fa83 	bl	800336a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6e:	2b40      	cmp	r3, #64	; 0x40
 8002e70:	d10e      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7c:	2b40      	cmp	r3, #64	; 0x40
 8002e7e:	d107      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f905 	bl	800309a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	d10e      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d107      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0220 	mvn.w	r2, #32
 8002eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fa4e 	bl	8003358 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d101      	bne.n	8002ee0 <HAL_TIM_ConfigClockSource+0x1c>
 8002edc:	2302      	movs	r3, #2
 8002ede:	e0b4      	b.n	800304a <HAL_TIM_ConfigClockSource+0x186>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002efe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f18:	d03e      	beq.n	8002f98 <HAL_TIM_ConfigClockSource+0xd4>
 8002f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f1e:	f200 8087 	bhi.w	8003030 <HAL_TIM_ConfigClockSource+0x16c>
 8002f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f26:	f000 8086 	beq.w	8003036 <HAL_TIM_ConfigClockSource+0x172>
 8002f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f2e:	d87f      	bhi.n	8003030 <HAL_TIM_ConfigClockSource+0x16c>
 8002f30:	2b70      	cmp	r3, #112	; 0x70
 8002f32:	d01a      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0xa6>
 8002f34:	2b70      	cmp	r3, #112	; 0x70
 8002f36:	d87b      	bhi.n	8003030 <HAL_TIM_ConfigClockSource+0x16c>
 8002f38:	2b60      	cmp	r3, #96	; 0x60
 8002f3a:	d050      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x11a>
 8002f3c:	2b60      	cmp	r3, #96	; 0x60
 8002f3e:	d877      	bhi.n	8003030 <HAL_TIM_ConfigClockSource+0x16c>
 8002f40:	2b50      	cmp	r3, #80	; 0x50
 8002f42:	d03c      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0xfa>
 8002f44:	2b50      	cmp	r3, #80	; 0x50
 8002f46:	d873      	bhi.n	8003030 <HAL_TIM_ConfigClockSource+0x16c>
 8002f48:	2b40      	cmp	r3, #64	; 0x40
 8002f4a:	d058      	beq.n	8002ffe <HAL_TIM_ConfigClockSource+0x13a>
 8002f4c:	2b40      	cmp	r3, #64	; 0x40
 8002f4e:	d86f      	bhi.n	8003030 <HAL_TIM_ConfigClockSource+0x16c>
 8002f50:	2b30      	cmp	r3, #48	; 0x30
 8002f52:	d064      	beq.n	800301e <HAL_TIM_ConfigClockSource+0x15a>
 8002f54:	2b30      	cmp	r3, #48	; 0x30
 8002f56:	d86b      	bhi.n	8003030 <HAL_TIM_ConfigClockSource+0x16c>
 8002f58:	2b20      	cmp	r3, #32
 8002f5a:	d060      	beq.n	800301e <HAL_TIM_ConfigClockSource+0x15a>
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d867      	bhi.n	8003030 <HAL_TIM_ConfigClockSource+0x16c>
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d05c      	beq.n	800301e <HAL_TIM_ConfigClockSource+0x15a>
 8002f64:	2b10      	cmp	r3, #16
 8002f66:	d05a      	beq.n	800301e <HAL_TIM_ConfigClockSource+0x15a>
 8002f68:	e062      	b.n	8003030 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6899      	ldr	r1, [r3, #8]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f000 f970 	bl	800325e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	609a      	str	r2, [r3, #8]
      break;
 8002f96:	e04f      	b.n	8003038 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	6899      	ldr	r1, [r3, #8]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f000 f959 	bl	800325e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fba:	609a      	str	r2, [r3, #8]
      break;
 8002fbc:	e03c      	b.n	8003038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	6859      	ldr	r1, [r3, #4]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f000 f8d0 	bl	8003170 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2150      	movs	r1, #80	; 0x50
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 f927 	bl	800322a <TIM_ITRx_SetConfig>
      break;
 8002fdc:	e02c      	b.n	8003038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6859      	ldr	r1, [r3, #4]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	461a      	mov	r2, r3
 8002fec:	f000 f8ee 	bl	80031cc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2160      	movs	r1, #96	; 0x60
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 f917 	bl	800322a <TIM_ITRx_SetConfig>
      break;
 8002ffc:	e01c      	b.n	8003038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	6859      	ldr	r1, [r3, #4]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	461a      	mov	r2, r3
 800300c:	f000 f8b0 	bl	8003170 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2140      	movs	r1, #64	; 0x40
 8003016:	4618      	mov	r0, r3
 8003018:	f000 f907 	bl	800322a <TIM_ITRx_SetConfig>
      break;
 800301c:	e00c      	b.n	8003038 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4619      	mov	r1, r3
 8003028:	4610      	mov	r0, r2
 800302a:	f000 f8fe 	bl	800322a <TIM_ITRx_SetConfig>
      break;
 800302e:	e003      	b.n	8003038 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
      break;
 8003034:	e000      	b.n	8003038 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003036:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003048:	7bfb      	ldrb	r3, [r7, #15]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr

08003076 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr

08003088 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr

0800309a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a29      	ldr	r2, [pc, #164]	; (8003164 <TIM_Base_SetConfig+0xb8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00b      	beq.n	80030dc <TIM_Base_SetConfig+0x30>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ca:	d007      	beq.n	80030dc <TIM_Base_SetConfig+0x30>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a26      	ldr	r2, [pc, #152]	; (8003168 <TIM_Base_SetConfig+0xbc>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d003      	beq.n	80030dc <TIM_Base_SetConfig+0x30>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a25      	ldr	r2, [pc, #148]	; (800316c <TIM_Base_SetConfig+0xc0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d108      	bne.n	80030ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a1c      	ldr	r2, [pc, #112]	; (8003164 <TIM_Base_SetConfig+0xb8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00b      	beq.n	800310e <TIM_Base_SetConfig+0x62>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030fc:	d007      	beq.n	800310e <TIM_Base_SetConfig+0x62>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a19      	ldr	r2, [pc, #100]	; (8003168 <TIM_Base_SetConfig+0xbc>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d003      	beq.n	800310e <TIM_Base_SetConfig+0x62>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a18      	ldr	r2, [pc, #96]	; (800316c <TIM_Base_SetConfig+0xc0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d108      	bne.n	8003120 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4313      	orrs	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	4313      	orrs	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a07      	ldr	r2, [pc, #28]	; (8003164 <TIM_Base_SetConfig+0xb8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d103      	bne.n	8003154 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	615a      	str	r2, [r3, #20]
}
 800315a:	bf00      	nop
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr
 8003164:	40012c00 	.word	0x40012c00
 8003168:	40000400 	.word	0x40000400
 800316c:	40000800 	.word	0x40000800

08003170 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	f023 0201 	bic.w	r2, r3, #1
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800319a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f023 030a 	bic.w	r3, r3, #10
 80031ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	621a      	str	r2, [r3, #32]
}
 80031c2:	bf00      	nop
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	f023 0210 	bic.w	r2, r3, #16
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	031b      	lsls	r3, r3, #12
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003208:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4313      	orrs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	621a      	str	r2, [r3, #32]
}
 8003220:	bf00      	nop
 8003222:	371c      	adds	r7, #28
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr

0800322a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800322a:	b480      	push	{r7}
 800322c:	b085      	sub	sp, #20
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003240:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	f043 0307 	orr.w	r3, r3, #7
 800324c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	609a      	str	r2, [r3, #8]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr

0800325e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800325e:	b480      	push	{r7}
 8003260:	b087      	sub	sp, #28
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003278:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	021a      	lsls	r2, r3, #8
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	431a      	orrs	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	4313      	orrs	r3, r2
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	4313      	orrs	r3, r2
 800328a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	609a      	str	r2, [r3, #8]
}
 8003292:	bf00      	nop
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e046      	b.n	8003342 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a16      	ldr	r2, [pc, #88]	; (800334c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d00e      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003300:	d009      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a12      	ldr	r2, [pc, #72]	; (8003350 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d004      	beq.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a10      	ldr	r2, [pc, #64]	; (8003354 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d10c      	bne.n	8003330 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800331c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	4313      	orrs	r3, r2
 8003326:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr
 800334c:	40012c00 	.word	0x40012c00
 8003350:	40000400 	.word	0x40000400
 8003354:	40000800 	.word	0x40000800

08003358 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr

0800336a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <__errno>:
 800337c:	4b01      	ldr	r3, [pc, #4]	; (8003384 <__errno+0x8>)
 800337e:	6818      	ldr	r0, [r3, #0]
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	2000000c 	.word	0x2000000c

08003388 <memset>:
 8003388:	4603      	mov	r3, r0
 800338a:	4402      	add	r2, r0
 800338c:	4293      	cmp	r3, r2
 800338e:	d100      	bne.n	8003392 <memset+0xa>
 8003390:	4770      	bx	lr
 8003392:	f803 1b01 	strb.w	r1, [r3], #1
 8003396:	e7f9      	b.n	800338c <memset+0x4>

08003398 <siprintf>:
 8003398:	b40e      	push	{r1, r2, r3}
 800339a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800339e:	b500      	push	{lr}
 80033a0:	b09c      	sub	sp, #112	; 0x70
 80033a2:	ab1d      	add	r3, sp, #116	; 0x74
 80033a4:	9002      	str	r0, [sp, #8]
 80033a6:	9006      	str	r0, [sp, #24]
 80033a8:	9107      	str	r1, [sp, #28]
 80033aa:	9104      	str	r1, [sp, #16]
 80033ac:	4808      	ldr	r0, [pc, #32]	; (80033d0 <siprintf+0x38>)
 80033ae:	4909      	ldr	r1, [pc, #36]	; (80033d4 <siprintf+0x3c>)
 80033b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80033b4:	9105      	str	r1, [sp, #20]
 80033b6:	6800      	ldr	r0, [r0, #0]
 80033b8:	a902      	add	r1, sp, #8
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	f000 f868 	bl	8003490 <_svfiprintf_r>
 80033c0:	2200      	movs	r2, #0
 80033c2:	9b02      	ldr	r3, [sp, #8]
 80033c4:	701a      	strb	r2, [r3, #0]
 80033c6:	b01c      	add	sp, #112	; 0x70
 80033c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80033cc:	b003      	add	sp, #12
 80033ce:	4770      	bx	lr
 80033d0:	2000000c 	.word	0x2000000c
 80033d4:	ffff0208 	.word	0xffff0208

080033d8 <__ssputs_r>:
 80033d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033dc:	688e      	ldr	r6, [r1, #8]
 80033de:	4682      	mov	sl, r0
 80033e0:	429e      	cmp	r6, r3
 80033e2:	460c      	mov	r4, r1
 80033e4:	4690      	mov	r8, r2
 80033e6:	461f      	mov	r7, r3
 80033e8:	d838      	bhi.n	800345c <__ssputs_r+0x84>
 80033ea:	898a      	ldrh	r2, [r1, #12]
 80033ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033f0:	d032      	beq.n	8003458 <__ssputs_r+0x80>
 80033f2:	6825      	ldr	r5, [r4, #0]
 80033f4:	6909      	ldr	r1, [r1, #16]
 80033f6:	3301      	adds	r3, #1
 80033f8:	eba5 0901 	sub.w	r9, r5, r1
 80033fc:	6965      	ldr	r5, [r4, #20]
 80033fe:	444b      	add	r3, r9
 8003400:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003404:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003408:	106d      	asrs	r5, r5, #1
 800340a:	429d      	cmp	r5, r3
 800340c:	bf38      	it	cc
 800340e:	461d      	movcc	r5, r3
 8003410:	0553      	lsls	r3, r2, #21
 8003412:	d531      	bpl.n	8003478 <__ssputs_r+0xa0>
 8003414:	4629      	mov	r1, r5
 8003416:	f000 fb6f 	bl	8003af8 <_malloc_r>
 800341a:	4606      	mov	r6, r0
 800341c:	b950      	cbnz	r0, 8003434 <__ssputs_r+0x5c>
 800341e:	230c      	movs	r3, #12
 8003420:	f04f 30ff 	mov.w	r0, #4294967295
 8003424:	f8ca 3000 	str.w	r3, [sl]
 8003428:	89a3      	ldrh	r3, [r4, #12]
 800342a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800342e:	81a3      	strh	r3, [r4, #12]
 8003430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003434:	464a      	mov	r2, r9
 8003436:	6921      	ldr	r1, [r4, #16]
 8003438:	f000 face 	bl	80039d8 <memcpy>
 800343c:	89a3      	ldrh	r3, [r4, #12]
 800343e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003446:	81a3      	strh	r3, [r4, #12]
 8003448:	6126      	str	r6, [r4, #16]
 800344a:	444e      	add	r6, r9
 800344c:	6026      	str	r6, [r4, #0]
 800344e:	463e      	mov	r6, r7
 8003450:	6165      	str	r5, [r4, #20]
 8003452:	eba5 0509 	sub.w	r5, r5, r9
 8003456:	60a5      	str	r5, [r4, #8]
 8003458:	42be      	cmp	r6, r7
 800345a:	d900      	bls.n	800345e <__ssputs_r+0x86>
 800345c:	463e      	mov	r6, r7
 800345e:	4632      	mov	r2, r6
 8003460:	4641      	mov	r1, r8
 8003462:	6820      	ldr	r0, [r4, #0]
 8003464:	f000 fac6 	bl	80039f4 <memmove>
 8003468:	68a3      	ldr	r3, [r4, #8]
 800346a:	2000      	movs	r0, #0
 800346c:	1b9b      	subs	r3, r3, r6
 800346e:	60a3      	str	r3, [r4, #8]
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	4433      	add	r3, r6
 8003474:	6023      	str	r3, [r4, #0]
 8003476:	e7db      	b.n	8003430 <__ssputs_r+0x58>
 8003478:	462a      	mov	r2, r5
 800347a:	f000 fbb1 	bl	8003be0 <_realloc_r>
 800347e:	4606      	mov	r6, r0
 8003480:	2800      	cmp	r0, #0
 8003482:	d1e1      	bne.n	8003448 <__ssputs_r+0x70>
 8003484:	4650      	mov	r0, sl
 8003486:	6921      	ldr	r1, [r4, #16]
 8003488:	f000 face 	bl	8003a28 <_free_r>
 800348c:	e7c7      	b.n	800341e <__ssputs_r+0x46>
	...

08003490 <_svfiprintf_r>:
 8003490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003494:	4698      	mov	r8, r3
 8003496:	898b      	ldrh	r3, [r1, #12]
 8003498:	4607      	mov	r7, r0
 800349a:	061b      	lsls	r3, r3, #24
 800349c:	460d      	mov	r5, r1
 800349e:	4614      	mov	r4, r2
 80034a0:	b09d      	sub	sp, #116	; 0x74
 80034a2:	d50e      	bpl.n	80034c2 <_svfiprintf_r+0x32>
 80034a4:	690b      	ldr	r3, [r1, #16]
 80034a6:	b963      	cbnz	r3, 80034c2 <_svfiprintf_r+0x32>
 80034a8:	2140      	movs	r1, #64	; 0x40
 80034aa:	f000 fb25 	bl	8003af8 <_malloc_r>
 80034ae:	6028      	str	r0, [r5, #0]
 80034b0:	6128      	str	r0, [r5, #16]
 80034b2:	b920      	cbnz	r0, 80034be <_svfiprintf_r+0x2e>
 80034b4:	230c      	movs	r3, #12
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295
 80034bc:	e0d1      	b.n	8003662 <_svfiprintf_r+0x1d2>
 80034be:	2340      	movs	r3, #64	; 0x40
 80034c0:	616b      	str	r3, [r5, #20]
 80034c2:	2300      	movs	r3, #0
 80034c4:	9309      	str	r3, [sp, #36]	; 0x24
 80034c6:	2320      	movs	r3, #32
 80034c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034cc:	2330      	movs	r3, #48	; 0x30
 80034ce:	f04f 0901 	mov.w	r9, #1
 80034d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80034d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800367c <_svfiprintf_r+0x1ec>
 80034da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034de:	4623      	mov	r3, r4
 80034e0:	469a      	mov	sl, r3
 80034e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034e6:	b10a      	cbz	r2, 80034ec <_svfiprintf_r+0x5c>
 80034e8:	2a25      	cmp	r2, #37	; 0x25
 80034ea:	d1f9      	bne.n	80034e0 <_svfiprintf_r+0x50>
 80034ec:	ebba 0b04 	subs.w	fp, sl, r4
 80034f0:	d00b      	beq.n	800350a <_svfiprintf_r+0x7a>
 80034f2:	465b      	mov	r3, fp
 80034f4:	4622      	mov	r2, r4
 80034f6:	4629      	mov	r1, r5
 80034f8:	4638      	mov	r0, r7
 80034fa:	f7ff ff6d 	bl	80033d8 <__ssputs_r>
 80034fe:	3001      	adds	r0, #1
 8003500:	f000 80aa 	beq.w	8003658 <_svfiprintf_r+0x1c8>
 8003504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003506:	445a      	add	r2, fp
 8003508:	9209      	str	r2, [sp, #36]	; 0x24
 800350a:	f89a 3000 	ldrb.w	r3, [sl]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 80a2 	beq.w	8003658 <_svfiprintf_r+0x1c8>
 8003514:	2300      	movs	r3, #0
 8003516:	f04f 32ff 	mov.w	r2, #4294967295
 800351a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800351e:	f10a 0a01 	add.w	sl, sl, #1
 8003522:	9304      	str	r3, [sp, #16]
 8003524:	9307      	str	r3, [sp, #28]
 8003526:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800352a:	931a      	str	r3, [sp, #104]	; 0x68
 800352c:	4654      	mov	r4, sl
 800352e:	2205      	movs	r2, #5
 8003530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003534:	4851      	ldr	r0, [pc, #324]	; (800367c <_svfiprintf_r+0x1ec>)
 8003536:	f000 fa41 	bl	80039bc <memchr>
 800353a:	9a04      	ldr	r2, [sp, #16]
 800353c:	b9d8      	cbnz	r0, 8003576 <_svfiprintf_r+0xe6>
 800353e:	06d0      	lsls	r0, r2, #27
 8003540:	bf44      	itt	mi
 8003542:	2320      	movmi	r3, #32
 8003544:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003548:	0711      	lsls	r1, r2, #28
 800354a:	bf44      	itt	mi
 800354c:	232b      	movmi	r3, #43	; 0x2b
 800354e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003552:	f89a 3000 	ldrb.w	r3, [sl]
 8003556:	2b2a      	cmp	r3, #42	; 0x2a
 8003558:	d015      	beq.n	8003586 <_svfiprintf_r+0xf6>
 800355a:	4654      	mov	r4, sl
 800355c:	2000      	movs	r0, #0
 800355e:	f04f 0c0a 	mov.w	ip, #10
 8003562:	9a07      	ldr	r2, [sp, #28]
 8003564:	4621      	mov	r1, r4
 8003566:	f811 3b01 	ldrb.w	r3, [r1], #1
 800356a:	3b30      	subs	r3, #48	; 0x30
 800356c:	2b09      	cmp	r3, #9
 800356e:	d94e      	bls.n	800360e <_svfiprintf_r+0x17e>
 8003570:	b1b0      	cbz	r0, 80035a0 <_svfiprintf_r+0x110>
 8003572:	9207      	str	r2, [sp, #28]
 8003574:	e014      	b.n	80035a0 <_svfiprintf_r+0x110>
 8003576:	eba0 0308 	sub.w	r3, r0, r8
 800357a:	fa09 f303 	lsl.w	r3, r9, r3
 800357e:	4313      	orrs	r3, r2
 8003580:	46a2      	mov	sl, r4
 8003582:	9304      	str	r3, [sp, #16]
 8003584:	e7d2      	b.n	800352c <_svfiprintf_r+0x9c>
 8003586:	9b03      	ldr	r3, [sp, #12]
 8003588:	1d19      	adds	r1, r3, #4
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	9103      	str	r1, [sp, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	bfbb      	ittet	lt
 8003592:	425b      	neglt	r3, r3
 8003594:	f042 0202 	orrlt.w	r2, r2, #2
 8003598:	9307      	strge	r3, [sp, #28]
 800359a:	9307      	strlt	r3, [sp, #28]
 800359c:	bfb8      	it	lt
 800359e:	9204      	strlt	r2, [sp, #16]
 80035a0:	7823      	ldrb	r3, [r4, #0]
 80035a2:	2b2e      	cmp	r3, #46	; 0x2e
 80035a4:	d10c      	bne.n	80035c0 <_svfiprintf_r+0x130>
 80035a6:	7863      	ldrb	r3, [r4, #1]
 80035a8:	2b2a      	cmp	r3, #42	; 0x2a
 80035aa:	d135      	bne.n	8003618 <_svfiprintf_r+0x188>
 80035ac:	9b03      	ldr	r3, [sp, #12]
 80035ae:	3402      	adds	r4, #2
 80035b0:	1d1a      	adds	r2, r3, #4
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	9203      	str	r2, [sp, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	bfb8      	it	lt
 80035ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80035be:	9305      	str	r3, [sp, #20]
 80035c0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003680 <_svfiprintf_r+0x1f0>
 80035c4:	2203      	movs	r2, #3
 80035c6:	4650      	mov	r0, sl
 80035c8:	7821      	ldrb	r1, [r4, #0]
 80035ca:	f000 f9f7 	bl	80039bc <memchr>
 80035ce:	b140      	cbz	r0, 80035e2 <_svfiprintf_r+0x152>
 80035d0:	2340      	movs	r3, #64	; 0x40
 80035d2:	eba0 000a 	sub.w	r0, r0, sl
 80035d6:	fa03 f000 	lsl.w	r0, r3, r0
 80035da:	9b04      	ldr	r3, [sp, #16]
 80035dc:	3401      	adds	r4, #1
 80035de:	4303      	orrs	r3, r0
 80035e0:	9304      	str	r3, [sp, #16]
 80035e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035e6:	2206      	movs	r2, #6
 80035e8:	4826      	ldr	r0, [pc, #152]	; (8003684 <_svfiprintf_r+0x1f4>)
 80035ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035ee:	f000 f9e5 	bl	80039bc <memchr>
 80035f2:	2800      	cmp	r0, #0
 80035f4:	d038      	beq.n	8003668 <_svfiprintf_r+0x1d8>
 80035f6:	4b24      	ldr	r3, [pc, #144]	; (8003688 <_svfiprintf_r+0x1f8>)
 80035f8:	bb1b      	cbnz	r3, 8003642 <_svfiprintf_r+0x1b2>
 80035fa:	9b03      	ldr	r3, [sp, #12]
 80035fc:	3307      	adds	r3, #7
 80035fe:	f023 0307 	bic.w	r3, r3, #7
 8003602:	3308      	adds	r3, #8
 8003604:	9303      	str	r3, [sp, #12]
 8003606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003608:	4433      	add	r3, r6
 800360a:	9309      	str	r3, [sp, #36]	; 0x24
 800360c:	e767      	b.n	80034de <_svfiprintf_r+0x4e>
 800360e:	460c      	mov	r4, r1
 8003610:	2001      	movs	r0, #1
 8003612:	fb0c 3202 	mla	r2, ip, r2, r3
 8003616:	e7a5      	b.n	8003564 <_svfiprintf_r+0xd4>
 8003618:	2300      	movs	r3, #0
 800361a:	f04f 0c0a 	mov.w	ip, #10
 800361e:	4619      	mov	r1, r3
 8003620:	3401      	adds	r4, #1
 8003622:	9305      	str	r3, [sp, #20]
 8003624:	4620      	mov	r0, r4
 8003626:	f810 2b01 	ldrb.w	r2, [r0], #1
 800362a:	3a30      	subs	r2, #48	; 0x30
 800362c:	2a09      	cmp	r2, #9
 800362e:	d903      	bls.n	8003638 <_svfiprintf_r+0x1a8>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0c5      	beq.n	80035c0 <_svfiprintf_r+0x130>
 8003634:	9105      	str	r1, [sp, #20]
 8003636:	e7c3      	b.n	80035c0 <_svfiprintf_r+0x130>
 8003638:	4604      	mov	r4, r0
 800363a:	2301      	movs	r3, #1
 800363c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003640:	e7f0      	b.n	8003624 <_svfiprintf_r+0x194>
 8003642:	ab03      	add	r3, sp, #12
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	462a      	mov	r2, r5
 8003648:	4638      	mov	r0, r7
 800364a:	4b10      	ldr	r3, [pc, #64]	; (800368c <_svfiprintf_r+0x1fc>)
 800364c:	a904      	add	r1, sp, #16
 800364e:	f3af 8000 	nop.w
 8003652:	1c42      	adds	r2, r0, #1
 8003654:	4606      	mov	r6, r0
 8003656:	d1d6      	bne.n	8003606 <_svfiprintf_r+0x176>
 8003658:	89ab      	ldrh	r3, [r5, #12]
 800365a:	065b      	lsls	r3, r3, #25
 800365c:	f53f af2c 	bmi.w	80034b8 <_svfiprintf_r+0x28>
 8003660:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003662:	b01d      	add	sp, #116	; 0x74
 8003664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003668:	ab03      	add	r3, sp, #12
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	462a      	mov	r2, r5
 800366e:	4638      	mov	r0, r7
 8003670:	4b06      	ldr	r3, [pc, #24]	; (800368c <_svfiprintf_r+0x1fc>)
 8003672:	a904      	add	r1, sp, #16
 8003674:	f000 f87c 	bl	8003770 <_printf_i>
 8003678:	e7eb      	b.n	8003652 <_svfiprintf_r+0x1c2>
 800367a:	bf00      	nop
 800367c:	08003cf6 	.word	0x08003cf6
 8003680:	08003cfc 	.word	0x08003cfc
 8003684:	08003d00 	.word	0x08003d00
 8003688:	00000000 	.word	0x00000000
 800368c:	080033d9 	.word	0x080033d9

08003690 <_printf_common>:
 8003690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003694:	4616      	mov	r6, r2
 8003696:	4699      	mov	r9, r3
 8003698:	688a      	ldr	r2, [r1, #8]
 800369a:	690b      	ldr	r3, [r1, #16]
 800369c:	4607      	mov	r7, r0
 800369e:	4293      	cmp	r3, r2
 80036a0:	bfb8      	it	lt
 80036a2:	4613      	movlt	r3, r2
 80036a4:	6033      	str	r3, [r6, #0]
 80036a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036aa:	460c      	mov	r4, r1
 80036ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036b0:	b10a      	cbz	r2, 80036b6 <_printf_common+0x26>
 80036b2:	3301      	adds	r3, #1
 80036b4:	6033      	str	r3, [r6, #0]
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	0699      	lsls	r1, r3, #26
 80036ba:	bf42      	ittt	mi
 80036bc:	6833      	ldrmi	r3, [r6, #0]
 80036be:	3302      	addmi	r3, #2
 80036c0:	6033      	strmi	r3, [r6, #0]
 80036c2:	6825      	ldr	r5, [r4, #0]
 80036c4:	f015 0506 	ands.w	r5, r5, #6
 80036c8:	d106      	bne.n	80036d8 <_printf_common+0x48>
 80036ca:	f104 0a19 	add.w	sl, r4, #25
 80036ce:	68e3      	ldr	r3, [r4, #12]
 80036d0:	6832      	ldr	r2, [r6, #0]
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	42ab      	cmp	r3, r5
 80036d6:	dc28      	bgt.n	800372a <_printf_common+0x9a>
 80036d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036dc:	1e13      	subs	r3, r2, #0
 80036de:	6822      	ldr	r2, [r4, #0]
 80036e0:	bf18      	it	ne
 80036e2:	2301      	movne	r3, #1
 80036e4:	0692      	lsls	r2, r2, #26
 80036e6:	d42d      	bmi.n	8003744 <_printf_common+0xb4>
 80036e8:	4649      	mov	r1, r9
 80036ea:	4638      	mov	r0, r7
 80036ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036f0:	47c0      	blx	r8
 80036f2:	3001      	adds	r0, #1
 80036f4:	d020      	beq.n	8003738 <_printf_common+0xa8>
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	68e5      	ldr	r5, [r4, #12]
 80036fa:	f003 0306 	and.w	r3, r3, #6
 80036fe:	2b04      	cmp	r3, #4
 8003700:	bf18      	it	ne
 8003702:	2500      	movne	r5, #0
 8003704:	6832      	ldr	r2, [r6, #0]
 8003706:	f04f 0600 	mov.w	r6, #0
 800370a:	68a3      	ldr	r3, [r4, #8]
 800370c:	bf08      	it	eq
 800370e:	1aad      	subeq	r5, r5, r2
 8003710:	6922      	ldr	r2, [r4, #16]
 8003712:	bf08      	it	eq
 8003714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003718:	4293      	cmp	r3, r2
 800371a:	bfc4      	itt	gt
 800371c:	1a9b      	subgt	r3, r3, r2
 800371e:	18ed      	addgt	r5, r5, r3
 8003720:	341a      	adds	r4, #26
 8003722:	42b5      	cmp	r5, r6
 8003724:	d11a      	bne.n	800375c <_printf_common+0xcc>
 8003726:	2000      	movs	r0, #0
 8003728:	e008      	b.n	800373c <_printf_common+0xac>
 800372a:	2301      	movs	r3, #1
 800372c:	4652      	mov	r2, sl
 800372e:	4649      	mov	r1, r9
 8003730:	4638      	mov	r0, r7
 8003732:	47c0      	blx	r8
 8003734:	3001      	adds	r0, #1
 8003736:	d103      	bne.n	8003740 <_printf_common+0xb0>
 8003738:	f04f 30ff 	mov.w	r0, #4294967295
 800373c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003740:	3501      	adds	r5, #1
 8003742:	e7c4      	b.n	80036ce <_printf_common+0x3e>
 8003744:	2030      	movs	r0, #48	; 0x30
 8003746:	18e1      	adds	r1, r4, r3
 8003748:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003752:	4422      	add	r2, r4
 8003754:	3302      	adds	r3, #2
 8003756:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800375a:	e7c5      	b.n	80036e8 <_printf_common+0x58>
 800375c:	2301      	movs	r3, #1
 800375e:	4622      	mov	r2, r4
 8003760:	4649      	mov	r1, r9
 8003762:	4638      	mov	r0, r7
 8003764:	47c0      	blx	r8
 8003766:	3001      	adds	r0, #1
 8003768:	d0e6      	beq.n	8003738 <_printf_common+0xa8>
 800376a:	3601      	adds	r6, #1
 800376c:	e7d9      	b.n	8003722 <_printf_common+0x92>
	...

08003770 <_printf_i>:
 8003770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003774:	7e0f      	ldrb	r7, [r1, #24]
 8003776:	4691      	mov	r9, r2
 8003778:	2f78      	cmp	r7, #120	; 0x78
 800377a:	4680      	mov	r8, r0
 800377c:	460c      	mov	r4, r1
 800377e:	469a      	mov	sl, r3
 8003780:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003782:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003786:	d807      	bhi.n	8003798 <_printf_i+0x28>
 8003788:	2f62      	cmp	r7, #98	; 0x62
 800378a:	d80a      	bhi.n	80037a2 <_printf_i+0x32>
 800378c:	2f00      	cmp	r7, #0
 800378e:	f000 80d9 	beq.w	8003944 <_printf_i+0x1d4>
 8003792:	2f58      	cmp	r7, #88	; 0x58
 8003794:	f000 80a4 	beq.w	80038e0 <_printf_i+0x170>
 8003798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800379c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037a0:	e03a      	b.n	8003818 <_printf_i+0xa8>
 80037a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037a6:	2b15      	cmp	r3, #21
 80037a8:	d8f6      	bhi.n	8003798 <_printf_i+0x28>
 80037aa:	a101      	add	r1, pc, #4	; (adr r1, 80037b0 <_printf_i+0x40>)
 80037ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037b0:	08003809 	.word	0x08003809
 80037b4:	0800381d 	.word	0x0800381d
 80037b8:	08003799 	.word	0x08003799
 80037bc:	08003799 	.word	0x08003799
 80037c0:	08003799 	.word	0x08003799
 80037c4:	08003799 	.word	0x08003799
 80037c8:	0800381d 	.word	0x0800381d
 80037cc:	08003799 	.word	0x08003799
 80037d0:	08003799 	.word	0x08003799
 80037d4:	08003799 	.word	0x08003799
 80037d8:	08003799 	.word	0x08003799
 80037dc:	0800392b 	.word	0x0800392b
 80037e0:	0800384d 	.word	0x0800384d
 80037e4:	0800390d 	.word	0x0800390d
 80037e8:	08003799 	.word	0x08003799
 80037ec:	08003799 	.word	0x08003799
 80037f0:	0800394d 	.word	0x0800394d
 80037f4:	08003799 	.word	0x08003799
 80037f8:	0800384d 	.word	0x0800384d
 80037fc:	08003799 	.word	0x08003799
 8003800:	08003799 	.word	0x08003799
 8003804:	08003915 	.word	0x08003915
 8003808:	682b      	ldr	r3, [r5, #0]
 800380a:	1d1a      	adds	r2, r3, #4
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	602a      	str	r2, [r5, #0]
 8003810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003814:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003818:	2301      	movs	r3, #1
 800381a:	e0a4      	b.n	8003966 <_printf_i+0x1f6>
 800381c:	6820      	ldr	r0, [r4, #0]
 800381e:	6829      	ldr	r1, [r5, #0]
 8003820:	0606      	lsls	r6, r0, #24
 8003822:	f101 0304 	add.w	r3, r1, #4
 8003826:	d50a      	bpl.n	800383e <_printf_i+0xce>
 8003828:	680e      	ldr	r6, [r1, #0]
 800382a:	602b      	str	r3, [r5, #0]
 800382c:	2e00      	cmp	r6, #0
 800382e:	da03      	bge.n	8003838 <_printf_i+0xc8>
 8003830:	232d      	movs	r3, #45	; 0x2d
 8003832:	4276      	negs	r6, r6
 8003834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003838:	230a      	movs	r3, #10
 800383a:	485e      	ldr	r0, [pc, #376]	; (80039b4 <_printf_i+0x244>)
 800383c:	e019      	b.n	8003872 <_printf_i+0x102>
 800383e:	680e      	ldr	r6, [r1, #0]
 8003840:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003844:	602b      	str	r3, [r5, #0]
 8003846:	bf18      	it	ne
 8003848:	b236      	sxthne	r6, r6
 800384a:	e7ef      	b.n	800382c <_printf_i+0xbc>
 800384c:	682b      	ldr	r3, [r5, #0]
 800384e:	6820      	ldr	r0, [r4, #0]
 8003850:	1d19      	adds	r1, r3, #4
 8003852:	6029      	str	r1, [r5, #0]
 8003854:	0601      	lsls	r1, r0, #24
 8003856:	d501      	bpl.n	800385c <_printf_i+0xec>
 8003858:	681e      	ldr	r6, [r3, #0]
 800385a:	e002      	b.n	8003862 <_printf_i+0xf2>
 800385c:	0646      	lsls	r6, r0, #25
 800385e:	d5fb      	bpl.n	8003858 <_printf_i+0xe8>
 8003860:	881e      	ldrh	r6, [r3, #0]
 8003862:	2f6f      	cmp	r7, #111	; 0x6f
 8003864:	bf0c      	ite	eq
 8003866:	2308      	moveq	r3, #8
 8003868:	230a      	movne	r3, #10
 800386a:	4852      	ldr	r0, [pc, #328]	; (80039b4 <_printf_i+0x244>)
 800386c:	2100      	movs	r1, #0
 800386e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003872:	6865      	ldr	r5, [r4, #4]
 8003874:	2d00      	cmp	r5, #0
 8003876:	bfa8      	it	ge
 8003878:	6821      	ldrge	r1, [r4, #0]
 800387a:	60a5      	str	r5, [r4, #8]
 800387c:	bfa4      	itt	ge
 800387e:	f021 0104 	bicge.w	r1, r1, #4
 8003882:	6021      	strge	r1, [r4, #0]
 8003884:	b90e      	cbnz	r6, 800388a <_printf_i+0x11a>
 8003886:	2d00      	cmp	r5, #0
 8003888:	d04d      	beq.n	8003926 <_printf_i+0x1b6>
 800388a:	4615      	mov	r5, r2
 800388c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003890:	fb03 6711 	mls	r7, r3, r1, r6
 8003894:	5dc7      	ldrb	r7, [r0, r7]
 8003896:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800389a:	4637      	mov	r7, r6
 800389c:	42bb      	cmp	r3, r7
 800389e:	460e      	mov	r6, r1
 80038a0:	d9f4      	bls.n	800388c <_printf_i+0x11c>
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d10b      	bne.n	80038be <_printf_i+0x14e>
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	07de      	lsls	r6, r3, #31
 80038aa:	d508      	bpl.n	80038be <_printf_i+0x14e>
 80038ac:	6923      	ldr	r3, [r4, #16]
 80038ae:	6861      	ldr	r1, [r4, #4]
 80038b0:	4299      	cmp	r1, r3
 80038b2:	bfde      	ittt	le
 80038b4:	2330      	movle	r3, #48	; 0x30
 80038b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038be:	1b52      	subs	r2, r2, r5
 80038c0:	6122      	str	r2, [r4, #16]
 80038c2:	464b      	mov	r3, r9
 80038c4:	4621      	mov	r1, r4
 80038c6:	4640      	mov	r0, r8
 80038c8:	f8cd a000 	str.w	sl, [sp]
 80038cc:	aa03      	add	r2, sp, #12
 80038ce:	f7ff fedf 	bl	8003690 <_printf_common>
 80038d2:	3001      	adds	r0, #1
 80038d4:	d14c      	bne.n	8003970 <_printf_i+0x200>
 80038d6:	f04f 30ff 	mov.w	r0, #4294967295
 80038da:	b004      	add	sp, #16
 80038dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e0:	4834      	ldr	r0, [pc, #208]	; (80039b4 <_printf_i+0x244>)
 80038e2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80038e6:	6829      	ldr	r1, [r5, #0]
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	f851 6b04 	ldr.w	r6, [r1], #4
 80038ee:	6029      	str	r1, [r5, #0]
 80038f0:	061d      	lsls	r5, r3, #24
 80038f2:	d514      	bpl.n	800391e <_printf_i+0x1ae>
 80038f4:	07df      	lsls	r7, r3, #31
 80038f6:	bf44      	itt	mi
 80038f8:	f043 0320 	orrmi.w	r3, r3, #32
 80038fc:	6023      	strmi	r3, [r4, #0]
 80038fe:	b91e      	cbnz	r6, 8003908 <_printf_i+0x198>
 8003900:	6823      	ldr	r3, [r4, #0]
 8003902:	f023 0320 	bic.w	r3, r3, #32
 8003906:	6023      	str	r3, [r4, #0]
 8003908:	2310      	movs	r3, #16
 800390a:	e7af      	b.n	800386c <_printf_i+0xfc>
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	f043 0320 	orr.w	r3, r3, #32
 8003912:	6023      	str	r3, [r4, #0]
 8003914:	2378      	movs	r3, #120	; 0x78
 8003916:	4828      	ldr	r0, [pc, #160]	; (80039b8 <_printf_i+0x248>)
 8003918:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800391c:	e7e3      	b.n	80038e6 <_printf_i+0x176>
 800391e:	0659      	lsls	r1, r3, #25
 8003920:	bf48      	it	mi
 8003922:	b2b6      	uxthmi	r6, r6
 8003924:	e7e6      	b.n	80038f4 <_printf_i+0x184>
 8003926:	4615      	mov	r5, r2
 8003928:	e7bb      	b.n	80038a2 <_printf_i+0x132>
 800392a:	682b      	ldr	r3, [r5, #0]
 800392c:	6826      	ldr	r6, [r4, #0]
 800392e:	1d18      	adds	r0, r3, #4
 8003930:	6961      	ldr	r1, [r4, #20]
 8003932:	6028      	str	r0, [r5, #0]
 8003934:	0635      	lsls	r5, r6, #24
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	d501      	bpl.n	800393e <_printf_i+0x1ce>
 800393a:	6019      	str	r1, [r3, #0]
 800393c:	e002      	b.n	8003944 <_printf_i+0x1d4>
 800393e:	0670      	lsls	r0, r6, #25
 8003940:	d5fb      	bpl.n	800393a <_printf_i+0x1ca>
 8003942:	8019      	strh	r1, [r3, #0]
 8003944:	2300      	movs	r3, #0
 8003946:	4615      	mov	r5, r2
 8003948:	6123      	str	r3, [r4, #16]
 800394a:	e7ba      	b.n	80038c2 <_printf_i+0x152>
 800394c:	682b      	ldr	r3, [r5, #0]
 800394e:	2100      	movs	r1, #0
 8003950:	1d1a      	adds	r2, r3, #4
 8003952:	602a      	str	r2, [r5, #0]
 8003954:	681d      	ldr	r5, [r3, #0]
 8003956:	6862      	ldr	r2, [r4, #4]
 8003958:	4628      	mov	r0, r5
 800395a:	f000 f82f 	bl	80039bc <memchr>
 800395e:	b108      	cbz	r0, 8003964 <_printf_i+0x1f4>
 8003960:	1b40      	subs	r0, r0, r5
 8003962:	6060      	str	r0, [r4, #4]
 8003964:	6863      	ldr	r3, [r4, #4]
 8003966:	6123      	str	r3, [r4, #16]
 8003968:	2300      	movs	r3, #0
 800396a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800396e:	e7a8      	b.n	80038c2 <_printf_i+0x152>
 8003970:	462a      	mov	r2, r5
 8003972:	4649      	mov	r1, r9
 8003974:	4640      	mov	r0, r8
 8003976:	6923      	ldr	r3, [r4, #16]
 8003978:	47d0      	blx	sl
 800397a:	3001      	adds	r0, #1
 800397c:	d0ab      	beq.n	80038d6 <_printf_i+0x166>
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	079b      	lsls	r3, r3, #30
 8003982:	d413      	bmi.n	80039ac <_printf_i+0x23c>
 8003984:	68e0      	ldr	r0, [r4, #12]
 8003986:	9b03      	ldr	r3, [sp, #12]
 8003988:	4298      	cmp	r0, r3
 800398a:	bfb8      	it	lt
 800398c:	4618      	movlt	r0, r3
 800398e:	e7a4      	b.n	80038da <_printf_i+0x16a>
 8003990:	2301      	movs	r3, #1
 8003992:	4632      	mov	r2, r6
 8003994:	4649      	mov	r1, r9
 8003996:	4640      	mov	r0, r8
 8003998:	47d0      	blx	sl
 800399a:	3001      	adds	r0, #1
 800399c:	d09b      	beq.n	80038d6 <_printf_i+0x166>
 800399e:	3501      	adds	r5, #1
 80039a0:	68e3      	ldr	r3, [r4, #12]
 80039a2:	9903      	ldr	r1, [sp, #12]
 80039a4:	1a5b      	subs	r3, r3, r1
 80039a6:	42ab      	cmp	r3, r5
 80039a8:	dcf2      	bgt.n	8003990 <_printf_i+0x220>
 80039aa:	e7eb      	b.n	8003984 <_printf_i+0x214>
 80039ac:	2500      	movs	r5, #0
 80039ae:	f104 0619 	add.w	r6, r4, #25
 80039b2:	e7f5      	b.n	80039a0 <_printf_i+0x230>
 80039b4:	08003d07 	.word	0x08003d07
 80039b8:	08003d18 	.word	0x08003d18

080039bc <memchr>:
 80039bc:	4603      	mov	r3, r0
 80039be:	b510      	push	{r4, lr}
 80039c0:	b2c9      	uxtb	r1, r1
 80039c2:	4402      	add	r2, r0
 80039c4:	4293      	cmp	r3, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	d101      	bne.n	80039ce <memchr+0x12>
 80039ca:	2000      	movs	r0, #0
 80039cc:	e003      	b.n	80039d6 <memchr+0x1a>
 80039ce:	7804      	ldrb	r4, [r0, #0]
 80039d0:	3301      	adds	r3, #1
 80039d2:	428c      	cmp	r4, r1
 80039d4:	d1f6      	bne.n	80039c4 <memchr+0x8>
 80039d6:	bd10      	pop	{r4, pc}

080039d8 <memcpy>:
 80039d8:	440a      	add	r2, r1
 80039da:	4291      	cmp	r1, r2
 80039dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80039e0:	d100      	bne.n	80039e4 <memcpy+0xc>
 80039e2:	4770      	bx	lr
 80039e4:	b510      	push	{r4, lr}
 80039e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039ea:	4291      	cmp	r1, r2
 80039ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039f0:	d1f9      	bne.n	80039e6 <memcpy+0xe>
 80039f2:	bd10      	pop	{r4, pc}

080039f4 <memmove>:
 80039f4:	4288      	cmp	r0, r1
 80039f6:	b510      	push	{r4, lr}
 80039f8:	eb01 0402 	add.w	r4, r1, r2
 80039fc:	d902      	bls.n	8003a04 <memmove+0x10>
 80039fe:	4284      	cmp	r4, r0
 8003a00:	4623      	mov	r3, r4
 8003a02:	d807      	bhi.n	8003a14 <memmove+0x20>
 8003a04:	1e43      	subs	r3, r0, #1
 8003a06:	42a1      	cmp	r1, r4
 8003a08:	d008      	beq.n	8003a1c <memmove+0x28>
 8003a0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a12:	e7f8      	b.n	8003a06 <memmove+0x12>
 8003a14:	4601      	mov	r1, r0
 8003a16:	4402      	add	r2, r0
 8003a18:	428a      	cmp	r2, r1
 8003a1a:	d100      	bne.n	8003a1e <memmove+0x2a>
 8003a1c:	bd10      	pop	{r4, pc}
 8003a1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a26:	e7f7      	b.n	8003a18 <memmove+0x24>

08003a28 <_free_r>:
 8003a28:	b538      	push	{r3, r4, r5, lr}
 8003a2a:	4605      	mov	r5, r0
 8003a2c:	2900      	cmp	r1, #0
 8003a2e:	d040      	beq.n	8003ab2 <_free_r+0x8a>
 8003a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a34:	1f0c      	subs	r4, r1, #4
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	bfb8      	it	lt
 8003a3a:	18e4      	addlt	r4, r4, r3
 8003a3c:	f000 f910 	bl	8003c60 <__malloc_lock>
 8003a40:	4a1c      	ldr	r2, [pc, #112]	; (8003ab4 <_free_r+0x8c>)
 8003a42:	6813      	ldr	r3, [r2, #0]
 8003a44:	b933      	cbnz	r3, 8003a54 <_free_r+0x2c>
 8003a46:	6063      	str	r3, [r4, #4]
 8003a48:	6014      	str	r4, [r2, #0]
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a50:	f000 b90c 	b.w	8003c6c <__malloc_unlock>
 8003a54:	42a3      	cmp	r3, r4
 8003a56:	d908      	bls.n	8003a6a <_free_r+0x42>
 8003a58:	6820      	ldr	r0, [r4, #0]
 8003a5a:	1821      	adds	r1, r4, r0
 8003a5c:	428b      	cmp	r3, r1
 8003a5e:	bf01      	itttt	eq
 8003a60:	6819      	ldreq	r1, [r3, #0]
 8003a62:	685b      	ldreq	r3, [r3, #4]
 8003a64:	1809      	addeq	r1, r1, r0
 8003a66:	6021      	streq	r1, [r4, #0]
 8003a68:	e7ed      	b.n	8003a46 <_free_r+0x1e>
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	b10b      	cbz	r3, 8003a74 <_free_r+0x4c>
 8003a70:	42a3      	cmp	r3, r4
 8003a72:	d9fa      	bls.n	8003a6a <_free_r+0x42>
 8003a74:	6811      	ldr	r1, [r2, #0]
 8003a76:	1850      	adds	r0, r2, r1
 8003a78:	42a0      	cmp	r0, r4
 8003a7a:	d10b      	bne.n	8003a94 <_free_r+0x6c>
 8003a7c:	6820      	ldr	r0, [r4, #0]
 8003a7e:	4401      	add	r1, r0
 8003a80:	1850      	adds	r0, r2, r1
 8003a82:	4283      	cmp	r3, r0
 8003a84:	6011      	str	r1, [r2, #0]
 8003a86:	d1e0      	bne.n	8003a4a <_free_r+0x22>
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4401      	add	r1, r0
 8003a8e:	6011      	str	r1, [r2, #0]
 8003a90:	6053      	str	r3, [r2, #4]
 8003a92:	e7da      	b.n	8003a4a <_free_r+0x22>
 8003a94:	d902      	bls.n	8003a9c <_free_r+0x74>
 8003a96:	230c      	movs	r3, #12
 8003a98:	602b      	str	r3, [r5, #0]
 8003a9a:	e7d6      	b.n	8003a4a <_free_r+0x22>
 8003a9c:	6820      	ldr	r0, [r4, #0]
 8003a9e:	1821      	adds	r1, r4, r0
 8003aa0:	428b      	cmp	r3, r1
 8003aa2:	bf01      	itttt	eq
 8003aa4:	6819      	ldreq	r1, [r3, #0]
 8003aa6:	685b      	ldreq	r3, [r3, #4]
 8003aa8:	1809      	addeq	r1, r1, r0
 8003aaa:	6021      	streq	r1, [r4, #0]
 8003aac:	6063      	str	r3, [r4, #4]
 8003aae:	6054      	str	r4, [r2, #4]
 8003ab0:	e7cb      	b.n	8003a4a <_free_r+0x22>
 8003ab2:	bd38      	pop	{r3, r4, r5, pc}
 8003ab4:	20000110 	.word	0x20000110

08003ab8 <sbrk_aligned>:
 8003ab8:	b570      	push	{r4, r5, r6, lr}
 8003aba:	4e0e      	ldr	r6, [pc, #56]	; (8003af4 <sbrk_aligned+0x3c>)
 8003abc:	460c      	mov	r4, r1
 8003abe:	6831      	ldr	r1, [r6, #0]
 8003ac0:	4605      	mov	r5, r0
 8003ac2:	b911      	cbnz	r1, 8003aca <sbrk_aligned+0x12>
 8003ac4:	f000 f8bc 	bl	8003c40 <_sbrk_r>
 8003ac8:	6030      	str	r0, [r6, #0]
 8003aca:	4621      	mov	r1, r4
 8003acc:	4628      	mov	r0, r5
 8003ace:	f000 f8b7 	bl	8003c40 <_sbrk_r>
 8003ad2:	1c43      	adds	r3, r0, #1
 8003ad4:	d00a      	beq.n	8003aec <sbrk_aligned+0x34>
 8003ad6:	1cc4      	adds	r4, r0, #3
 8003ad8:	f024 0403 	bic.w	r4, r4, #3
 8003adc:	42a0      	cmp	r0, r4
 8003ade:	d007      	beq.n	8003af0 <sbrk_aligned+0x38>
 8003ae0:	1a21      	subs	r1, r4, r0
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	f000 f8ac 	bl	8003c40 <_sbrk_r>
 8003ae8:	3001      	adds	r0, #1
 8003aea:	d101      	bne.n	8003af0 <sbrk_aligned+0x38>
 8003aec:	f04f 34ff 	mov.w	r4, #4294967295
 8003af0:	4620      	mov	r0, r4
 8003af2:	bd70      	pop	{r4, r5, r6, pc}
 8003af4:	20000114 	.word	0x20000114

08003af8 <_malloc_r>:
 8003af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003afc:	1ccd      	adds	r5, r1, #3
 8003afe:	f025 0503 	bic.w	r5, r5, #3
 8003b02:	3508      	adds	r5, #8
 8003b04:	2d0c      	cmp	r5, #12
 8003b06:	bf38      	it	cc
 8003b08:	250c      	movcc	r5, #12
 8003b0a:	2d00      	cmp	r5, #0
 8003b0c:	4607      	mov	r7, r0
 8003b0e:	db01      	blt.n	8003b14 <_malloc_r+0x1c>
 8003b10:	42a9      	cmp	r1, r5
 8003b12:	d905      	bls.n	8003b20 <_malloc_r+0x28>
 8003b14:	230c      	movs	r3, #12
 8003b16:	2600      	movs	r6, #0
 8003b18:	603b      	str	r3, [r7, #0]
 8003b1a:	4630      	mov	r0, r6
 8003b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b20:	4e2e      	ldr	r6, [pc, #184]	; (8003bdc <_malloc_r+0xe4>)
 8003b22:	f000 f89d 	bl	8003c60 <__malloc_lock>
 8003b26:	6833      	ldr	r3, [r6, #0]
 8003b28:	461c      	mov	r4, r3
 8003b2a:	bb34      	cbnz	r4, 8003b7a <_malloc_r+0x82>
 8003b2c:	4629      	mov	r1, r5
 8003b2e:	4638      	mov	r0, r7
 8003b30:	f7ff ffc2 	bl	8003ab8 <sbrk_aligned>
 8003b34:	1c43      	adds	r3, r0, #1
 8003b36:	4604      	mov	r4, r0
 8003b38:	d14d      	bne.n	8003bd6 <_malloc_r+0xde>
 8003b3a:	6834      	ldr	r4, [r6, #0]
 8003b3c:	4626      	mov	r6, r4
 8003b3e:	2e00      	cmp	r6, #0
 8003b40:	d140      	bne.n	8003bc4 <_malloc_r+0xcc>
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	4631      	mov	r1, r6
 8003b46:	4638      	mov	r0, r7
 8003b48:	eb04 0803 	add.w	r8, r4, r3
 8003b4c:	f000 f878 	bl	8003c40 <_sbrk_r>
 8003b50:	4580      	cmp	r8, r0
 8003b52:	d13a      	bne.n	8003bca <_malloc_r+0xd2>
 8003b54:	6821      	ldr	r1, [r4, #0]
 8003b56:	3503      	adds	r5, #3
 8003b58:	1a6d      	subs	r5, r5, r1
 8003b5a:	f025 0503 	bic.w	r5, r5, #3
 8003b5e:	3508      	adds	r5, #8
 8003b60:	2d0c      	cmp	r5, #12
 8003b62:	bf38      	it	cc
 8003b64:	250c      	movcc	r5, #12
 8003b66:	4638      	mov	r0, r7
 8003b68:	4629      	mov	r1, r5
 8003b6a:	f7ff ffa5 	bl	8003ab8 <sbrk_aligned>
 8003b6e:	3001      	adds	r0, #1
 8003b70:	d02b      	beq.n	8003bca <_malloc_r+0xd2>
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	442b      	add	r3, r5
 8003b76:	6023      	str	r3, [r4, #0]
 8003b78:	e00e      	b.n	8003b98 <_malloc_r+0xa0>
 8003b7a:	6822      	ldr	r2, [r4, #0]
 8003b7c:	1b52      	subs	r2, r2, r5
 8003b7e:	d41e      	bmi.n	8003bbe <_malloc_r+0xc6>
 8003b80:	2a0b      	cmp	r2, #11
 8003b82:	d916      	bls.n	8003bb2 <_malloc_r+0xba>
 8003b84:	1961      	adds	r1, r4, r5
 8003b86:	42a3      	cmp	r3, r4
 8003b88:	6025      	str	r5, [r4, #0]
 8003b8a:	bf18      	it	ne
 8003b8c:	6059      	strne	r1, [r3, #4]
 8003b8e:	6863      	ldr	r3, [r4, #4]
 8003b90:	bf08      	it	eq
 8003b92:	6031      	streq	r1, [r6, #0]
 8003b94:	5162      	str	r2, [r4, r5]
 8003b96:	604b      	str	r3, [r1, #4]
 8003b98:	4638      	mov	r0, r7
 8003b9a:	f104 060b 	add.w	r6, r4, #11
 8003b9e:	f000 f865 	bl	8003c6c <__malloc_unlock>
 8003ba2:	f026 0607 	bic.w	r6, r6, #7
 8003ba6:	1d23      	adds	r3, r4, #4
 8003ba8:	1af2      	subs	r2, r6, r3
 8003baa:	d0b6      	beq.n	8003b1a <_malloc_r+0x22>
 8003bac:	1b9b      	subs	r3, r3, r6
 8003bae:	50a3      	str	r3, [r4, r2]
 8003bb0:	e7b3      	b.n	8003b1a <_malloc_r+0x22>
 8003bb2:	6862      	ldr	r2, [r4, #4]
 8003bb4:	42a3      	cmp	r3, r4
 8003bb6:	bf0c      	ite	eq
 8003bb8:	6032      	streq	r2, [r6, #0]
 8003bba:	605a      	strne	r2, [r3, #4]
 8003bbc:	e7ec      	b.n	8003b98 <_malloc_r+0xa0>
 8003bbe:	4623      	mov	r3, r4
 8003bc0:	6864      	ldr	r4, [r4, #4]
 8003bc2:	e7b2      	b.n	8003b2a <_malloc_r+0x32>
 8003bc4:	4634      	mov	r4, r6
 8003bc6:	6876      	ldr	r6, [r6, #4]
 8003bc8:	e7b9      	b.n	8003b3e <_malloc_r+0x46>
 8003bca:	230c      	movs	r3, #12
 8003bcc:	4638      	mov	r0, r7
 8003bce:	603b      	str	r3, [r7, #0]
 8003bd0:	f000 f84c 	bl	8003c6c <__malloc_unlock>
 8003bd4:	e7a1      	b.n	8003b1a <_malloc_r+0x22>
 8003bd6:	6025      	str	r5, [r4, #0]
 8003bd8:	e7de      	b.n	8003b98 <_malloc_r+0xa0>
 8003bda:	bf00      	nop
 8003bdc:	20000110 	.word	0x20000110

08003be0 <_realloc_r>:
 8003be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003be4:	4680      	mov	r8, r0
 8003be6:	4614      	mov	r4, r2
 8003be8:	460e      	mov	r6, r1
 8003bea:	b921      	cbnz	r1, 8003bf6 <_realloc_r+0x16>
 8003bec:	4611      	mov	r1, r2
 8003bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bf2:	f7ff bf81 	b.w	8003af8 <_malloc_r>
 8003bf6:	b92a      	cbnz	r2, 8003c04 <_realloc_r+0x24>
 8003bf8:	f7ff ff16 	bl	8003a28 <_free_r>
 8003bfc:	4625      	mov	r5, r4
 8003bfe:	4628      	mov	r0, r5
 8003c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c04:	f000 f838 	bl	8003c78 <_malloc_usable_size_r>
 8003c08:	4284      	cmp	r4, r0
 8003c0a:	4607      	mov	r7, r0
 8003c0c:	d802      	bhi.n	8003c14 <_realloc_r+0x34>
 8003c0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c12:	d812      	bhi.n	8003c3a <_realloc_r+0x5a>
 8003c14:	4621      	mov	r1, r4
 8003c16:	4640      	mov	r0, r8
 8003c18:	f7ff ff6e 	bl	8003af8 <_malloc_r>
 8003c1c:	4605      	mov	r5, r0
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	d0ed      	beq.n	8003bfe <_realloc_r+0x1e>
 8003c22:	42bc      	cmp	r4, r7
 8003c24:	4622      	mov	r2, r4
 8003c26:	4631      	mov	r1, r6
 8003c28:	bf28      	it	cs
 8003c2a:	463a      	movcs	r2, r7
 8003c2c:	f7ff fed4 	bl	80039d8 <memcpy>
 8003c30:	4631      	mov	r1, r6
 8003c32:	4640      	mov	r0, r8
 8003c34:	f7ff fef8 	bl	8003a28 <_free_r>
 8003c38:	e7e1      	b.n	8003bfe <_realloc_r+0x1e>
 8003c3a:	4635      	mov	r5, r6
 8003c3c:	e7df      	b.n	8003bfe <_realloc_r+0x1e>
	...

08003c40 <_sbrk_r>:
 8003c40:	b538      	push	{r3, r4, r5, lr}
 8003c42:	2300      	movs	r3, #0
 8003c44:	4d05      	ldr	r5, [pc, #20]	; (8003c5c <_sbrk_r+0x1c>)
 8003c46:	4604      	mov	r4, r0
 8003c48:	4608      	mov	r0, r1
 8003c4a:	602b      	str	r3, [r5, #0]
 8003c4c:	f7fd f9fe 	bl	800104c <_sbrk>
 8003c50:	1c43      	adds	r3, r0, #1
 8003c52:	d102      	bne.n	8003c5a <_sbrk_r+0x1a>
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	b103      	cbz	r3, 8003c5a <_sbrk_r+0x1a>
 8003c58:	6023      	str	r3, [r4, #0]
 8003c5a:	bd38      	pop	{r3, r4, r5, pc}
 8003c5c:	20000118 	.word	0x20000118

08003c60 <__malloc_lock>:
 8003c60:	4801      	ldr	r0, [pc, #4]	; (8003c68 <__malloc_lock+0x8>)
 8003c62:	f000 b811 	b.w	8003c88 <__retarget_lock_acquire_recursive>
 8003c66:	bf00      	nop
 8003c68:	2000011c 	.word	0x2000011c

08003c6c <__malloc_unlock>:
 8003c6c:	4801      	ldr	r0, [pc, #4]	; (8003c74 <__malloc_unlock+0x8>)
 8003c6e:	f000 b80c 	b.w	8003c8a <__retarget_lock_release_recursive>
 8003c72:	bf00      	nop
 8003c74:	2000011c 	.word	0x2000011c

08003c78 <_malloc_usable_size_r>:
 8003c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c7c:	1f18      	subs	r0, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	bfbc      	itt	lt
 8003c82:	580b      	ldrlt	r3, [r1, r0]
 8003c84:	18c0      	addlt	r0, r0, r3
 8003c86:	4770      	bx	lr

08003c88 <__retarget_lock_acquire_recursive>:
 8003c88:	4770      	bx	lr

08003c8a <__retarget_lock_release_recursive>:
 8003c8a:	4770      	bx	lr

08003c8c <_init>:
 8003c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8e:	bf00      	nop
 8003c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c92:	bc08      	pop	{r3}
 8003c94:	469e      	mov	lr, r3
 8003c96:	4770      	bx	lr

08003c98 <_fini>:
 8003c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9a:	bf00      	nop
 8003c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c9e:	bc08      	pop	{r3}
 8003ca0:	469e      	mov	lr, r3
 8003ca2:	4770      	bx	lr
